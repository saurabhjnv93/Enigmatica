Understanding Machine Learning:
From Theory to Algorithms
This copy is for personal use only. Not for distribution.
Do not post. Please link to:
Please note: This copy is almost, but not entirely, identical to the printed version
of the book. In particular, page numbers are not identical (but section numbers are the
Understanding Machine Learning
Machine learning is one of the fastest growing areas of computer science,
pled way. The book provides an extensive theoretical account of the
fundamental ideas underlying machine learning and the mathematical
lowing a presentation of the basics of the ﬁeld, the book covers a wide
books. These include a discussion of the computational complexity of
mic paradigms including stochastic gradient descent, neural networks,
and structured output learning; and emerging theoretical concepts such as
an advanced undergraduate or beginning graduate course, the text makes
dents and nonexpert readers in statistics, computer science, mathematics,
Science and Engineering at The Hebrew University, Israel.
University of Waterloo, Canada.
The Hebrew University, Jerusalem
University of Waterloo, Canada
Cambridge University Press is part of the University of Cambridge.
It furthers the University’s mission by disseminating knowledge in the pursuit of
education, learning and research at the highest international levels of excellence.
This publication is in copyright. Subject to statutory exception
and to the provisions of relevant collective licensing agreements,
no reproduction of any part may take place without the written
permission of Cambridge University Press.
Printed in the United States of America
A catalog record for this publication is available from the British Library
Library of Congress Cataloging in Publication Data
Cambridge University Press has no responsibility for the persistence or accuracy of
and does not guarantee that any content on such Web sites is, or will remain,
accurate or appropriate.
The term machine learning refers to the automated detection of meaningful
patterns in data. In the past couple of decades it has become a common tool in
almost any task that requires information extraction from large data sets. We are
surrounded by a machine learning based technology: search engines learn how
learns to ﬁlter our email messages, and credit card transactions are secured by
a software that learns how to detect frauds. Digital cameras learn to detect
recognize voice commands. Cars are equipped with accident prevention systems
that are built using machine learning algorithms. Machine learning is also widely
used in scientiﬁc applications such as bioinformatics, medicine, and astronomy.
One common feature of all of these applications is that, in contrast to more
traditional uses of computers, in these cases, due to the complexity of the patterns
detailed speciﬁcation of how such tasks should be executed. Taking example from
intelligent beings, many of our skills are acquired or reﬁned through learning from
our experience (rather than following explicit instructions given to us). Machine
learning tools are concerned with endowing programs with the ability to “learn”
duction to the main concepts underlying machine learning: What is learning?
How can a machine learn? How do we quantify the resources needed to learn a
given concept? Is learning always possible? Can we know if the learning process
succeeded or failed?
rithms. We chose to present algorithms that on one hand are successfully used
in practice and on the other hand give a wide spectrum of diﬀerent learning
techniques. Additionally, we pay speciﬁc attention to algorithms appropriate for
come increasingly “digitized” and the amount of data available for learning is
dramatically increasing. As a result, in many applications data is plentiful and
computation time is the main bottleneck. We therefore explicitly quantify both
the amount of data and the amount of computation time needed to learn a given
The book is divided into four parts. The ﬁrst part aims at giving an initial
eralization of Valiant’s Probably Approximately Correct (PAC) learning model,
which is a ﬁrst solid answer to the question “what is learning?”. We describe
the Empirical Risk Minimization (ERM), Structural Risk Minimization (SRM),
and Minimum Description Length (MDL) learning rules, which shows “how can
a machine learn”. We quantify the amount of data needed for learning using
the ERM, SRM, and MDL rules and show how learning might fail by deriving
quired for learning. In the second part of the book we describe various learning
algorithms. For some of the algorithms, we ﬁrst present a more general learning
principle, and then show how the algorithm follows the principle. While the ﬁrst
two parts of the book focus on the PAC model, the third part extends the scope
by presenting a wider variety of learning models. Finally, the last part of the
book is devoted to advanced theory.
the reader is assumed to be comfortable with basic notions of probability, linear
algebra, analysis, and algorithms. The ﬁrst three parts of the book are intended
for ﬁrst year graduate students in computer science, engineering, mathematics, or
statistics. It can also be accessible to undergraduate students with the adequate
background. The more advanced chapters can be used by researchers intending
to gather a deeper theoretical understanding.
The book is based on Introduction to Machine Learning courses taught by Shai
sity of Waterloo. The ﬁrst draft of the book grew out of the lecture notes for
the exercises. Alon, to whom we are indebted for his help throughout the entire
making of the book, has also prepared a solution manual.
We are deeply grateful for the most valuable work of Dana Rubinstein. Dana
has scientiﬁcally proofread and edited the manuscript, transforming it from
Special thanks to Amit Daniely, who helped us with a careful read of the
advanced part of the book and also wrote the advanced chapter on multiclass
learnability. We are also grateful for the members of a book reading club in
Jerusalem that have carefully read and constructively criticized every line of
vani, Aharon Birnbaum, Alon Cohen, Alon Gonen, Roi Livni, Ofer Meshi, Dan
Rosenbaum, Dana Rubinstein, Shahar Somin, Alon Vinnikov, and Yoav Wald.
We would also like to thank Gal Elidan, Amir Globerson, Nika Haghtalab, Shie
Mannor, Amnon Shashua, Nati Srebro, and Ruth Urner for helpful discussions.
When Do We Need Machine Learning?
Relations to Other Fields
How to Read This Book
Possible Course Plans Based on This Book
A Formal Model – The Statistical Learning Framework
Empirical Risk Minimization
Something May Go Wrong – Overﬁtting
Empirical Risk Minimization with Inductive Bias
Finite Hypothesis Classes
A Formal Learning Model
A More General Learning Model
Releasing the Realizability Assumption – Agnostic PAC
The Scope of Learning Problems Modeled
Bibliographic Remarks
Learning via Uniform Convergence
Uniform Convergence Is Suﬃcient for Learnability
Finite Classes Are Agnostic PAC Learnable
Personal use only. Not for distribution. Do not post.
Bibliographic Remarks
Bibliographic Remarks
Axis Aligned Rectangles
The Fundamental Theorem of PAC learning
Sauer’s Lemma and the Growth Function
Uniform Convergence for Classes of Small Eﬀective Size
Bibliographic remarks
Nonuniform Learnability
Nonuniform Learnability
Characterizing Nonuniform Learnability
Structural Risk Minimization
Minimum Description Length and Occam’s Razor
Other Notions of Learnability – Consistency
Discussing the Diﬀerent Notions of Learnability
Bibliographic Remarks
The Runtime of Learning
Computational Complexity of Learning
Implementing the ERM Rule
Axis Aligned Rectangles
Boolean Conjunctions
Eﬃciently Learnable, but Not by a Proper ERM
Bibliographic Remarks
From Theory to Algorithms
Linear Programming for the Class of Halfspaces
Perceptron for Halfspaces
The VC Dimension of Halfspaces
Linear Regression for Polynomial Regression Tasks
Bibliographic Remarks
Eﬃcient Implementation of ERM for Decision Stumps
Linear Combinations of Base Hypotheses
AdaBoost for Face Recognition
Bibliographic Remarks
Model Selection and Validation
Model Selection Using SRM
Validation for Model Selection
What to Do If Learning Fails
Convex Learning Problems
Convexity, Lipschitzness, and Smoothness
Convex Learning Problems
Learnability of Convex Learning Problems
Surrogate Loss Functions
Bibliographic Remarks
Regularization and Stability
Regularized Loss Minimization
Stable Rules Do Not Overﬁt
Tikhonov Regularization as a Stabilizer
Smooth and Nonnegative Loss
Bibliographic Remarks
Stochastic Gradient Descent
Calculating Subgradients
Subgradients of Lipschitz Functions
Stochastic Gradient Descent (SGD)
Adding a Projection Step
Other Averaging Techniques
SGD for Risk Minimization
SGD for Regularized Loss Minimization
Bibliographic Remarks
Support Vector Machines
Optimality Conditions and “Support Vectors”*
Bibliographic Remarks
Embeddings into Feature Spaces
Kernels as a Way to Express Prior Knowledge
Bibliographic Remarks
Multiclass, Ranking, and Complex Prediction Problems
Linear Multiclass Predictors
Generalized Hinge Loss
Multiclass SVM and SGD
Structured Output Prediction
Linear Predictors for Ranking
Bipartite Ranking and Multivariate Performance Measures
Linear Predictors for Bipartite Ranking
Bibliographic Remarks
Decision Tree Algorithms
Implementations of the Gain Measure
Bibliographic Remarks
The “Curse of Dimensionality”
Bibliographic Remarks
Feedforward Neural Networks
Learning Neural Networks
The Expressive Power of Neural Networks
The Sample Complexity of Neural Networks
The Runtime of Learning Neural Networks
SGD and Backpropagation
Bibliographic Remarks
Additional Learning Models
Online Classiﬁcation in the Realizable Case
Online Classiﬁcation in the Unrealizable Case
Online Convex Optimization
The Online Perceptron Algorithm
Bibliographic Remarks
Graph Laplacian and Relaxed Graph Cuts
Unnormalized Spectral Clustering
A High Level View of Clustering
Bibliographic Remarks
Dimensionality Reduction
Principal Component Analysis (PCA)
A More Eﬃcient Solution for the Case d ≫m
Implementation and Demonstration
PCA or Compressed Sensing?
Bibliographic Remarks
Maximum Likelihood Estimator
Maximum Likelihood and Empirical Risk Minimization
Generalization Analysis
Linear Discriminant Analysis
Latent Variables and the EM Algorithm
EM as an Alternate Maximization Algorithm
Bibliographic Remarks
Feature Selection and Generation
Greedy Selection Approaches
Feature Manipulation and Normalization
Examples of Feature Transformations
Bibliographic Remarks
Rademacher Complexities
The Rademacher Complexity
Rademacher Complexity of Linear Classes
Generalization Bounds for SVM
Generalization Bounds for Predictors with Low ℓ1 Norm
Bibliographic Remarks
From Covering to Rademacher Complexity via Chaining
Bibliographic Remarks
Proof of the Fundamental Theorem of Learning Theory
The Upper Bound for the Agnostic Case
The Lower Bound for the Agnostic Case
The Upper Bound for the Realizable Case
Multiclass Learnability
The Natarajan Dimension
The Multiclass Fundamental Theorem
Calculating the Natarajan Dimension
Linear Multiclass Predictors
On Good and Bad ERMs
Bibliographic Remarks
Axis Aligned Rectangles
Separating Polynomials
Separation with Margin
Bibliographic Remarks
Bibliographic Remarks
Measure Concentration
The subject of this book is automated learning, or, as we will more often call
it, Machine Learning (ML). That is, we wish to program computers so that
they can “learn” from input available to them. Roughly speaking, learning is
the process of converting experience into expertise or knowledge. The input to
a learning algorithm is training data, representing experience, and the output
is some expertise, which usually takes the form of another computer program
this concept, we’ll have to be more explicit about what we mean by each of the
involved terms: What is the training data our programs will access? How can
the process of learning be automated? How can we evaluate the success of such
a process (namely, the quality of the output of a learning program)?
mal learning. Some of the most fundamental issues in ML arise already in that
context, which we are all familiar with.
Bait Shyness – Rats Learning to Avoid Poisonous Baits: When rats encounter
food items with novel look or smell, they will ﬁrst eat very small amounts, and
subsequent feeding will depend on the ﬂavor of the food and its physiological
eﬀect. If the food produces an ill eﬀect, the novel food will often be associated
with the illness, and subsequently, the rats will not eat it. Clearly, there is a
learning mechanism in play here – the animal used past experience with some
food to acquire expertise in detecting the safety of this food. If past experience
with the food was negatively labeled, the animal predicts that it will also have
a negative eﬀect when encountered in the future.
Inspired by the preceding example of successful learning, let us demonstrate a
typical machine learning task. Suppose we would like to program a machine that
to the way rats learn how to avoid poisonous baits. The machine will simply
Personal use only. Not for distribution. Do not post.
it will be moved to the user’s inbox folder.
ful, it lacks an important aspect of learning systems – the ability to label unseen
examples to broader generalization. This is also referred to as inductive reasoning
or inductive inference. In the bait shyness example presented previously, after
the rats encounter an example of a certain type of food, they apply their attitude
toward it on new, unseen examples of food of similar smell and taste. To achieve
generalization in the spam ﬁltering task, the learner can scan the previously seen
ingly. Such a system would potentially be able correctly to predict the label of
However, inductive reasoning might lead us to false conclusions. To illustrate
this, let us consider again an example from animal learning.
Pigeon Superstition: In an experiment performed by the psychologist B. F. Skinner,
he placed a bunch of hungry pigeons in a cage. An automatic mechanism had
been attached to the cage, delivering food to the pigeons at regular intervals
with no reference whatsoever to the birds’ behavior. The hungry pigeons went
around the cage, and when food was ﬁrst delivered, it found each pigeon engaged
in some activity (pecking, turning the head, etc.). The arrival of food reinforced
each bird’s speciﬁc action, and consequently, each bird tended to spend some
more time doing that very same action. That, in turn, increased the chance that
the next random food delivery would ﬁnd each bird engaged in that activity
again. What results is a chain of events that reinforces the pigeons’ association
ing when it was ﬁrst delivered. They subsequently continue to perform these
What distinguishes learning mechanisms that result in superstition from useful
learning? This question is crucial to the development of automated learners.
While human learners can rely on common sense to ﬁlter out random meaningless
learning conclusions, once we export the task of learning to a machine, we must
provide well deﬁned crisp principles that will protect the program from reaching
senseless or useless conclusions. The development of such principles is a central
goal of the theory of machine learning.
What, then, made the rats’ learning more successful than that of the pigeons?
As a ﬁrst step toward answering this question, let us have a closer look at the
bait shyness phenomenon in rats.
Bait Shyness revisited – rats fail to acquire conditioning between food and
electric shock or between sound and nausea: The bait shyness mechanism in
rats turns out to be more complex than what one may expect. In experiments
unpleasant stimulus that follows food consumption is replaced by, say, electrical
shock (rather than nausea), then no conditioning occurs. Even after repeated
trials in which the consumption of some food is followed by the administration of
unpleasant electrical shock, the rats do not tend to avoid that food. Similar failure
of conditioning occurs when the characteristic of the food that implies nausea
(such as taste or smell) is replaced by a vocal signal. The rats seem to have
some “built in” prior knowledge telling them that, while temporal correlation
between food and nausea can be causal, it is unlikely that there would be a
causal relationship between food consumption and electrical shocks or between
We conclude that one distinguishing feature between the bait shyness learning
and the pigeon superstition is the incorporation of prior knowledge that biases
the learning mechanism. This is also referred to as inductive bias. The pigeons in
the experiment are willing to adopt any explanation for the occurrence of food.
However, the rats “know” that food cannot cause an electric shock and that the
of that food. The rats’ learning process is biased toward detecting some kind of
patterns while ignoring other temporal correlations between events.
It turns out that the incorporation of prior knowledge, biasing the learning
process, is inevitable for the success of learning algorithms (this is formally stated
tools for expressing domain expertise, translating it into a learning bias, and
quantifying the eﬀect of such a bias on the success of learning is a central theme
of the theory of machine learning. Roughly speaking, the stronger the prior
knowledge (or prior assumptions) that one starts the learning process with, the
easier it is to learn from further examples. However, the stronger these prior
assumptions are, the less ﬂexible the learning is – it is bound, a priori, by the
commitment to these assumptions. We shall discuss these issues explicitly in
When Do We Need Machine Learning?
When do we need machine learning rather than directly program our computers
to carry out the task at hand? Two aspects of a given problem may call for the
use of programs that learn and improve on the basis of their “experience”: the
problem’s complexity and the need for adaptivity.
Tasks That Are Too Complex to Program.
ing how we do them is not suﬃciently elaborate to extract a well
deﬁned program. Examples of such tasks include driving, speech
recognition, and image understanding. In all of these tasks, state
of the art machine learning programs, programs that “learn from
their experience,” achieve quite satisfactory results, once exposed
to suﬃciently many training examples.
• Tasks beyond Human Capabilities: Another wide family of tasks that
sis of very large and complex data sets: astronomical data, turning
ysis of genomic data, Web search engines, and electronic commerce.
With more and more available digitally recorded data, it becomes
obvious that there are treasures of meaningful information buried
in data archives that are way too large and too complex for humans
to make sense of. Learning to detect meaningful patterns in large
nation of programs that learn with the almost unlimited memory
capacity and ever increasing processing speed of computers opens
Adaptivity. One limiting feature of programmed tools is their rigidity – once
the program has been written down and installed, it stays unchanged.
However, many tasks change over time or from one user to another.
Machine learning tools – programs whose behavior adapts to their input
data – oﬀer a solution to such issues; they are, by nature, adaptive
to changes in the environment they interact with. Typical successful
applications of machine learning to such problems include programs that
decode handwritten text, where a ﬁxed program can adapt to variations
between the handwriting of diﬀerent users; spam detection programs,
speech recognition programs.
Learning is, of course, a very wide domain. Consequently, the ﬁeld of machine
ing tasks. We give a rough taxonomy of learning paradigms, aiming to provide
some perspective of where the content of this book sits within the wide ﬁeld of
We describe four parameters along which learning paradigms can be classiﬁed.
tween the learner and the environment, one can divide learning tasks
according to the nature of that interaction. The ﬁrst distinction to note
is the diﬀerence between supervised and unsupervised learning. As an
versus the task of anomaly detection. For the spam detection task, we
sage. In contrast, for the task of anomaly detection, all the learner gets
learner’s task is to detect “unusual” messages.
More abstractly, viewing learning as a process of “using experience
to gain expertise,” supervised learning describes a scenario in which the
“experience,” a training example, contains signiﬁcant information (say,
quired expertise is aimed to predict that missing information for the test
data. In such cases, we can think of the environment as a teacher that
“supervises” the learner by providing the extra information (labels). In
unsupervised learning, however, there is no distinction between training
and test data. The learner processes input data with the goal of coming
up with some summary, or compressed version of that data. Clustering
a data set into subsets of similar objets is a typical example of such a
There is also an intermediate learning setting in which, while the
training examples contain more information than the test examples, the
ples. For example, one may try to learn a value function that describes for
ter than the Black’s. Yet, the only information available to the learner at
training time is positions that occurred throughout actual chess games,
labeled by who eventually won that game. Such learning frameworks are
mainly investigated under the title of reinforcement learning.
Active versus Passive Learners Learning paradigms can vary by the role
played by the learner. We distinguish between “active” and “passive”
learners. An active learner interacts with the environment at training
time, say, by posing queries or performing experiments, while a passive
learner only observes the information provided by the environment (or
the teacher) without inﬂuencing or directing it. Note that the learner of a
ing to them. In an active setting, one could imagine asking users to label
Helpfulness of the Teacher When one thinks about human learning, of a
baby at home or a student at school, the process often involves a helpful
ful for achieving the learning goal. In contrast, when a scientist learns
about nature, the environment, playing the role of the teacher, can be
best thought of as passive – apples drop, stars shine, and the rain falls
narios by postulating that the training data (or the learner’s experience)
is generated by some random process. This is the basic building block in
the branch of “statistical learning.” Finally, learning also occurs when
the learner’s input is generated by an adversarial “teacher.” This may be
the case in the spam ﬁltering example (if the spammer makes an eﬀort
to mislead the spam ﬁltering designer) or in learning to detect fraud.
when no milder setup can be safely assumed. If you can learn against an
adversarial teacher, you are guaranteed to succeed interacting any odd
Online versus Batch Learning Protocol The last parameter we mention is
the distinction between situations in which the learner has to respond
online, throughout the learning process, and settings in which the learner
has to engage the acquired expertise only after having a chance to process
large amounts of data. For example, a stockbroker has to make daily
decisions, based on the experience collected so far. He may become an
expert over time, but might have made costly mistakes in the process. In
contrast, in many data mining settings, the learner – the data miner –
has large amounts of training data to play with before having to output
In this book we shall discuss only a subset of the possible learning paradigms.
Our main focus is on supervised statistical batch learning with a passive learner
(for example, trying to learn how to generate patients’ prognoses, based on large
archives of records of patients that were independently collected and are already
labeled by the fate of the recorded patients). We shall also brieﬂy discuss online
learning and batch unsupervised learning (in particular, clustering).
Relations to Other Fields
As an interdisciplinary ﬁeld, machine learning shares common threads with the
tion. It is naturally a subﬁeld of computer science, as our goal is to program
machines so that they will learn. In a sense, machine learning can be viewed as
rience into expertise or to detect meaningful patterns in complex sensory data
is a cornerstone of human (and animal) intelligence. However, one should note
that, in contrast with traditional AI, machine learning is not trying to build
automated imitation of intelligent behavior, but rather to use the strengths and
ing tasks that fall way beyond human capabilities. For example, the ability to
scan and process huge databases allows machine learning programs to detect
patterns that are outside the scope of human perception.
The component of experience, or training, in machine learning often refers
to data that is randomly generated. The task of the learner is to process such
vironment from which these examples are picked. This description of machine
learning highlights its close relationship with statistics. Indeed there is a lot in
common between the two disciplines, in terms of both the goals and techniques
used. There are, however, a few signiﬁcant diﬀerences of emphasis; if a doctor
comes up with the hypothesis that there is a correlation between smoking and
heart disease, it is the statistician’s role to view samples of patients and check
sis testing). In contrast, machine learning aims to use the data gathered from
samples of patients to come up with a description of the causes of heart disease.
The hope is that automated techniques may be able to ﬁgure out meaningful
patterns (or hypotheses) that may have been missed by the human observer.
In contrast with traditional statistics, in machine learning in general, and
mic issues are pivotal. We develop algorithms to perform the learning tasks and
are concerned with their computational eﬃciency. Another diﬀerence is that
while statistics is often interested in asymptotic behavior (like the convergence
theory of machine learning focuses on ﬁnite sample bounds. Namely, given the
size of available samples, machine learning theory aims to ﬁgure out the degree
of accuracy that a learner can expect on the basis of such samples.
There are further diﬀerences between these two disciplines, of which we shall
mention only one more here. While in statistics it is common to work under the
ting, where the learner assumes as little as possible about the nature of the
data distribution and allows the learning algorithm to ﬁgure out which models
requires some technical preliminaries, and we will come back to it later in the
How to Read This Book
The ﬁrst part of the book provides the basic theoretical principles that underlie
machine learning (ML). In a sense, this is the foundation upon which the rest
of the book is built. This part could serve as a basis for a minicourse on the
theoretical foundations of ML.
The second part of the book introduces the most commonly used algorithmic
approaches to supervised machine learning. A subset of these chapters may also
be used for introducing machine learning in a general AI course to computer
science, Math, or engineering students.
The third part of the book extends the scope of discussion from statistical
classiﬁcation to other learning models. It covers online learning, unsupervised
learning, dimensionality reduction, generative models, and feature learning.
The fourth part of the book, Advanced Theory, is geared toward readers who
niques that serve to analyze and drive forward the ﬁeld of theoretical machine
The Appendixes provide some technical tools used in the book. In particular,
we list basic results from measure concentration and linear algebra.
A few sections are marked by an asterisk, which means they are addressed to
more advanced students. Each chapter is concluded with a list of exercises. A
solution manual is provided in the course Web site.
Possible Course Plans Based on This Book
Most of the notation we use throughout the book is either standard or deﬁned
on the spot. In this section we describe our main conventions and provide a
this section and return to it if during the reading of the book some notation is
Often, we would like to emphasize that some object is a vector and then we
by xi. We use uppercase letters to denote matrices, sets, and sequences. The
meaning should be clear from the context. As we will see momentarily, the input
of a learning algorithm is a sequence of training examples. We denote by z an
abstract example and by S = z1, . . . , zm a sequence of m examples. Historically,
S is often referred to as a training set; however, we will always assume that S is
a sequence rather than a set. A sequence of m vectors is denoted by x1, . . . , xm.
The ith element of xt is denoted by xt,i.
Throughout the book, we make use of basic notions from probability. We
z ∼D to denote that z is sampled according to D. Given a random variable
{true, false} we also use Pz∼D[f(z)] to denote D({z : f(z) = true}). In the
next chapter we will also introduce the notation Dm to denote the probability
over Zm induced by sampling (z1, . . . , zm) where each point zi is sampled from
D independently of the other points.
In general, we have made an eﬀort to avoid asymptotic notation. However, we
The user who is not familiar with measure theory can skip the few footnotes and remarks
regarding more formal measurability deﬁnitions and assumptions.
the set of real numbers
the set of natural numbers
asymptotic notation (see text)
the ith element of a vector
⟨x, x⟩(the ℓ2 norm of x)
= maxi |xi| (the ℓ∞norm of x)
the number of nonzero elements of x
a d × k matrix over R
the (i, j) element of A
a sequence of m vectors
the jth element of the ith vector in the sequence
the values of a vector w during an iterative algorithm
the ith element of the vector w(t)
instances domain (a set)
labels domain (a set)
examples domain (a set)
hypothesis class (a set)
a distribution over some set (usually over Z or over X)
sampling z according to D
a sequence of m examples
sampling S = z1, . . . , zm i.i.d. according to D
probability and expectation of a random variable
Gaussian distribution with expectation µ and covariance C
the natural logarithm
x0 such that for all x > x0 we have f(x) ≤αg(x). We write f = Ω(g) if there
f = ω(g) is deﬁned analogously. The notation f = Θ(g) means that f = O(g)
such that f(x) = O(g(x) logk(g(x))).
The inner product between vectors x and w is denoted by ⟨x, w⟩. Whenever we
space and then ⟨x, w⟩= Pd
⟨w, w⟩. We omit the subscript from the ℓ2 norm when it is clear from
the context. We also use other ℓp norms, ∥w∥p = (P
i |wi| and ∥w∥∞= maxi |wi|.
whenever the minimum is not achievable. However, in the context of this book
the distinction between inﬁmum and minimum is often of little interest. Hence,
to simplify the presentation, we sometimes use the min notation even when inf
is more adequate. An analogous remark applies to max versus sup.
Let us begin our mathematical analysis by showing how successful learning can be
achieved in a relatively simpliﬁed setting. Imagine you have just arrived in some
small Paciﬁc island. You soon ﬁnd out that papayas are a signiﬁcant ingredient
in the local diet. However, you have never before tasted papayas. You have to
learn how to predict whether a papaya you see in the market is tasty or not.
First, you need to decide which features of a papaya your prediction should be
based on. On the basis of your previous experience with other fruits, you decide
to use two features: the papaya’s color, ranging from dark green, through orange
and red to dark brown, and the papaya’s softness, ranging from rock hard to
mushy. Your input for ﬁguring out your prediction rule is a sample of papayas
that you have examined for color and softness and then tasted and found out
whether they were tasty or not. Let us analyze this task as a demonstration of
the considerations involved in learning problems.
Our ﬁrst step is to describe a formal model aimed to capture such learning
A Formal Model – The Statistical Learning Framework
• The learner’s input: In the basic statistical learning setting, the learner has
access to the following:
– Domain set: An arbitrary set, X. This is the set of objects that we
tioned before, the domain set will be the set of all papayas. Usually,
these domain points will be represented by a vector of features (like
the papaya’s color and softness). We also refer to domain points as
instances and to X as instance space.
– Label set: For our current discussion, we will restrict the label set to
– Training data: S = ((x1, y1) . . . (xm, ym)) is a ﬁnite sequence of pairs in
X ×Y: that is, a sequence of labeled domain points. This is the input
that the learner has access to (like a set of papayas that have been
Personal use only. Not for distribution. Do not post.
tasted and their color, softness, and tastiness). Such labeled examples
are often called training examples. We sometimes also refer to S as a
• The learner’s output: The learner is requested to output a prediction rule,
siﬁer. The predictor can be used to predict the label of new domain points.
In our papayas example, it is a rule that our learner will employ to predict
whether future papayas he examines in the farmers’ market are going to
be tasty or not. We use the notation A(S) to denote the hypothesis that a
learning algorithm, A, returns upon receiving the training sequence S.
generated. First, we assume that the instances (the papayas we encounter)
are generated by some probability distribution (in this case, representing
the environment). Let us denote that probability distribution over X by
D. It is important to note that we do not assume that the learner knows
anything about this distribution. For the type of learning tasks we discuss,
this could be any arbitrary probability distribution. As to the labels, in the
current discussion we assume that there is some “correct” labeling function,
the next chapter. The labeling function is unknown to the learner. In fact,
this is just what the learner is trying to ﬁgure out. In summary, each pair
in the training data S is generated by ﬁrst sampling a point xi according
to D and then labeling it by f.
• Measures of success: We deﬁne the error of a classiﬁer to be the probability
that it does not predict the correct label on a random data point generated
by the aforementioned underlying distribution. That is, the error of h is
the probability to draw a random instance x, according to the distribution
D, such that h(x) does not equal f(x).
D, assigns a number, D(A), which determines how likely it is to observe a
we also use the notation Px∼D[π(x)] to express D(A).
= D({x : h(x) ̸= f(x)}).
That is, the error of such h is the probability of randomly choosing an
example x for which h(x) ̸= f(x). The subscript (D, f) indicates that the
error is measured with respect to the probability distribution D and the
twice in S and some algorithms can take into account the order of examples in S.
σ-algebra of subsets of X, over which D is deﬁned. We will formally deﬁne our
measurability assumptions in the next chapter.
correct labeling function f. We omit this subscript when it is clear from
ization error, the risk, or the true error of h, and we will use these names
interchangeably throughout the book. We use the letter L for the error,
since we view this error as the loss of the learner. We will later also discuss
other possible formulations of such loss.
• A note about the information available to the learner The learner is
blind to the underlying distribution D over the world and to the labeling
function f. In our papayas example, we have just arrived in a new island
and we have no clue as to how papayas are distributed and how to predict
their tastiness. The only way the learner can interact with the environment
is through observing the training set.
In the next section we describe a simple learning paradigm for the preceding
setup and analyze its performance.
Empirical Risk Minimization
As mentioned earlier, a learning algorithm receives as input a training set S,
sampled from an unknown distribution D and labeled by some target function
fact that the output predictor depends on S). The goal of the algorithm is to
ﬁnd hS that minimizes the error with respect to the unknown D and f.
Since the learner does not know what D and f are, the true error is not directly
available to the learner. A useful notion of error that can be calculated by the
learner is the training error – the error the classiﬁer incurs over the training
The terms empirical error and empirical risk are often used interchangeably
Since the training sample is the snapshot of the world that is available to the
learner, it makes sense to search for a solution that works well on that data.
This learning paradigm – coming up with a predictor h that minimizes LS(h) –
is called Empirical Risk Minimization or ERM for short.
Something May Go Wrong – Overﬁtting
Although the ERM rule seems very natural, without being careful, this approach
To demonstrate such a failure, let us go back to the problem of learning to
predict the taste of a papaya on the basis of its softness and color. Consider a
sample as depicted in the following:
Assume that the probability distribution D is such that instances are distributed
uniformly within the gray square and the labeling function, f, determines the
Consider the following predictor:
representation of it using polynomials. Clearly, no matter what the sample is,
error). On the other hand, the true error of any classiﬁer that predicts the label
We have found a predictor whose performance on the training set is excellent,
yet its performance on the true “world” is very poor. This phenomenon is called
overﬁtting. Intuitively, overﬁtting occurs when our hypothesis ﬁts the training
data “too well” (perhaps like the everyday experience that a person who provides
a perfect detailed explanation for each of his single actions may raise suspicion).
Empirical Risk Minimization with Inductive Bias
We have just demonstrated that the ERM rule might lead to overﬁtting. Rather
than giving up on the ERM paradigm, we will look for ways to rectify it. We will
search for conditions under which there is a guarantee that ERM does not overﬁt,
namely, conditions under which when the ERM predictor has good performance
with respect to the training data, it is also highly likely to perform well over the
underlying data distribution.
A common solution is to apply the ERM learning rule over a restricted search
space. Formally, the learner should choose in advance (before seeing the data) a
set of predictors. This set is called a hypothesis class and is denoted by H. Each
with the lowest possible error over S. Formally,
where argmin stands for the set of hypotheses in H that achieve the minimum
value of LS(h) over H. By restricting the learner to choosing a predictor from
H, we bias it toward a particular set of predictors. Such restrictions are often
called an inductive bias. Since the choice of such a restriction is determined
before the learner sees the training data, it should ideally be based on some
prior knowledge about the problem to be learned. For example, for the papaya
taste prediction problem we may choose the class H to be the set of predictors
that are determined by axis aligned rectangles (in the space determined by the
color and softness coordinates). We will later show that ERMH over this class is
guaranteed not to overﬁt. On the other hand, the example of overﬁtting that we
have seen previously, demonstrates that choosing H to be a class of predictors
does not suﬃce to guarantee that ERMH will not overﬁt.
A fundamental question in learning theory is, over which hypothesis classes
ERMH learning will not result in overﬁtting. We will study this question later
Intuitively, choosing a more restricted hypothesis class better protects us
against overﬁtting but at the same time might cause us a stronger inductive
bias. We will get back to this fundamental tradeoﬀlater.
Finite Hypothesis Classes
The simplest type of restriction on a class is imposing an upper bound on its size
(that is, the number of predictors h in H). In this section, we show that if H is
a ﬁnite class then ERMH will not overﬁt, provided it is based on a suﬃciently
large training sample (this size requirement will depend on the size of H).
Limiting the learner to prediction rules within some ﬁnite hypothesis class may
be considered as a reasonably mild restriction. For example, H can be the set of
the hypothesis class becomes a ﬁnite class.
Let us now analyze the performance of the ERMH learning rule assuming that
let hS denote a result of applying ERMH to S, namely,
In this chapter, we make the following simplifying assumption (which will be
relaxed in the next chapter).
There exists h⋆∈H s.t.
random samples, S, where the instances of S are sampled according to D and
The realizability assumption implies that for every ERM hypothesis we have
rather than its empirical risk.
Clearly, any guarantee on the error with respect to the underlying distribution,
D, for an algorithm that has access only to a sample S should depend on the
relationship between D and S. The common assumption in statistical machine
learning is that the training sample S is generated by sampling points from the
distribution D independently of each other. Formally,
• The i.i.d. assumption: The examples in the training set are independently
and identically distributed (i.i.d.) according to the distribution D. That is,
every xi in S is freshly sampled according to D and then labeled according
to the labeling function, f. We denote this assumption by S ∼Dm where
by applying D to pick each element of the tuple independently of the other
members of the tuple.
Intuitively, the training set S is a window through which the learner
gets partial information about the distribution D over the world and the
labeling function, f. The larger the sample gets, the more likely it is to
reﬂect more accurately the distribution and labeling used to generate it.
Since L(D,f)(hS) depends on the training set, S, and that training set is picked
by a random process, there is randomness in the choice of the predictor hS
and, consequently, in the risk L(D,f)(hS). Formally, we say that it is a random
variable. It is not realistic to expect that with full certainty S will suﬃce to
direct the learner toward a good classiﬁer (from the point of view of D), as
there is always some probability that the sampled training data happens to
be very nonrepresentative of the underlying D. If we go back to the papaya
tasting example, there is always some (small) chance that all the papayas we
papayas in our island are tasty. In such a case, ERMH(S) may be the constant
distribution of papapyas in the island). We will therefore address the probability
to sample a training set for which L(D,f)(hS) is not too large. Usually, we denote
conﬁdence parameter of our prediction.
duce another parameter for the quality of prediction, the accuracy parameter,
stances that will lead to failure of the learner. Formally, let S|x = (x1, . . . , xm)
be the instances of the training set. We would like to upper bound
Let HB be the set of “bad” hypotheses, that is,
other words, this event will only happen if our sample is in the set of misleading
samples, M. Formally, we have shown that
Note that we can rewrite M as
union bound – a basic property of probabilities.
For any two sets A, B and a distribution D we
D({xi : h(xi) = f(xi)}).
For each individual sampling of an element of the training set we have
A graphical illustration which explains how we used the union bound is given in
is, the smaller each of these colored ovals becomes. The union bound formalizes the
fact that the area representing the training sets that are misleading with respect to
colored ovals. Therefore, it is bounded by |HB| times the maximum size of a colored
oval. Any sample S outside the colored ovals cannot cause the ERM rule to overﬁt.
and let m be an integer that satisﬁes
Then, for any labeling function, f, and for any distribution, D, for which the
have that for every ERM hypothesis, hS, it holds that
The preceeding corollary tells us that for a suﬃciently large m, the ERMH rule
of Probably Approximately Correct (PAC) learning.
be very unnatural, the goal of this exercise is to show that it can be described
as a thresholded polynomial. That is, show that given a training set S =
It follows that learning the class of all thresholded polynomials using the ERM
rule may lead to overﬁtting.
Show that the expected value of LS(h) over the choice of S|x equals L(D,f)(h),
S|x∼Dm[LS(h)] = L(D,f)(h).
classiﬁer h(a1,b1,a2,b2) by
h(a1,b1,a2,b2)(x1, x2) =
The class of all axis aligned rectangles in the plane is deﬁned as
Note that this is an inﬁnite size hypothesis class. Throughout this exercise we
rely on the realizability assumption.
positive examples in the training set. Show that A is an ERM.
Hint: Fix some distribution D over X, let R∗= R(a∗
angle that generates the labels, and let f be the corresponding hypothesis.
to D) of the rectangle R1 = R(a∗
b1, a2, b2 be numbers such that the probability masses of the rectangles
• Show that R(S) ⊆R∗.
• Show that if S contains (positive) examples in all of the rectangles
R1, R2, R3, R4, then the hypothesis returned by A has error of at
contain an example from Ri.
• Use the union bound to conclude the argument.
A Formal Learning Model
In this chapter we deﬁne our main formal learning model – the PAC learning
In the previous chapter we have shown that for a ﬁnite hypothesis class, if the
ERM rule with respect to that class is applied on a suﬃciently large training
sample (whose size is independent of the underlying distribution or labeling
function) then the output hypothesis will be probably approximately correct.
More generally, we now deﬁne Probably Approximately Correct (PAC) learning.
A hypothesis class H is PAC learnable
The deﬁnition of Probably Approximately Correct learnability contains two
siﬁer is to meet that accuracy requirement (corresponds to the “probably” part
proximations are inevitable. Since the training set is randomly generated, there
ample, there is always some chance that the training set will contain only one
domain point, sampled over and over again). Furthermore, even when we are
lucky enough to get a training sample that does faithfully represent D, because
it is just a ﬁnite sample, there may always be some ﬁne details of D that it fails
Personal use only. Not for distribution. Do not post.
A Formal Learning Model
for making minor errors.
that is, how many examples are required to guarantee a probably approximately
H – for example, for a ﬁnite class we showed that the sample complexity depends
on log the size of H.
Note that if H is PAC learnable, there are many functions mH that satisfy the
requirements given in the deﬁnition of PAC learnability. Therefore, to be precise,
we will deﬁne the sample complexity of learning H to be the “minimal function,”
Let us now recall the conclusion of the analysis of ﬁnite hypothesis classes
from the previous chapter. It can be rephrased as stating:
Every ﬁnite hypothesis class is PAC learnable with sample
a class is not its ﬁniteness but rather a combinatorial measure called the VC
A More General Learning Model
The model we have just described can be readily generalized, so that it can be
made relevant to a wider scope of learning tasks. We consider generalizations in
Removing the Realizability Assumption
bution D and labeling function f provided that the realizability assumption is
met. For practical learning tasks, this assumption may be too strong (can we
determines which papayas are tasty?). In the next subsection, we will describe
the agnostic PAC model in which this realizability assumption is waived.
Learning Problems beyond Binary Classiﬁcation
The learning task that we have been discussing so far has to do with predicting a
binary label to a given example (like being tasty or not). However, many learning
tasks take a diﬀerent form. For example, one may wish to predict a real valued
a ﬁnite set of labels (like the topic of the main story in tomorrow’s paper). It
turns out that our analysis of learning can be readily extended to such and many
other scenarios by allowing a variety of loss functions. We shall discuss that in
Releasing the Realizability Assumption – Agnostic PAC Learning
Recall that the realizability assumption requires that there exists h⋆∈H such
not hold. Furthermore, it is maybe more realistic not to assume that the labels
are fully determined by the features we measure on input elements (in the case of
the papayas, it is plausible that two papayas of the same color and softness will
have diﬀerent taste). In the following, we relax the realizability assumption by
generating distribution.
Formally, from now on, let D be a probability distribution over X × Y, where,
as before, X is our domain set and Y is a set of labels (usually we will consider
can view such a distribution as being composed of two parts: a distribution Dx
over unlabeled domain points (sometimes called the marginal distribution) and
a conditional probability over labels for each domain point, D((x, y)|x). In the
papaya example, Dx determines the probability of encountering a papaya whose
probability is the probability that a papaya with color and hardness represented
by x is tasty. Indeed, such modeling allows for two papayas that share the same
color and hardness to belong to diﬀerent taste categories.
The empirical and the True Error Revised
For a probability distribution, D, over X × Y, one can measure how likely h is
to make an error when labeled points are randomly drawn according to D. We
redeﬁne the true error (or risk) of a prediction rule h to be
= D({(x, y) : h(x) ̸= y}).
We would like to ﬁnd a predictor, h, for which that error will be minimized.
However, the learner does not know the data generating D. What the learner
does have access to is the training data, S. The deﬁnition of the empirical risk
A Formal Learning Model
remains the same as before, namely,
that LS(h) = LD(uniform over S)(h).
minimizes the true risk, LD(h).
The Bayes Optimal Predictor.
the Bayes optimal predictor fD is optimal, in the sense that no other classiﬁer,
Unfortunately, since we do not know D, we cannot utilize this optimal predictor
fD. What the learner does have access to is the training sample. We can now
present the formal deﬁnition of agnostic PAC learnability, which is a natural
extension of the deﬁnition of PAC learnability to the more realistic, nonrealizable,
learning setup we have just discussed.
Clearly, we cannot hope that the learning algorithm will ﬁnd a hypothesis
Furthermore, as we shall prove later, once we make no prior assumptions
a predictor that is as good as the Bayes optimal one. Instead, we require that
the learning algorithm will ﬁnd a predictor whose error is not much larger than
the best possible error of a predictor in some given benchmark hypothesis class.
Of course, the strength of such a requirement depends on the choice of that
A hypothesis class H is agnostic
generated by D, the algorithm returns a hypothesis h such that, with probability
Clearly, if the realizability assumption holds, agnostic PAC learning provides
alizes the deﬁnition of PAC learning. When the realizability assumption does not
hold, no learner can guarantee an arbitrarily small error. Nevertheless, under the
deﬁnition of agnostic PAC learning, a learner can still declare success if its error
is not much larger than the best error achievable by a predictor from the class H.
This is in contrast to PAC learning, in which the learner is required to achieve
a small error in absolute terms and not relative to the best error achievable by
the hypothesis class.
The Scope of Learning Problems Modeled
We next extend our model so that it can be applied to a wide variety of learning
tasks. Let us consider some examples of diﬀerent learning tasks.
Multiclass Classiﬁcation Our classiﬁcation does not have to be binary.
Take, for example, the task of document classiﬁcation: We wish to design a
program that will be able to classify given documents according to topics
(e.g., news, sports, biology, medicine). A learning algorithm for such a task
will have access to examples of correctly classiﬁed documents and, on the
basis of these examples, should output a program that can take as input a
new document and output a topic classiﬁcation for that document. Here,
the domain set is the set of all potential documents. Once again, we would
usually represent documents by a set of features that could include counts
of diﬀerent key words in the document, as well as other possibly relevant
features like the size of the document or its origin. The label set in this task
will be the set of possible document topics (so Y will be some large ﬁnite
set). Once we determine our domain and label sets, the other components
of our framework look exactly the same as in the papaya tasting example;
Our training sample will be a ﬁnite sequence of (feature vector, label) pairs,
the learner’s output will be a function from the domain set to the label set,
and, ﬁnally, for our measure of success, we can use the probability, over
(document, topic) pairs, of the event that our predictor suggests a wrong
• Regression In this task, one wishes to ﬁnd some simple pattern in the data –
a functional relationship between the X and Y components of the data. For
example, one wishes to ﬁnd a linear function that best predicts a baby’s
birth weight on the basis of ultrasound measures of his head circumference,
abdominal circumference, and femur length. Here, our domain set X is some
subset of R3 (the three ultrasound measurements), and the set of “labels,”
Y, is the the set of real numbers (the weight in grams). In this context,
it is more adequate to call Y the target set. Our training data as well as
the learner’s output are as before (a ﬁnite sequence of (x, y) pairs, and
a function from X to Y respectively). However, our measure of success is
A Formal Learning Model
by the expected square diﬀerence between the true labels and their predicted
To accommodate a wide range of learning tasks we generalize our formalism
of the measure of success as follows:
Generalized Loss Functions
Given any set H (that plays the role of our hypotheses, or models) and some
domain Z let ℓbe any function from H×Z to the set of nonnegative real numbers,
We call such functions loss functions.
Note that for prediction problems, we have that Z = X × Y. However, our
notion of the loss function is generalized beyond prediction tasks, and therefore
it allows Z to be any domain of examples (for instance, in unsupervised learning
domain and a label domain).
with respect to a probability distribution D over Z, namely,
domly according to D. Similarly, we deﬁne the empirical risk to be the expected
loss over a given sample S = (z1, . . . , zm) ∈Zm, namely,
sion tasks are as follows:
the loss function is
This loss function is used in binary or multiclass classiﬁcation problems.
• Square Loss: Here, our random variable z ranges over the set of pairs X ×Y
and the loss function is
This loss function is used in regression problems.
We will later see more examples of useful instantiations of loss functions.
To summarize, we formally deﬁne agnostic PAC learnability for general loss
hypothesis class H is agnostic PAC learnable with respect to a set Z and a
and for every distribution D over Z, when running the learning algorithm on
where LD(h) = Ez∼D[ℓ(h, z)].
In the aforementioned deﬁnition,
deﬁne LD(h) to be the expected value of this random variable. For that, we need
to require that the function ℓ(h, ·) is measurable. Formally, we assume that there
is a σ-algebra of subsets of Z, over which the probability D is deﬁned, and that
and our assumption on ℓis equivalent to the assumption that for every h, the
ceding deﬁnition, we required that the algorithm will return a hypothesis from
H. In some situations, H is a subset of a set H′, and the loss function can be
naturally extended to be a function from H′ × Z to the reals. In this case, we
may allow the algorithm to return a hypothesis h′ ∈H′, as long as it satisﬁes
a hypothesis from H′ is called representation independent learning, while proper
tation independent learning is sometimes called “improper learning,” although
there is nothing improper in representation independent learning.
In this chapter we deﬁned our main formal learning model – PAC learning. The
basic model relies on the realizability assumption, while the agnostic variant does
A Formal Learning Model
not impose any restrictions on the underlying distribution over the examples. We
also generalized the PAC model to arbitrary loss functions. We will sometimes
refer to the most general model simply as PAC learning, omitting the “agnostic”
preﬁx and letting the reader infer what the underlying loss function is from the
context. When we would like to emphasize that we are dealing with the original
we will discuss other notions of learnability.
Bibliographic Remarks
tions follows the works of Vladimir Vapnik and Alexey Chervonenkis (Vapnik &
Valiant’s deﬁnition also requires that the runtime of the learning algorithm will
be polynomial in these quantities. In contrast, we chose to distinguish between
the statistical aspect of learning and the computational aspect of learning. We
introduce the full PAC learning model of Valiant. For expository reasons, we
use the term PAC learning even when we ignore the runtime aspect of learning.
binary classiﬁcation task. Suppose that H is PAC learnable and its sample
complexity is given by mH(·, ·). Show that mH is monotonically nonincreasing
The realizability assumption here implies that the true hypothesis f labels
negatively all examples in the domain, perhaps except one.
in the realizable setup.
PAC learnable (assume realizability), and its sample complexity is bounded
literal over the variables x1, . . . , xd is a simple Boolean function that takes the
In Boolean logic, the product is denoted using the ∧sign. For example, the
We consider the hypothesis class of all conjunctions of literals over the d
(and similarly any conjunction involving a literal and its negation) is allowed
that there exists a Boolean conjunction that generates the labels. Thus, each
example (x, y) ∈X × Y consists of an assignment to the d Boolean variables
Then, the training set S might contain the following instances:
Prove that the hypothesis class of all conjunctions over d variables is
PAC learnable and bound its sample complexity. Propose an algorithm that
implements the ERM rule, whose runtime is polynomial in d · m.
Suppose we are getting a sample S of m examples, such that the instances are
independent but are not identically distributed; the ith instance is sampled
from Di and then yi is set to be f(xi). Let ¯Dm denote the average, that is,
¯Dm = (D1 + · · · + Dm)/m.
A Formal Learning Model
cessful agnostic PAC learner for H, then A is also a successful PAC learner
bution D, the Bayes optimal predictor fD is optimal, in the sense that for
probability distribution, D, if
than B, if it is better than B with respect to all probability distributions D
x is predicted by tossing a coin with bias h(x) toward Heads and predicting
(x, y) is deﬁned to be |h(x) −y|, which is exactly the probability that the
prediction of h will not be equal to y. Note that if h is deterministic, that
Bayes optimal predictor has the smallest risk (w.r.t. the loss function
better than any other learning algorithm with respect to D.
bution, D, and a learning algorithm B such that A is not better than B
cles: one that generates positive examples and one that generates negative
examples, both according to the underlying distribution D on X. Formally,
A ⊂X +. Similarly, D−is the distribution over X −induced by D.
standard deﬁnition of PAC learnability except that here the learner has access
of the two training sets, and possibly over the nondeterministic decisions made
Learning via Uniform Convergence
The ﬁrst formal learning model that we have discussed was the PAC model.
hypothesis class is PAC learnable. In this chapter we will develop a general tool,
uniform convergence, and apply it to show that any ﬁnite class is learnable in
the agnostic PAC model with general loss functions, as long as the range loss
function is bounded.
Uniform Convergence Is Suﬃcient for Learnability
The idea behind the learning condition discussed in this chapter is very simple.
Recall that, given a hypothesis class, H, the ERM learning paradigm works
as follows: Upon receiving a training sample, S, the learner evaluates the risk
(or error) of each h in H on the given sample and outputs a member of H that
minimizes this empirical risk. The hope is that an h that minimizes the empirical
risk with respect to S is a risk minimizer (or has risk close to the minimum) with
respect to the true data probability distribution as well. For that, it suﬃces to
ensure that the empirical risks of all members of H are good approximations of
their true risk. Put another way, we need that uniformly over all hypotheses in
the hypothesis class, the empirical risk will be close to the true risk, as formalized
(w.r.t. domain Z, hypothesis class H, loss function ℓ, and distribution D) if
the ERM learning rule is guaranteed to return a good hypothesis.
Assume that a training set S is
Z, hypothesis class H, loss function ℓ, and distribution D). Then, any output of
Personal use only. Not for distribution. Do not post.
where the ﬁrst and third inequalities are due to the assumption that S is
The preceding lemma implies that to ensure that the ERM rule is an agnostic
uniform convergence condition formalizes this requirement.
We say that a hypothesis class H has
the uniform convergence property (w.r.t. a domain Z and a loss function ℓ) if
there exists a function mUC
Similar to the deﬁnition of sample complexity for PAC learning, the function
vergence property, namely, how many examples we need to ensure that with
The term uniform here refers to having a ﬁxed sample size that works for all
members of H and over all possible probability distributions over the domain.
uniform convergence.
If a class H has the uniform convergence property with a
is a successful agnostic PAC learner for H.
Finite Classes Are Agnostic PAC Learnable
PAC learnable will follow once we establish that uniform convergence holds for
a ﬁnite hypothesis class.
To show that uniform convergence holds we follow a two step argument, similar
second step employs a measure concentration inequality. We now explain these
two steps in detail.
Learning via Uniform Convergence
Equivalently, we need to show that
of this inequality is small enough (for a suﬃciently large m). That is, we will
show that for any ﬁxed hypothesis, h, (which is chosen in advance prior to the
sampling of the training set), the gap between the true and empirical risks,
|LS(h) −LD(h)|, is likely to be small.
Recall that LD(h) = Ez∼D[ℓ(h, z)] and that LS(h) =
each zi is sampled i.i.d. from D, the expected value of the random variable
ℓ(h, zi) is LD(h). By the linearity of expectation, it follows that LD(h) is also
the expected value of LS(h). Hence, the quantity |LD(h)−LS(h)| is the deviation
of the random variable LS(h) from its expectation. We therefore need to show
that the measure of LS(h) is concentrated around its expected value.
A basic statistical fact, the law of large numbers, states that when m goes to
inﬁnity, empirical averages converge to their true expectation. This is true for
LS(h), since it is the empirical average of m i.i.d random variables. However, since
the law of large numbers is only an asymptotic result, it provides no information
about the gap between the empirically estimated error and its true value for any
given, ﬁnite, sample size.
Instead, we will use a measure concentration inequality due to Hoeﬀding, which
quantiﬁes the gap between empirical averages and their expected value.
The proof can be found in Appendix B.
random variables. Furthermore, LS(h) =
Finally, if we choose
Let H be a ﬁnite hypothesis class, let Z be a domain, and let
property with sample complexity
Furthermore, the class is agnostically PAC learnable using the ERM algorithm
with sample complexity
While the preceding corollary only
applies to ﬁnite hypothesis classes, there is a simple trick that allows us to get
a very good estimate of the practical sample complexity of inﬁnite hypothesis
classes. Consider a hypothesis class that is parameterized by d parameters. For
inﬁnite size. However, if we are going to learn this hypothesis class in practice,
using a computer, we will probably maintain real numbers using ﬂoating point
is parameterized by d numbers, in practice we learn a hypothesis class of size at
Learning via Uniform Convergence
ity has the deﬁciency of being dependent on the speciﬁc representation of real
less, the discretization trick can be used to get a rough estimate of the sample
complexity in many practical situations.
If the uniform convergence property holds for a hypothesis class H then in most
cases the empirical risks of hypotheses in H will faithfully represent their true
risks. Uniform convergence suﬃces for agnostic PAC learnability using the ERM
rule. We have shown that ﬁnite hypothesis classes enjoy the uniform convergence
property and are hence agnostic PAC learnable.
Bibliographic Remarks
Classes of functions for which the uniform convergence property holds are also
Francesco Paolo Cantelli, who proved the ﬁrst uniform convergence result in
mental theorem of learning theory states that in binary classiﬁcation problems,
uniform convergence is not only a suﬃcient condition for learnability but is also
a necessary condition. This is not the case for more general learning problems
pler looking requirement about averages (or expectations). Prove that the
following two statements are equivalent (for any learning algorithm A, any
(where ES∼Dm denotes the expectation over samples S of size m).
the sample complexity satisﬁes
learner, and result in overﬁtting. To overcome this problem, we restricted the
search space to some hypothesis class H. Such a hypothesis class can be viewed
as reﬂecting some prior knowledge that the learner has about the task – a belief
example, in our papayas taste problem, on the basis of our previous experience
predicts (at least approximately) the papaya’s tastiness.
Is such prior knowledge really necessary for the success of learning? Maybe
there exists some kind of universal learner, that is, a learner who has no prior
knowledge about a certain task and is ready to be challenged by any task? Let
us elaborate on this point. A speciﬁc learning task is deﬁned by an unknown
distribution D over X × Y, where the goal of the learner is to ﬁnd a predictor
there exist a learning algorithm A and a training set size m, such that for every
distribution D, if A receives m i.i.d. examples from D, there is a high chance it
outputs a predictor h that has a low risk.
Lunch theorem states that no such universal learner exists. To be more precise,
the theorem states that for binary classiﬁcation prediction tasks, for every learner
there exists a distribution on which it fails. We say that the learner fails if, upon
receiving i.i.d. examples from that distribution, its output hypothesis is likely
another learner that will output a hypothesis with a small risk. In other words,
the theorem states that no learner can succeed on all learnable tasks – every
learner has tasks on which it fails while other learners succeed.
Therefore, when approaching a particular learning problem, deﬁned by some
distribution D, we should have some prior knowledge on D. One type of such prior
knowledge is that D comes from some speciﬁc parametric family of distributions.
type of prior knowledge on D, which we assumed when deﬁning the PAC learning
model, is that there exists h in some predeﬁned hypothesis class H, such that
is small. In a sense, this weaker assumption on D is a prerequisite for using the
Personal use only. Not for distribution. Do not post.
agnostic PAC model, in which we require that the risk of the output hypothesis
In the second part of this chapter we study the beneﬁts and pitfalls of using
a hypothesis class as a means of formalizing prior knowledge. We decompose
the error of an ERM algorithm over a class H into two components. The ﬁrst
component reﬂects the quality of our prior knowledge, measured by the minimal
also called the approximation error, or the bias of the algorithm toward choosing
a hypothesis from H. The second component is the error due to overﬁtting,
which depends on the size or the complexity of the class H and is called the
estimation error. These two terms imply a tradeoﬀbetween choosing a more
complex H (which can decrease the bias but increases the risk of overﬁtting)
or a less complex H (which might increase the bias but decreases the potential
In this part we prove that there is no universal learner. We do this by showing
that no learner can succeed on all learning tasks, as formalized in the following
Let A be any learning algorithm for the task
This theorem states that for every learner, there exists a task on which it fails,
even though that task can be successfully learned by another learner. Indeed, a
esis class H = {f}, or more generally, ERM with respect to any ﬁnite hypothesis
Let C be a subset of X of size 2m. The intuition of the proof is that
any learning algorithm that observes only half of the instances in C has no
information on what should be the labels of the rest of the instances in C.
Therefore, there exists a “reality,” that is, some target function f, that would
contradict the labels that A(S) predicts on the unobserved instances in C.
functions by f1, . . . , fT . For each such function, let Di be a distribution over
We will show that for every algorithm, A, that receives a training set of m
Clearly, this means that for every algorithm, A′, that receives a training set of m
It is easy to verify that the preceding suﬃces for showing that P[LD(A′(S)) ≥
possible sequences of m examples from C. Denote these sequences by S1, . . . , Sk.
Also, if Sj = (x1, . . . , xm) we denote by Si
j the sequence containing the instances
in Sj labeled by the function fi, namely, Si
j = ((x1, fi(x1)), . . . , (xm, fi(xm))). If
the distribution is Di then the possible training sets A can receive are Si
and all these training sets have the same probability of being sampled. Therefore,
Using the facts that “maximum” is larger than “average” and that “average” is
larger than “minimum,” we have
if and only if c = vr. Since for such a pair we must have Si
consider an ERM predictor over the hypothesis class H of all the functions f from
from the domain to the label set is considered a good candidate. According to the
in H, and in particular the ERM predictor, will fail on some learning task.
Therefore, this class is not PAC learnable, as formalized in the following corollary:
Let X be an inﬁnite domain set and let H be the set of all
Assume, by way of contradiction, that the class is learnable. Choose
in particular for the algorithm A), there exists a distribution D such that with
desired contradiction.
How can we prevent such failures? We can escape the hazards foreseen by the
task, to avoid the distributions that will cause us to fail when learning that task.
Such prior knowledge can be expressed by restricting our hypothesis class.
But how should we choose a good hypothesis class? On the one hand, we want
to believe that this class includes the hypothesis that has no error at all (in the
PAC setting), or at least that the smallest error achievable by a hypothesis from
this class is indeed rather small (in the agnostic setting). On the other hand,
we have just seen that we cannot simply choose the richest class – the class of
all functions over the given domain. This tradeoﬀis discussed in the following
To answer this question we decompose the error of an ERMH predictor into two
components as follows. Let hS be an ERMH hypothesis. Then, we can write
• The Approximation Error – the minimum risk achievable by a predictor
in the hypothesis class. This term measures how much risk we have because
we restrict ourselves to a speciﬁc class, namely, how much inductive bias we
have. The approximation error does not depend on the sample size and is
determined by the hypothesis class chosen. Enlarging the hypothesis class
can decrease the approximation error.
Under the realizability assumption, the approximation error is zero. In
minimal yet inevitable error, because of the possible nondeterminism of the world in this
model. Sometimes in the literature the term approximation error refers not to
• The Estimation Error – the diﬀerence between the approximation error
and the error achieved by the ERM predictor. The estimation error results
because the empirical risk (i.e., training error) is only an estimate of the
true risk, and so the predictor minimizing the empirical risk is only an
estimate of the predictor minimizing the true risk.
The quality of this estimation depends on the training set size and
on the size, or complexity, of the hypothesis class. As we have shown, for
creases with m. We can think of the size of H as a measure of its complexity.
In future chapters we will deﬁne other complexity measures of hypothesis
complexity tradeoﬀ. On one hand, choosing H to be a very rich class decreases the
approximation error but at the same time might increase the estimation error,
as a rich H might lead to overﬁtting. On the other hand, choosing H to be a
very small set reduces the estimation error but might increase the approximation
error or, in other words, might lead to underﬁtting. Of course, a great choice for
H is the class that contains only one classiﬁer – the Bayes optimal classiﬁer. But
the Bayes optimal classiﬁer depends on the underlying distribution D, which we
do not know (indeed, learning would have been unnecessary had we known D).
sonable estimation error. In many cases, empirical research focuses on designing
good hypothesis classes for a certain domain. Here, “good” means classes for
which the approximation error would not be excessively high. The idea is that
siﬁer, we still have some prior knowledge of the speciﬁc problem at hand, which
enables us to design hypothesis classes for which both the approximation error
and the estimation error are not too large. Getting back to our papayas example,
we do not know how exactly the color and hardness of a papaya predict its taste,
but we do know that papaya is a fruit and on the basis of previous experience
be a good predictor.
learner has to be speciﬁed to some task, and use some prior knowledge about
that task, in order to succeed. So far we have modeled our prior knowledge by
restricting our output hypothesis to be a member of a chosen hypothesis class.
When choosing this hypothesis class, we face a tradeoﬀ, between a larger, or
more complex, class that is more likely to have a small approximation error,
and a more restricted class that would guarantee that the estimation error will
be small. In the next chapter we will study in more detail the behavior of the
Bibliographic Remarks
tion, but these are rather diﬀerent from the theorem we prove here. The theorem
we prove here is closely related to lower bounds in VC theory, as we will study
in the next chapter.
(BMI), age (A), level of physical activity (P), and income (I).
You have to choose between two algorithms; the ﬁrst picks an axis aligned
rectangle in the two dimensional space spanned by the features BP and BMI
and the other picks an axis aligned rectangle in the ﬁve dimensional space
spanned by all the preceding features.
Namely, let A be a learning algorithm for the task of binary classiﬁcation. Let
m be any number smaller than |X|/k, representing a training set size. Then,
proximation error and estimation error. The approximation error depends on
the ﬁt of our prior knowledge (as reﬂected by the choice of the hypothesis class
H) to the underlying unknown distribution. In contrast, the deﬁnition of PAC
learnability requires that the estimation error would be bounded uniformly over
Our current goal is to ﬁgure out which classes H are PAC learnable, and to
characterize exactly the sample complexity of learning a given hypothesis class.
So far we have seen that ﬁnite classes are learnable, but that the class of all
functions (over an inﬁnite size domain) is not. What makes one class learnable
determines their sample complexity?
able, and thus, ﬁniteness of the hypothesis class is not a necessary condition for
learnability. We then present a remarkably crisp characterization of the family
loss. This characterization was ﬁrst discovered by Vladimir Vapnik and Alexey
provide several examples, and then state the fundamental theorem of statistical
ERM rule, and uniform convergence.
complexity of a hypothesis class is upper bounded by the log of its size. To show
that the size of the hypothesis class is not the right characterization of its sample
Let H be the set of threshold functions over the real line, namely,
Personal use only. Not for distribution. Do not post.
size. Nevertheless, the following lemma shows that H is learnable in the PAC
model using the ERM algorithm.
Let H be the class of thresholds as deﬁned earlier. Then, H is
a0 < a⋆< a1 be such that
is positive we set b0 = −∞and if no example in S is negative we set b1 = ∞).
Let bS be a threshold corresponding to an ERM hypothesis, hS, which implies
S∼Dm[b0 < a0 ∨b1 > a1],
and using the union bound we can bound the preceding by
The event b0 < a0 happens if and only if all examples in S are not in the interval
ability, it is not a necessary condition. As we will show, a property called the
restricting the hypothesis class, for any learning algorithm, an adversary can
construct a distribution for which the learning algorithm will perform poorly,
bution. To do so, the adversary used a ﬁnite set C ⊂X and considered a family
of distributions that are concentrated on elements of C. Each distribution was
fail, the adversary used the power of choosing a target function from the set of
When considering PAC learnability of a hypothesis class H, the adversary
achieves a zero risk. Since we are considering distributions that are concentrated
on elements of C, we should study how H behaves on C, which leads to the
following deﬁnition.
Let H be a class of functions from X
we say that H shatters the set C. Formally:
A hypothesis class H shatters a ﬁnite set C ⊂X
Let H be the class of threshold functions over R. Take a set
Getting back to the construction of an adversarial distribution as in the proof
is shattered by H, the adversary is not restricted by H, as they can construct
maintaining the realizability assumption. This immediately yields:
m be a training set size. Assume that there exists a set C ⊂X of size 2m that is
shattered by H. Then, for any learning algorithm, A, there exist a distribution D
learn H using m examples. Intuitively, if a set C is shattered by H, and we
receive a sample containing half the instances of C, the labels of these instances
give us no information about the labels of the rest of the instances in C – every
possible labeling of the rest of the instances can be explained by some hypothesis
in H. Philosophically,
If someone can explain every phenomenon, his explanations are worthless.
This leads us directly to the deﬁnition of the VC dimension.
denoted VCdim(H), is the maximal size of a set C ⊂X that can be shattered
by H. If H can shatter sets of arbitrarily large size we say that H has inﬁnite
learnability. But before delving into more theory, we ﬁrst show several examples.
show that VCdim(H) = d we need to show that
we have shown that for an arbitrary set C = {c1}, H shatters C; therefore
by an interval and therefore H does not shatter C. We therefore conclude that
Axis Aligned Rectangles
Let H be the class of axis aligned rectangles, formally:
h(a1,a2,b1,b2)(x1, x2) =
leftmost point (whose ﬁrst coordinate is the smallest in C), a rightmost point
(ﬁrst coordinate is the largest), a lowest point (second coordinate is the smallest),
and a highest point (second coordinate is the largest). Without loss of generality,
denote C = {c1, . . . , c5} and let c5 be the point that was not selected. Now,
axis aligned rectangle. Indeed, such a rectangle must contain c1, . . . , c4; but in
this case the rectangle contains c5 as well, because its coordinates are within
the intervals deﬁned by the selected points. So, C is not shattered by H, and
Let H be a ﬁnite class. Then, clearly, for any set C we have |HC| ≤|H| and thus C
shows that the PAC learnability of ﬁnite classes follows from the more general
for some integer k, and consider the class of threshold functions (as deﬁned in
large, the gap between log2(|H|) and VCdim(H) can be arbitrarily large.
parameters deﬁning the hypothesis class. While this is often the case, it is not
always true. Consider, for example, the domain X = R, and the hypothesis class
is possible to prove that VCdim(H) = ∞, namely, for every d, one can ﬁnd d
The Fundamental Theorem of PAC learning
converse statement is also true, leading to the fundamental theorem of statistical
The proof of the theorem is given in the next section.
mines the sample complexity.
Then, there are absolute constants C1, C2 such that:
We stated the fundamental theorem for binary classiﬁcation tasks.
A similar result holds for some other learning problems such as regression with
the absolute loss or the squared loss. However, the theorem does not hold for
all learning tasks. In particular, learnability is sometimes possible even though
the uniform convergence property does not hold (we will see an example in
but learnability is possible with other learning rules.
is based on two main claims:
• If VCdim(H) = d, then even though H might be inﬁnite, when restricting it
to a ﬁnite set C ⊂X, its “eﬀective” size, |HC|, is only O(|C|d). That is,
the size of HC grows polynomially rather than exponentially with |C|. This
claim is often referred to as Sauer’s lemma, but it has also been stated and
proved independently by Shelah and by Perles. The formal statement is
show that uniform convergence holds whenever the hypothesis class has a
“small eﬀective size.” By “small eﬀective size” we mean classes for which
|HC| grows polynomially with |C|.
Sauer’s Lemma and the Growth Function
We deﬁned the notion of shattering, by considering the restriction of H to a ﬁnite
set of instances. The growth function measures the maximal “eﬀective” size of
H on a set of m examples. Formally:
Let H be a hypothesis class. Then the
In words, τH(m) is the number of diﬀerent functions from a set C of size m to
tiful lemma, proposed independently by Sauer, Shelah, and Perles, shows that
polynomially rather than exponentially with m.
Let H be a hypothesis class with VCdim(H) ≤
d < ∞. Then, for all m, τH(m) ≤Pd
Proof of Sauer’s Lemma *
To prove the lemma it suﬃces to prove the following stronger claim: For any
C = {c1, . . . , cm} we have
d then no set whose size is larger than d is shattered by H and therefore
sets of size m. Fix H and C = {c1, . . . , cm}. Denote C′ = {c2, . . . , cm} and in
addition, deﬁne the following two sets:
It is easy to verify that |HC| = |Y0| + |Y1|. Additionally, since Y0 = HC′, using
the induction assumption (applied on H and C′) we have that
Next, deﬁne H′ ⊆H to be
= (h(c1), h(c2), . . . , h(cm)},
namely, H′ contains pairs of hypotheses that agree on C′ and diﬀer on c1. Using
using the inductive assumption (now applied on H′ and C′) we obtain that
Overall, we have shown that
which concludes our proof.
Uniform Convergence for Classes of Small Eﬀective Size
In this section we prove that if H has small eﬀective size then it enjoys the
uniform convergence property. Formally,
Let H be a class and let τH be its growth function. Then, for
the uniform convergence property holds. We will prove that
For simplicity assume that
suﬃcient condition for the preceding to hold is that
The upper bound on mUC
is not the tightest possible. A tighter analysis that yields the bounds given in
We will start by showing that
the theorem follows directly from the preceding using Markov’s inequality (see
additional i.i.d. sample. Therefore,
A generalization of the triangle inequality yields
S′∼Dm[LS′(h) −LS(h)]
S′∼Dm |LS′(h) −LS(h)|,
S′∼Dm |LS′(h) −LS(h)| ≤
S = z1, . . . , zm and S′ = z′
m. Since all of these 2m vectors are chosen
i.i.d., nothing will change if we replace the name of the random vector zi with the
name of the random vector z′
i. If we do it, instead of the term (ℓ(h, z′
i) −ℓ(h, zi)). It follows that for
and by the linearity of expectation it also equals
Next, ﬁx S and S′, and let C be the instances appearing in S and S′. Then, we
Combining all with the deﬁnition of τH, we have shown that
The fundamental theorem of learning theory characterizes PAC learnability of
is a combinatorial property that denotes the maximal sample size that can be
required for PAC learning. The theorem also shows that if a problem is at all
learnable, then uniform convergence holds and therefore the problem is learnable
Bibliographic remarks
relation to the deﬁnition of PAC learnability is due to Blumer, Ehrenfeucht,
the Natarajan dimension characterizes learnability of some multiclass learning
Sauer’s lemma has been proved by Sauer in response to a problem of Erdos
Weiss asked Perles about such a result in the context of ergodic theory, and
Perles, who forgot that he had proved it once, proved it again. Vapnik and
Chervonenkis proved the lemma in the context of statistical learning theory.
hypothesis classes if H′ ⊆H then VCdim(H′) ≤VCdim(H).
dimension of each of the following classes (and prove your claims):
a parity function hI as follows. On a binary vector x = (x1, x2, . . . , xn) ∈
dimension d, and every subset A of the domain,
Show that there are cases in which the previous two inequalities are strict
by equalities. Demonstrate all four combinations of = and <.
axis aligned rectangles in Rd. We have already seen that VCdim(H2
Prove that in general, VCdim(Hd
con be the class of Boolean
class is ﬁnite and thus (agnostic) PAC learnable. In this question we calculate
that is shattered by Hd
sponds to hi) contains some literal ℓi which is false on ci and true on cj
for each j ̸= i. Use the Pigeonhole principle to show that there must be a
to derive a contradiction to the requirements from the conjunctions hi, hj.
Monotonicity here means that the conjunctions do not contain negations.
pothesis. We augment Hd
much lower than that:
where VCdim(H) = ⌊log2(|H|)⌋.
can be bounded above by) the number of parameters one needs to set in order
to deﬁne each hypothesis in the class. For instance, if H is the class of axis
aligned rectangles in Rd, then VCdim(H) = 2d, which is equal to the number
of parameters used to deﬁne a rectangle in Rd. Here is an example that shows
that this is not always the case. We will see that a hypothesis class might
be very complex and even not learnable, although it has a small number of
Consider the domain X = R, and the hypothesis class
Hint: There is more than one way to prove the required result. One option
Hint: Take a set of k examples and assume that they are shattered by
the union class. Therefore, the union class can produce all 2k possible
labelings on these examples. Use Sauer’s lemma to show that the union
class cannot produce more than rkd labelings. Therefore, 2k < rkd. Now
deﬁning concept classes over Rn and show a connection between the VC
dimension of such classes and their algebraic properties. Given a function
a class F of real valued functions we deﬁne a corresponding class of functions
tions is linearly closed
addition and scalar multiplication of functions are deﬁned point wise, namely,
is linearly closed then we can view it as a vector space over the reals. For a
Hypothesis classes that have a representation as POS(F + g) for some vector
space of functions F and some function g are called Dudley classes.
deﬁned earlier, VCdim(POS(F + g)) = VCdim(POS(F)).
dimension of the corresponding class POS(F) equals the linear dimension
of F (as a vector space). Hint: Let f1, . . . , fd be a basis for the vector space
that this mapping induces a matching between functions over Rn of the
n denote the class of functions deﬁned by polynomial inequalities
variable polynomial is the maximal sum of variable exponents over all
of its terms. For example, the degree of p(x) = 3x3
n (as a function of d and n).
Nonuniform Learnability
The notions of PAC learnability discussed so far in the book allow the sample
sizes to depend on the accuracy and conﬁdence parameters, but they are uniform
quently, classes that are learnable in that respect are limited (they must have
more relaxed, weaker notions of learnability. We discuss the usefulness of such
notions and provide characterization of the concept classes that are learnable
using these deﬁnitions.
We begin this discussion by deﬁning a notion of “nonuniform learnability” that
pared. We then provide a characterization of nonuniform learnability and show
that nonuniform learnability is a strict relaxation of agnostic PAC learnability.
We also show that a suﬃcient condition for nonuniform learnability is that H is
new learning paradigm, which is called Structural Risk Minimization (SRM). In
yields the Minimum Description Length (MDL) paradigm. The MDL paradigm
notion of learnability. Finally, we discuss the signiﬁcance and usefulness of the
diﬀerent notions of learnability.
Nonuniform Learnability
“Nonuniform learnability” allows the sample size to be nonuniform with respect
to the diﬀerent hypotheses with which the learner is competing. We say that a
In PAC learnability, this notion of “competitiveness” is not very useful, as we
are looking for a hypothesis with an absolute low risk (in the realizable case) or
Personal use only. Not for distribution. Do not post.
Nonuniform Learnability
with a low risk compared to the minimal risk achieved by hypotheses in our class
(in the agnostic case). Therefore, the sample size depends only on the accuracy
and conﬁdence parameters. In nonuniform learnability, however, we allow the
which we are competing. Formally,
A hypothesis class H is nonuniformly learnable if there exist a
learning algorithm, A, and a function mNUL
over the choice of S ∼Dm it holds that
In both types of learnability, we require that the output hypothesis will be
between these two notions of learnability is the question of whether the sample
size m may depend on the hypothesis h to which the error of A(S) is compared.
ability. That is, if a class is agnostic PAC learnable then it is also nonuniformly
Characterizing Nonuniform Learnability
Our goal now is to characterize nonuniform learnability. In the previous chapter
we have found a crisp characterization of PAC learnable classes, by showing
dimension is ﬁnite. In the following theorem we ﬁnd a diﬀerent characterization
for nonuniform learnable classes for the task of binary classiﬁcation.
able if and only if it is a countable union of agnostic PAC learnable hypothesis
Let H be a hypothesis class that can be written as a countable
union of hypothesis classes, H = S
convergence property. Then, H is nonuniformly learnable.
form learnability. The proof of this theorem will be given in the next section by
First assume that H = S
nostic PAC learnable. Using the fundamental theorem of statistical learning, it
follows that each Hn has the uniform convergence property. Therefore, using
For the other direction, assume that H is nonuniform learnable using some
for any distribution D that satisﬁes the realizability assumption with respect to
dimension of Hn must be ﬁnite, and therefore Hn is agnostic PAC learnable.
ation of agnostic PAC learnability; namely, there are hypothesis classes that are
nonuniform learnable but are not agnostic PAC learnable.
Consider a binary classiﬁcation problem with the instance domain
degree n; namely, Hn is the set of all classiﬁers of the form h(x) = sign(p(x))
the class of all polynomial classiﬁers over R. It is easy to verify that VCdim(H) =
Structural Risk Minimization
So far, we have encoded our prior knowledge by specifying a hypothesis class
H, which we believe includes a good predictor for the learning task at hand.
Yet another way to express our prior knowledge is by specifying preferences over
hypotheses within H. In the Structural Risk Minimization (SRM) paradigm,
we do so by ﬁrst assuming that H can be written as H = S
hypothesis class, Hn, such that a higher weight reﬂects a stronger preference
for the hypothesis class. In this section we discuss how to learn with such prior
knowledge. In the next section we describe a couple of important weighting
schemes, including Minimum Description Length.
Nonuniform Learnability
Concretely, let H be a hypothesis class that can be written as H = S
For example, H may be the class of all polynomial classiﬁers where each Hn is
In words, we have a ﬁxed sample size m, and we are interested in the lowest
possible upper bound on the gap between empirical and true risks achievable by
using a sample of m examples.
a weight function over the hypothesis classes H1, H2, . . .. Such a weight function
can reﬂect the importance that the learner attributes to each hypothesis class,
or some measure of the complexity of diﬀerent hypothesis classes. If H is a ﬁnite
all hypothesis classes. This equal weighting corresponds to no a priori preference
to any hypothesis class. Of course, if one believes (as prior knowledge) that a
certain hypothesis class is more likely to contain the correct target function,
then it should be assigned a larger weight, reﬂecting this prior knowledge. When
H is a (countable) inﬁnite union of hypothesis classes, a uniform weighting is
not possible but many other weighting schemes may work. For example, one can
convenient way to deﬁne weighting functions using description languages.
The SRM rule follows a “bound minimization” approach. This means that
the goal of the paradigm is to ﬁnd a hypothesis that minimizes a certain upper
bound on the true risk. The bound that the SRM rule wishes to minimize is
given in the following theorem.
H be a hypothesis class that can be written as H = S
Hn satisﬁes the uniform convergence property with a sample complexity function
concludes our proof.
The SRM paradigm searches for h that minimizes this bound, as formalized
in the following pseudocode:
Structural Risk Minimization (SRM)
n Hn where Hn has uniform convergence with mUC
Unlike the ERM paradigm discussed in previous chapters, we no longer just care
about the empirical risk, LS(h), but we are willing to trade some of our bias
is smaller, for the sake of a smaller estimation error.
Next we show that the SRM paradigm can be used for nonuniform learning
of every class, which is a countable union of uniformly converging hypothesis
Let H be a hypothesis class such that H = S
each Hn has the uniform convergence property with sample complexity mUC
n2π2 . Then, H is nonuniformly learnable
using the SRM rule with rate
Nonuniform Learnability
Let A be the SRM algorithm with respect to the weighting function w.
The preceding holds in particular for the hypothesis A(S) returned by the SRM
rule. By the deﬁnition of SRM we obtain that
addition, from the uniform convergence property of each Hn we have that with
It turns out that, for any inﬁnite domain set, X, the class of all binary valued
that, in some sense, the no free lunch theorem holds for nonuniform learning
as well: namely, whenever the domain is not ﬁnite, there exists no nonuniform
learner with respect to the class of all deterministic binary classiﬁers (although
for each such classiﬁer there exists a trivial algorithm that learns it – ERM with
respect to the hypothesis class that contains only this classiﬁer).
prior knowledge, or bias, of a nonuniform learner for H is weaker – it is searching
ciﬁc Hn. The cost of this weakening of prior knowledge is the increase in sample
Assume that for all n, VCdim(Hn) = n. Since mUC
That is, the cost of relaxing the learner’s prior knowledge from a speciﬁc Hn
that contains the target h to a countable union of classes depends on the log of
the index of the ﬁrst class in which h resides. That cost increases with the index
of the class, which can be interpreted as reﬂecting the value of knowing a good
priority order on the hypotheses in H.
Minimum Description Length and Occam’s Razor
Let H be a countable hypothesis class. Then, we can write H as a countable
union of singleton classes, namely, H = S
and the SRM rule becomes
It follows that in this case, the prior knowledge is solely determined by the weight
we assign to each hypothesis. We assign higher weights to hypotheses that we
believe are more likely to be the correct one, and in the learning algorithm we
prefer hypotheses that have higher weights.
tion over H, which is derived from the length of descriptions given to hypotheses.
Having a hypothesis class, one can wonder about how we describe, or represent,
each hypothesis in the class. We naturally ﬁx some description language. This
las. In any of these languages, a description consists of ﬁnite strings of symbols
(or characters) drawn from some ﬁxed alphabet. We shall now formalize these
Let H be the hypothesis class we wish to describe. Fix some ﬁnite set Σ
of symbols (or “characters”), which we call the alphabet. For concreteness, we
The set of all ﬁnite length strings is denoted Σ∗. A description language for H
called “the description of h,” and its length is denoted by |h|.
distinct h, h′, d(h) is not a preﬁx of d(h′). That is, we do not allow that any
collections of strings enjoy the following combinatorial property:
Nonuniform Learnability
of outcomes is a member of S; at that point, stop. For each σ ∈S, let P(σ)
be the probability that this process generates the string σ. Note that since S is
we will stop only once the sequence of outcomes equals σ. We therefore get that,
for every σ ∈S, P(σ) =
esis class, H, gives rise to a weighting function w over that hypothesis class – we
will simply set w(h) =
free description language for H. Then, for every sample size, m, every conﬁdence
where |h| is the length of d(h).
. In particular, it suggests trading oﬀempirical
risk for saving description length. This yields the Minimum Description Length
Minimum Description Length (MDL)
H is a countable hypothesis class
Let H be the class of all predictors that can be implemented using
binary string obtained by running the gzip command on the program (this yields
risk, the true risk of the one that has shorter description can be bounded by a
lower value. Thus, this result can be viewed as conveying a philosophical message:
A short explanation (that is, a hypothesis that has a short length) tends to be more valid
than a long explanation.
This is a well known principle, called Occam’s razor, after William of Ockham,
it explicitly. Here, we provide one possible justiﬁcation to this principle. The
sense of having a longer description), the larger the sample size it has to ﬁt to
guarantee that it has a small true risk, LD(h).
At a second glance, our Occam razor claim might seem somewhat problematic.
In the context in which the Occam razor principle is usually invoked in science,
the language according to which complexity is measured is a natural language,
sume that we have two hypotheses such that |h′| is much smaller than |h|. By
the preceding result, if both have the same error on a given training set, S, then
the true error of h may be much higher than the true error of h′, so one should
prefer h′ over h. However, we could have chosen a diﬀerent description language,
Suddenly it looks as if one should prefer h over h′. But these are the same h and
h′ for which we argued two sentences ago that h′ should be preferable. Where is
Indeed, there is no inherent generalizability diﬀerence between hypotheses.
The crucial aspect here is the dependency order between the initial choice of
language (or, preference over hypotheses) and the training set. As we know from
fore seeing the data, then we are guaranteed a rather small estimation error term
. Choosing a description language (or, equivalently,
some weighting of hypotheses) is a weak form of committing to a hypothesis.
Rather than committing to a single hypothesis, we spread out our commitment
eralization bound holds. Just as the choice of a single hypothesis to be evaluated
by a sample can be arbitrary, so is the choice of description language.
Nonuniform Learnability
Other Notions of Learnability – Consistency
The notion of learnability can be further relaxed by allowing the needed sample
probability distribution D (that is used to generate the training sample and to
determine the risk). This type of performance guarantee is captured by the notion
of consistency1 of a learning rule.
Let Z be a domain set, let P be a set of
ing rule A is consistent with respect to H and P if there exists a function
the choice of S ∼Dm it holds that
The notion of consistency is, of course, a relaxation of our previous notion
of nonuniform learnability. Clearly if an algorithm nonuniformly learns a class
H it is also universally consistent for that class. The relaxation is strict in the
sense that there are consistent learning rules that are not successful nonuniform
universally consistent for the class of all binary classiﬁers over N. However, as
we have argued before, this class is not nonuniformly learnable.
Consider the classiﬁcation prediction algorithm Memorize deﬁned
as follows. The algorithm memorizes the training examples, and, given a test
point x, it predicts the majority label among all labeled instances of x that exist
in the training sample (and some ﬁxed default label if no instance of x appears
algorithm is universally consistent for every countable domain X and a ﬁnite
Intuitively, it is not obvious that the Memorize algorithm should be viewed as a
learner, since it lacks the aspect of generalization, namely, of using observed data
to predict the labels of unseen examples. The fact that Memorize is a consistent
algorithm for the class of all functions over any countable domain set therefore
raises doubt about the usefulness of consistency guarantees. Furthermore, the
probability (corresponding to weak consistency) or almost sure convergence (corresponding
to strong consistency).
distributions” we mean all probability distributions that have Ωcontained in their
associated family of measurable subsets.
which led to overﬁtting, is in fact the Memorize algorithm. In the next section
we discuss the signiﬁcance of the diﬀerent notions of learnability and revisit the
Discussing the Diﬀerent Notions of Learnability
ness. As is usually the case, the usefulness of a mathematical deﬁnition depends
on what we need it for. We therefore list several possible goals that we aim to
tions in light of these goals.
What Is the Risk of the Learned Hypothesis?
rithm is bounding the risk of the output predictor. Here, both PAC learning
and nonuniform learning give us an upper bound on the true risk of the learned
hypothesis based on its empirical risk. Consistency guarantees do not provide
such a bound. However, it is always possible to estimate the risk of the output
How Many Examples Are Required to Be as Good as the Best Hypothesis
ples we need to collect in order to learn it. Here, PAC learning gives a crisp
answer. However, for both nonuniform learning and consistency, we do not know
in advance how many examples are required to learn H. In nonuniform learning
this number depends on the best hypothesis in H, and in consistency it also
depends on the underlying distribution. In this sense, PAC learning is the only
useful deﬁnition of learnability. On the ﬂip side, one should keep in mind that
even if the estimation error of the predictor we learn is small, its risk may still
be large if H has a large approximation error. So, for the question “How many
examples are required to be as good as the Bayes optimal predictor?” even PAC
guarantees do not provide us with a crisp answer. This reﬂects the fact that the
usefulness of PAC learning relies on the quality of our prior knowledge.
PAC guarantees also help us to understand what we should do next if our
learning algorithm returns a hypothesis with a large risk, since we can bound
the part of the error that stems from estimation error and therefore know how
much of the error is attributed to approximation error. If the approximation error
is large, we know that we should use a diﬀerent hypothesis class. Similarly, if a
nonuniform algorithm fails, we can consider a diﬀerent weighting function over
(subsets of) hypotheses. However, when a consistent algorithm fails, we have
no idea whether this is because of the estimation error or the approximation
error. Furthermore, even if we are sure we have a problem with the estimation
Nonuniform Learnability
error term, we do not know how many more examples are needed to make the
estimation error small.
How to Learn? How to Express Prior Knowledge?
Maybe the most useful aspect of the theory of learning is in providing an answer
to the question of “how to learn.” The deﬁnition of PAC learning yields the
knowledge. It gives us a crisp way to encode prior knowledge by choosing a
hypothesis class, and once this choice is made, we have a generic learning rule –
ERM. The deﬁnition of nonuniform learnability also yields a crisp way to encode
prior knowledge by specifying weights over (subsets of) hypotheses of H. Once
this choice is made, we again have a generic learning rule – SRM. The SRM rule
is also advantageous in model selection tasks, where prior knowledge is partial.
Consider the problem of ﬁtting a one dimensional polynomial to data; namely,
the hypothesis class of polynomials. However, we might be uncertain regarding
which degree d would give the best results for our data set: A small degree might
not ﬁt the data well (i.e., it will have a large approximation error), whereas a
high degree might lead to overﬁtting (i.e., it will have a large estimation error).
It is easy to see that the empirical risk decreases as we enlarge the degree.
and would overﬁt. On the other hand, if we choose too small a hypothesis class,
(i.e., a large approximation error). In contrast, we can use the SRM rule on the
set of all polynomials, while ordering subsets of H according to their degree, and
this will yield a 3rd degree polynomial since the combination of its empirical
risk and the bound on its estimation error is the smallest. In other words, the
SRM rule enables us to select the right model on the basis of the data itself. The
price we pay for this ﬂexibility (besides a slight increase of the estimation error
relative to PAC learning w.r.t. the optimal degree) is that we do not know in
advance how many examples are needed to compete with the best hypothesis in
tion of consistency does not yield a natural learning paradigm or a way to encode
prior knowledge. In fact, in many cases there is no need for prior knowledge at
all. For example, we saw that even the Memorize algorithm, which intuitively
should not be called a learning algorithm, is a consistent algorithm for any class
deﬁned over a countable domain and a ﬁnite label set. This hints that consistency
is a very weak requirement.
Which Learning Algorithm Should We Prefer?
One may argue that even though consistency is a weak requirement, it is desirable
that a learning algorithm will be consistent with respect to the set of all functions
from X to Y, which gives us a guarantee that for enough training examples, we
will always be as good as the Bayes optimal predictor. Therefore, if we have
two algorithms, where one is consistent and the other one is not consistent, we
should prefer the consistent algorithm. However, this argument is problematic for
two reasons. First, maybe it is the case that for most “natural” distributions we
will observe in practice that the sample complexity of the consistent algorithm
will be so large so that in every practical situation we will not obtain enough
examples to enjoy this guarantee. Second, it is not very hard to make any PAC
or nonuniform learner consistent with respect to the class of all functions from
X to Y. Concretely, consider a countable domain, X, a ﬁnite label set Y, and
a hypothesis class, H, of functions from X to Y. We can make any nonuniform
learner for H be consistent with respect to the class of all classiﬁers from X to Y
using the following simple trick: Upon receiving a training set, we will ﬁrst run
the nonuniform learner over the training set, and then we will obtain a bound
on the true risk of the learned predictor. If this bound is small enough we are
done. Otherwise, we revert to the Memorize algorithm. This simple modiﬁcation
makes the algorithm consistent with respect to all functions from X to Y. Since
it is easy to make any algorithm consistent, it may not be wise to prefer one
algorithm over the other just because of consistency considerations.
that no algorithm can learn the class of all classiﬁers over an inﬁnite domain.
In contrast, in this chapter we saw that the Memorize algorithm is consistent
with respect to the class of all classiﬁers over a countable inﬁnite domain. To
understand why these two statements do not contradict each other, let us ﬁrst
theorem implies the following: For any algorithm, A, and a training set size, m,
Nonuniform Learnability
will get a sample of m i.i.d. training examples, labeled by h⋆, then A is likely to
return a classiﬁer with a larger error.
The consistency of Memorize implies the following: For every distribution over
depends on the distribution and on h⋆) such that if Memorize receives at least
m examples it is likely to return a classiﬁer with a small error.
and then ﬁnd a distribution and a labeling function that are bad for this training
set size. In contrast, in consistency guarantees, we ﬁrst ﬁx the distribution and
the labeling function, and only then do we ﬁnd a training set size that suﬃces
for learning this particular distribution and labeling function.
We introduced nonuniform learnability as a relaxation of PAC learnability and
consistency as a relaxation of nonuniform learnability. This means that even
ability. We discussed the usefulness of the diﬀerent deﬁnitions of learnability.
tion Length scheme, where hypotheses with shorter descriptions are preferred,
language), which we can learn (nonuniformly) using the MDL scheme.
tice. The ability to learn this class is impressive, and, seemingly, this chapter
should have been the last chapter of this book. This is not the case, because of
the computational aspect of learning: that is, the runtime needed to apply the
learning rule. For example, to implement the MDL paradigm with respect to
grams, which will take forever. Even the implementation of the ERM paradigm
number – much larger than the number of atoms in the visible universe. In the
next chapter we formally deﬁne the computational complexity of learning. In the
second part of this book we will study hypothesis classes for which the ERM or
SRM schemes can be implemented eﬃciently.
Bibliographic Remarks
the second part of this book.
classiﬁcation. Show that it is impossible to assign weights to the hypotheses
• H could be learnt nonuniformly using these weights. That is, the weighting
• The weights would be monotonically nondecreasing. That is, if i < j, then
• (*) Deﬁne such a function w when for all n Hn is countable (possibly
length of h, according to some ﬁxed description language. Consider the MDL
learning paradigm in which the algorithm returns:
Nonuniform Learnability
Prove a bound on LD(hS)−LD(h∗
B) in terms of B, the conﬁdence parameter
• Note: Such bounds are known as oracle inequalities in the literature: We
wish to estimate how good we are compared to a reference classiﬁer (or
ability: namely, that, over any inﬁnite domain, the class of all functions is not
learnable even under the relaxed nonuniform variation of learning.
Recall that an algorithm, A, nonuniformly learns a hypothesis class H if
there exists a function mNUL
If such an algorithm exists then we say that H is nonuniformly learnable.
which VCdim(Hn) = ∞.
Hint: Given a class H that shatters some inﬁnite set K, and a sequence of
is nonuniformly learnable but not PAC learnable.
is not nonuniformly learnable.
Let X be a countable domain and let D be a probability distribution over X.
S∼Dm [∃xi : (D({xi}) > η and xi /∈S)] ≤ne−ηm.
valued) functions over any countable domain.
The Runtime of Learning
So far in the book we have studied the statistical perspective of learning, namely,
how many samples are needed for learning. In other words, we focused on the
amount of information learning requires. However, when considering automated
plexity of a task: that is, how much computation is involved in carrying out a
learning task. Once a suﬃcient training sample is available to the learner, there
is some computation to be done to extract a hypothesis or ﬁgure out the label of
a given test instance. These computational resources are crucial in any practical
application of machine learning. We refer to these two types of resources as the
sample complexity and the computational complexity. In this chapter, we turn
our attention to the computational complexity of learning.
text of the computational complexity of general algorithmic tasks. This area has
comments that follow summarize the basic ideas of that general theory that are
most relevant to our discussion.
chine the algorithm is being implemented on (e.g., what the clock rate of the
machine’s CPU is). To avoid dependence on the speciﬁc machine, it is common
to analyze the runtime of algorithms in an asymptotic sense. For example, we
rithm on any machine that satisﬁes the requirements of some accepted abstract
ing: there exist constants c and n0, which can depend on the actual machine,
such that, for any value of n > n0, the runtime in seconds of sorting any n items
will be at most c n log(n). It is common to use the term feasible or eﬃciently
computable for tasks that can be performed by an algorithm whose running time
is O(p(n)) for some polynomial function p. One should note that this type of
analysis depends on deﬁning what is the input size n of any instance to which
cussed in the common computational complexity literature, this input size is
clearly deﬁned; the algorithm gets an input instance, say, a list to be sorted, or
an arithmetic operation to be calculated, which has a well deﬁned size (say, the
Personal use only. Not for distribution. Do not post.
number of bits in its representation). For machine learning tasks, the notion of
an input size is not so clear. An algorithm aims to detect some pattern in a data
set and can only access random samples of that data.
We start the chapter by discussing this issue and deﬁne the computational
complexity of learning. For advanced students, we also provide a detailed formal
plementing the ERM rule. We ﬁrst give several examples of hypothesis classes
where the ERM rule can be eﬃciently implemented, and then consider some
tation is computationally hard. It follows that hardness of implementing ERM
does not imply hardness of learning. Finally, we brieﬂy discuss how one can show
hardness of a given learning task, namely, that no learning algorithm can solve
Computational Complexity of Learning
pothesis class, H, a loss function, ℓ, and a training set of examples from Z that
are sampled i.i.d. according to an unknown distribution D. Given parameters
As mentioned before, the actual runtime of an algorithm in seconds depends on
the speciﬁc machine. To allow machine independent analysis, we use the standard
approach in computational complexity theory. First, we rely on a notion of an
abstract machine, such as a Turing machine (or a Turing machine over the reals
sense, while ignoring constant factors, thus the speciﬁc machine is not important
as long as it implements the abstract machine. Usually, the asymptote is with
algorithm mentioned before, we analyze the runtime as a function of the number
of items that need to be sorted.
In the context of learning algorithms, there is no clear notion of “input size.”
One might deﬁne the input size to be the size of the training set the algorithm
receives, but that would be rather pointless. If we give the algorithm a very
ing problem, the algorithm can simply ignore the extra examples. Therefore, a
sequently, the runtime available for a learning algorithm should not increase as
we increase the size of the training set. Just the same, we can still analyze the
runtime as a function of natural parameters of the problem such as the target
accuracy, the conﬁdence of achieving that accuracy, the dimensionality of the
The Runtime of Learning
domain set, or some measures of the complexity of the hypothesis class with
which the algorithm’s output is compared.
To illustrate this, consider a learning algorithm for the task of learning axis
a sequence of the problems is ﬁxed, one can analyze the asymptotic runtime as
a function of variables of that sequence.
Before we introduce the formal deﬁnition, there is one more subtlety we need
to tackle. On the basis of the preceding, a learning algorithm can “cheat,” by
transferring the computational burden to the output hypothesis. For example,
the algorithm can simply deﬁne the output hypothesis to be the function that
stores the training set in its memory, and whenever it gets a test example x
it calculates the ERM hypothesis on the training set and applies it on x. Note
that in this case, our algorithm has a ﬁxed output (namely, the function that
we have just described) and can run in constant time. However, learning is still
hard – the hardness is now in implementing the output classiﬁer to obtain a
label prediction. To prevent this “cheating,” we shall require that the output of
a learning algorithm must be applied to predict the label of a new example in
time that does not exceed the runtime of training (that is, computing the output
classiﬁer from the input training sample). In the next subsection the advanced
reader may ﬁnd a formal deﬁnition of the computational complexity of learning.
The deﬁnition that follows relies on a notion of an underlying abstract machine,
which is usually either a Turing machine or a Turing machine over the reals. We
will measure the computational complexity of an algorithm using the number of
“operations” it needs to perform, where we assume that for any machine that
implements the underlying abstract machine there exists a constant c such that
any such “operation” can be performed on the machine using c seconds.
tational complexity of a ﬁxed learning problem (determined by a triplet (Z, H, ℓ)
– a domain set, a benchmark hypothesis class, and a loss function). Then, in the
second step we consider the rate of change of that complexity along a sequence
algorithm, A, we say that A solves the learning task in time O(f) if there
exists some constant number c, such that for every probability distribution D
• The output of A, denoted hA, can be applied to predict the label of a new
is deﬁned by a domain Zn, a hypothesis class Hn, and a loss function ℓn.
Let A be a learning algorithm designed for solving learning problems of
A with respect to the preceding sequence is O(g), if for all n, A solves the
We say that A is an eﬃcient algorithm with respect to a sequence (Zn, Hn, ℓn)
lem can be solved eﬃciently depends on how it can be broken into a sequence
of speciﬁc learning problems. For example, consider the problem of learning a
ﬁnite hypothesis class. As we showed in previous chapters, the ERM rule over
example takes a constant time, it is possible to implement the ERM rule in time
in polynomial time. Furthermore, if we deﬁne a sequence of problems in which
|Hn| = n, then the exhaustive search is still considered to be eﬃcient. However, if
ity is still polynomial in n but the computational complexity of the exhaustive
search algorithm grows exponentially with n (thus, rendered ineﬃcient).
Implementing the ERM Rule
Given a hypothesis class H, the ERMH rule is maybe the most natural learning
paradigm. Furthermore, for binary classiﬁcation problems we saw that if learning
is at all possible, it is possible with the ERM rule. In this section we discuss the
computational complexity of implementing the ERM rule for several hypothesis
sponding ERMH rule can be deﬁned as follows:
The Runtime of Learning
This section studies the runtime of implementing the ERM rule for several
examples of learning tasks.
ably mild restriction. For example, H can be the set of all predictors that can be
amples of useful ﬁnite classes are any hypothesis class that can be parameterized
by a ﬁnite number of parameters, where we are satisﬁed with a representation
of each of the parameters using a ﬁnite number of bits, for example, the class of
axis aligned rectangles in the Euclidean space, Rd, when the parameters deﬁning
any given rectangle are speciﬁed up to some limited precision.
As we have shown in previous chapters, the sample complexity of learning a
calculate the empirical risk, LS(h), and return a hypothesis that minimizes
ple takes a constant amount of time, k, the runtime of this exhaustive search
becomes k|H|m, where m is the size of the training set. If we let m to be the
upper bound on the sample complexity mentioned, then the runtime becomes
The linear dependence of the runtime on the size of H makes this approach
ineﬃcient (and unrealistic) for large classes. Formally, if we deﬁne a sequence of
problems (Zn, Hn, ℓn)∞
at most n bits of code, then the runtime grows exponentially with n, implying
that the exhaustive search approach is unrealistic for practical use. In fact, this
problem is one of the reasons we are dealing with other hypothesis classes, like
classes of linear predictors, which we will encounter in the next chapter, and not
just focusing on ﬁnite classes.
It is important to realize that the ineﬃciency of one algorithmic approach
mentation exists. Indeed, we will show examples in which the ERM rule can be
implemented eﬃciently.
Axis Aligned Rectangles
Let Hn be the class of axis aligned rectangles in Rn, namely,
h(a1,...,an,b1,...,bn)(x, y) =
Eﬃciently Learnable in the Realizable Case
Consider implementing the ERM rule in the realizable case. That is, we are given
a training set S = (x1, y1), . . . , (xm, ym) of examples, such that there exists an
such an axis aligned rectangle with a zero training error, namely, a rectangle
that is consistent with all the labels in S.
ai to be the minimal value of the i’th coordinate of a positive example in S and
bi to be the maximal value of the i’th coordinate of a positive example in S.
It is easy to verify that the resulting rectangle has zero training error and that
the runtime of ﬁnding each ai and bi is O(m). Hence, the total runtime of this
Not Eﬃciently Learnable in the Agnostic Case
In the agnostic case, we do not assume that some hypothesis h perfectly predicts
the labels of all the examples in the training set. Our goal is therefore to ﬁnd
h that minimizes the number of examples for which yi ̸= h(xi). It turns out
that for many common hypothesis classes, including the classes of axis aligned
rectangles we consider here, solving the ERM problem in the agnostic setting is
in H). That is, unless P = NP, there is no algorithm whose running time is
polynomial in m and n that is guaranteed to ﬁnd an ERM hypothesis for these
esis class, say, axis aligned rectangles in some ﬁxed dimension, n, then there exist
eﬃcient learning algorithms for this class. In other words, there are successful
dependence on the dimension n is not polynomial).
To see this, recall the implementation of the ERM rule we presented for the
realizable case, from which it follows that an axis aligned rectangle is determined
form an exhaustive search over all subsets of the training set of size at most 2n
examples and construct a rectangle from each such subset. Then, we can pick
The Runtime of Learning
the rectangle with the minimal training error. This procedure is guaranteed to
ﬁnd an ERM hypothesis, and the runtime of the procedure is mO(n). It follows
that if n is ﬁxed, the runtime is polynomial in the sample size. This does not
contradict the aforementioned hardness result, since there we argued that unless
Boolean Conjunctions
expressed as a proposition formula of the form xi1 ∧. . . ∧xik ∧¬xj1 ∧. . . ∧¬xjr,
or appears with a negation sign, or does not appear at all, and we also have the
all negative formula). Hence, the sample complexity of learning Hn
Eﬃciently Learnable in the Realizable Case
Next, we show that it is possible to solve the ERM problem for Hn
polynomial in n and m. The idea is to deﬁne an ERM conjunction by including
in the hypothesis conjunction all the literals that do not contradict any positively
(or conjunctions). Let h0 be the conjunction of all possible literals. That is,
positively. Now, since we consider learning in the realizable setup, there exists
C, that is consistent with all the examples in
legal ERM hypothesis. Note that the running time of this algorithm is O(mn).
Not Eﬃciently Learnable in the Agnostic Case
As in the case of axis aligned rectangles, unless P = NP, there is no algorithm
whose running time is polynomial in m and n that guaranteed to ﬁnd an ERM
hypothesis for the class of Boolean conjunctions in the unrealizable case.
We next show that a slight generalization of the class of Boolean conjunctions
leads to intractability of solving the ERM problem even in the realizable case.
Boolean formula of the form h(x) = A1(x) ∨A2(x) ∨A3(x), where each Ai(x) is
a Boolean conjunction (as deﬁned in the previous section). The output of h(x) is
3DNF is at most 33n. Hence, the sample complexity of learning Hn
However, from the computational perspective, this learning problem is hard.
RP = NP, there is no polynomial time algorithm that properly learns a sequence
n. By “properly” we mean that the algorithm should output a hypothesis that is
formula it is a proper learner and therefore it is hard to implement it. The proof
Eﬃciently Learnable, but Not by a Proper ERM
In the previous section we saw that it is impossible to implement the ERM rule
eﬃciently for the class Hn
is possible to learn this class eﬃciently, but using ERM with respect to a larger
Representation Independent Learning Is Not Hard
is no contradiction to the hardness result mentioned in the previous section as we
now allow “representation independent” learning. That is, we allow the learning
a larger hypothesis class so that the new class is easily learnable. The learning
The Runtime of Learning
esis class; hence the name “representation independent” learning. We emphasize
that in most situations, returning a hypothesis with good predictive ability is
what we are really interested in doing.
u, v, w there is a variable in the range of ψ indicating if u ∨v ∨w is true or false.
with the same truth table. Since we assume that the data is realizable, we can
Furthermore, the sample complexity of learning the class of conjunctions in the
this approach is polynomial in n.
Intuitively, the idea is as follows. We started with a hypothesis class for which
learning is hard. We switched to another representation where the hypothesis
class is larger than the original class but has more structure, which allows for a
more eﬃcient ERM search. In the new representation, solving the ERM problem
We have just demonstrated that the computational hardness of implementing
ERMH does not imply that such a class H is not learnable. How can we prove
that a learning problem is computationally hard?
tography is the opposite of learning. In learning we try to uncover some rule
underlying the examples we see, whereas in cryptography, the goal is to make
sure that nobody will be able to discover some secret, in spite of having access
to some partial information about it. On that high level intuitive sense, results
about the cryptographic security of some system translate into results about
the unlearnability of some corresponding task. Regrettably, currently one has no
way of proving that a cryptographic protocol is not breakable. Even the common
assumption of P ̸= NP does not suﬃce for that (although it can be shown to
be necessary for most common cryptographic scenarios). The common approach
tographic assumptions. The more these are used as a basis for cryptography, the
stronger is our belief that they really hold (or, at least, that algorithms that will
refute them are hard to come by).
ity from cryptographic assumptions. Many cryptographic systems rely on the
assumption that there exists a one way function. Roughly speaking, a one way
vert. More formally, f can be computed in time poly(n) but for any randomized
polynomial time algorithm A, and for every polynomial p(·),
P[f(A(f(x))) = f(x)] <
where the probability is taken over a random choice of x according to the uniform
f is hard to invert, once one has access to its secret key, inverting f becomes
feasible. Such functions are parameterized by their secret key.
lated by some polynomial time algorithm. That is, we ﬁx an algorithm that given
a secret key (representing one function in Fn) and an input vector, it calculates
the value of the function corresponding to the secret key on the input vector in
polynomial time. Consider the task of learning the class of the corresponding
by some secret key sn of size polynomial in n, the class Hn
ized by these keys and its size is at most 2p(n). Its sample complexity is therefore
polynomial in n. We claim that there can be no eﬃcient learner for this class. If
there were such a learner, L, then by sampling uniformly at random a polynomial
labeled training sample of pairs (f(x), x), which should suﬃce for our learner to
the range of f), which would violate the one way property of f.
A more detailed treatment, as well as a concrete example, can be found in
The Runtime of Learning
the class of functions that can be calculated by small Boolean circuits is not
eﬃciently learnable, even in the realizable case.
The runtime of learning algorithms is asymptotically analyzed as a function of
sis class, our measure of accuracy, our measure of conﬁdence, or the size of the
mented eﬃciently. For example, we derived eﬃcient algorithms for solving the
ERM problem for the class of Boolean conjunctions and the class of axis aligned
rectangles, under the realizability assumption. However, implementing ERM for
perspective, there is no diﬀerence between the realizable and agnostic cases (i.e.,
implementing ERM is hard even in the realizable case, yet the class is eﬃciently
learnable by another algorithm.
Hardness of implementing the ERM rule for several natural hypothesis classes
has motivated the development of alternative learning methods, which we will
discuss in the next part of this book.
Bibliographic Remarks
size of hypotheses in the class. A detailed discussion and thorough bibliographic
learning rule (in the agnostic case) that given a training set of size m, runs
Hint: Use dynamic programming.
Assume that there is a learning algorithm that implements the ERM rule in
the realizable case such that the output hypothesis of the algorithm for each
class Hn only depends on O(n) examples out of the training set. Furthermore,
assume that such a hypothesis can be calculated given these O(n) examples
in time O(n), and that the empirical risk of each such hypothesis can be
evaluated in time O(mn). For example, if Hn is the class of axis aligned
rectangles in Rn, we saw that it is possible to ﬁnd an ERM hypothesis in the
realizable case that is deﬁned by at most 2n examples. Prove that in such
cases, it is possible to ﬁnd an ERM hypothesis for Hn in the unrealizable case
in time O(mn mO(n)).
halfspaces, HSn, for a domain X = Rn. This is the class of all functions of
tationally hard. More precisely, we consider the sequence of problems in
which the dimension n grows linearly and the number of examples m is set
to be some constant times n.
Rm (that is, a system of m linear inequalities in n variables, x = (x1, . . . , xn)),
ﬁnd a subsystem containing as many inequalities as possible that has a solution
(such a subsystem is called feasible).
Show that any algorithm that ﬁnds an ERMHSn hypothesis for any training
size m, n. Hint: Deﬁne a mapping that transforms linear inequalities in n
variables into labeled points in Rn, and a mapping that transforms vectors
in Rn to halfspaces, such that a vector w satisﬁes an inequality q if and
only if the labeled point that corresponds to q is classiﬁed correctly by the
halfspace corresponding to w. Conclude that the problem of empirical risk
time polynomial in the sample size, m, and the Euclidean dimension, n,
then every problem in the class NP can be solved in polynomial time).
halfspaces in Rn. In this exercise, we wish to show that ERMHn
size, m, also grows linearly with n.
Given a graph G = (V, E), and a number k, determine whether there exists a
The Runtime of Learning
k : that is, to prove
that if there is an algorithm that solves the ERMHn
polynomial in k, n, and the sample size m, then there is a polynomial time
Given a graph G = (V, E), let {v1 . . . vn} be the vertices in V . Construct
k that has zero error over S(G)
Use the fact that halfspaces are convex sets to show that it cannot be
true that two vertices that are connected by an edge have the same
zero error over S(G).
Hint: Given a coloring f of the vertices of G, we should come up with k
hyperplanes, h1 . . . hk whose intersection is a perfect classiﬁer for S(G).
alent to hardness of proper PAC learning. Recall that by “properness” of the
algorithm we mean that it must output a hypothesis from the hypothesis
class. To formalize this statement, we ﬁrst need the following deﬁnition.
The complexity class Randomized Polynomial (RP) time
is the class of all decision problems (that is, problems in which on any instance
one has to ﬁnd out whether the answer is YES or NO) for which there exists a
probabilistic algorithm (namely, the algorithm is allowed to ﬂip random coins
while it is running) with these properties:
• On any input instance the algorithm runs in polynomial time in the input
• If the correct answer is NO, the algorithm must return NO.
• If the correct answer is YES, the algorithm returns YES with probability
Clearly the class RP contains the class P. It is also known that RP is
contained in the class NP. It is not known whether any equality holds among
these three complexity classes, but it is widely believed that NP is strictly
solved by a randomized polynomial time algorithm.
• Show that if a class H is properly PAC learnable by a polynomial time
algorithm, then the ERMH problem is in the class RP. In particular, this
class of intersections of halfspaces discussed in the previous exercise),
then, unless NP = RP, there exists no polynomial time proper PAC
learning algorithm for H.
Hint: Assume you have an algorithm A that properly PAC learns a
an algorithm B for solving the ERMH problem in random polynomial
error on S is zero, apply the PAC learning algorithm to the uniform
uniform distribution). Show that the algorithm just described satisﬁes
the requirements for being a RP solver for ERMH.
From Theory to Algorithms
In this chapter we will study the family of linear predictors, one of the most
useful families of hypothesis classes. Many learning algorithms that are being
widely used in practice rely on linear predictors, ﬁrst and foremost because of
the ability to learn them eﬃciently in many cases. In addition, linear predictors
are intuitive, are easy to interpret, and ﬁt the data reasonably well in many
natural learning problems.
We will introduce several hypothesis classes belonging to this family – halfspaces,
vant learning algorithms: linear programming and the Perceptron algorithm for
the class of halfspaces and the Least Squares algorithm for linear regression.
This chapter is focused on learning linear predictors using the ERM approach;
however, in later chapters we will see alternative paradigms for learning these
First, we deﬁne the class of aﬃne functions as
hw,b(x) = ⟨w, x⟩+ b =
It will be convenient also to use the notation
and returns as output the scalar ⟨w, x⟩+ b.
be the sign function, and for regression problems, where Y = R, φ is simply the
It may be more convenient to incorporate b, called the bias, into w as an
Personal use only. Not for distribution. Do not post.
hw,b(x) = ⟨w, x⟩+ b = ⟨w′, x′⟩.
It follows that each aﬃne function in Rd can be rewritten as a homogenous linear
to each input vector. Therefore, whenever it simpliﬁes the presentation, we will
omit the bias term and refer to Ld as the class of homogenous linear functions
of the form hw(x) = ⟨w, x⟩.
Throughout the book we often use the general term “linear functions” for both
aﬃne functions and (homogenous) linear functions.
The ﬁrst hypothesis class we consider is the class of halfspaces, designed for
halfspaces is deﬁned as follows:
To illustrate this hypothesis class geometrically, it is instructive to consider
that are “above” the hyperplane, that is, share an acute angle with w, are labeled
positively. Instances that are “below” the hyperplane, that is, share an obtuse
angle with w, are labeled negatively.
can learn halfspaces using the ERM paradigm, as long as the sample size is
. Therefore, we now discuss how to implement an ERM procedure
able case. In the context of halfspaces, the realizable case is often referred to as
the “separable” case, since it is possible to separate with a hyperplane all the
positive examples from all the negative examples. Implementing the ERM rule
in the nonseparable case (i.e., the agnostic case) is known to be computationally
separable data. The most popular one is to use surrogate loss functions, namely,
to learn a halfspace that does not necessarily minimize the empirical risk with
implemented eﬃciently even in the nonseparable case. We will study surrogate
Linear Programming for the Class of Halfspaces
Linear programs (LP) are problems that can be expressed as maximizing a linear
function subject to linear inequalities. That is,
We will show that the ERM problem for halfspaces in the realizable case can
be expressed as a linear program. For simplicity, we assume the homogenous
case. Let S = {(xi, yi)}m
realizable case, an ERM predictor should have zero errors on the training set.
Equivalently, we are looking for some vector w for which
Let w∗be a vector that satisﬁes this condition (it must exist since we assume
realizability). Deﬁne γ = mini(yi⟨w∗, xi⟩) and let ¯w = w∗
γ . Therefore, for all i
We have thus shown that there exists a vector that satisﬁes
And clearly, such a vector is an ERM predictor.
follows. Set A to be the m × d matrix whose rows are the instances multiplied
by yi. That is, Ai,j = yi xi,j, where xi,j is the j’th element of the vector xi. Let
The LP form requires a maximization objective, yet all the w that satisfy the
constraints are equal candidates as output hypotheses. Thus, we set a “dummy”
Perceptron for Halfspaces
A diﬀerent implementation of the ERM rule is the Perceptron algorithm of
labeled by w(t), namely, an example for which sign(⟨w(t), xi⟩) ̸= yi. Then, the
Perceptron updates w(t) by adding to it the instance xi scaled by the label yi.
Hence, the update of the Perceptron guides the solution to be “more correct” on
input: A training set (x1, y1), . . . , (xm, ym)
The following theorem guarantees that in the realizable case, the algorithm
stops with all sample points correctly classiﬁed.
Assume that (x1, y1), . . . , (xm, ym) is separable, let B = min{∥w∥:
By the deﬁnition of the stopping condition, if the Perceptron stops it
must have separated all the examples. We will show that if the Perceptron runs
Let w⋆be a vector that achieves the minimum in the deﬁnition of B. That is,
The idea of the proof is to show that after performing T iterations, the cosine
RB . That is, we will show that
which will conclude our proof.
while on iteration t, if we update using example (xi, yi) we have that
= ⟨w⋆, yixi⟩= yi⟨w⋆, xi⟩
Therefore, after performing T iterations, we get:
where the last inequality is due to the fact that example i is necessarily such
verge. However, the convergence rate depends on the parameter B, which in
some situations might be exponentially large in d. In such cases, it would be
better to implement the ERM problem by solving a linear program, as described
in the previous section. Nevertheless, for many natural data sets, the size of B
is not too large, and the Perceptron converges quite fast.
The VC Dimension of Halfspaces
To compute the VC dimension of halfspaces, we start with the homogenous case.
The VC dimension of the class of homogenous halfspaces in Rd
First, consider the set of vectors e1, . . . , ed, where for every i the vector
by the class of homogenous halfspaces. Indeed, for every labeling y1, . . . , yd, set
w = (y1, . . . , yd), and then ⟨w, ei⟩= yi for all i.
ﬁrst assume that both of them are nonempty. Then,
which leads to a contradiction. Finally, if J (respectively, I) is empty then the
which still leads to a contradiction.
The VC dimension of the class of nonhomogenous halfspaces in
homogenous halfspaces. But, using the reduction we have shown in the beginning
tween some “explanatory” variables and some real valued outcome. Cast as a
bel set Y is the set of real numbers. We would like to learn a linear function
for example, predicting the weight of a baby as a function of her age and weight
The hypothesis class of linear regression predictors is simply the set of linear
Next we need to deﬁne a loss function for regression. While in classiﬁcation the
deﬁnition of the loss is straightforward, as ℓ(h, (x, y)) simply indicates whether
the former over the latter. We therefore need to deﬁne how much we shall be
“penalized” for the discrepancy between h(x) and y. One common way is to use
For this loss function, the empirical risk function is called the Mean Squared
In the next subsection, we will see how to implement the ERM rule for linear
regression with respect to the squared loss. Of course, there are a variety of other
loss functions that one can use, for example, the absolute value loss function,
ℓ(h, (x, y)) = |h(x) −y|. The ERM rule for the absolute value loss function can
sample complexity of linear regression is by relying on the “discretization trick”
each element of the vector w and the bias b using a ﬁnite number of bits (say
function will be bounded. Later in the book we will describe more rigorous means
to analyze the sample complexity of regression problems.
esis class of linear regression predictors with respect to the squared loss. The
ERM problem with respect to this class, given a training set S, and using the
homogenous version of Ld, is to ﬁnd
To solve the problem we calculate the gradient of the objective function and
compare it to zero. That is, we need to solve
We can rewrite the problem as the problem Aw = b where
If A is invertible then the solution to the ERM problem is
The case in which A is not invertible requires a few standard tools from linear
algebra, which are available in Appendix C. It can be easily shown that if the
training instances do not span the entire space of Rd then A is not invertible.
Nevertheless, we can always ﬁnd a solution to the system Aw = b because b
is in the range of A. Indeed, since A is symmetric we can write it using its
eigenvalue decomposition as A = V DV ⊤, where D is a diagonal matrix and V
is an orthonormal matrix (that is, V ⊤V is the identity d × d matrix). Deﬁne
Let vi denote the i’th column of V . Then, we have
That is, A ˆw is the projection of b onto the span of those vectors vi for which
those vi, and b is in the linear span of the xi, we obtain that A ˆw = b, which
concludes our argument.
Linear Regression for Polynomial Regression Tasks
Some learning tasks call for nonlinear predictors, such as polynomial predictors.
Take, for instance, a one dimensional polynomial function of degree n, that is,
p(x) = a0 + a1x + a2x2 + · · · + anxn
depict a training set that is better ﬁtted using a 3rd degree polynomial predictor
than using a linear predictor.
gression predictors, namely,
where p is a one dimensional polynomial of degree n, parameterized by a vector
of coeﬃcients (a0, . . . , an). Note that X = R, since this is a one dimensional
polynomial, and Y = R, as this is a regression problem.
One way to learn this class is by reduction to the problem of linear regression,
which we have already shown how to solve. To translate a polynomial regression
p(ψ(x)) = a0 + a1x + a2x2 + · · · + anxn = ⟨a, ψ(x)⟩
and we can ﬁnd the optimal vector of coeﬃcients a by using the Least Squares
algorithm as shown earlier.
However, logistic regression is used for classiﬁcation tasks: We can interpret h(x)
the class of linear functions Ld. In particular, the sigmoid function used in logistic
regression is the logistic function, deﬁned as
The hypothesis class is therefore (where for simplicity we are using homogenous
halfspace corresponding to a vector w is sign(⟨w, x⟩). Therefore, the predictions
of the halfspace hypothesis and the logistic hypothesis are very similar whenever
In contrast, the halfspace hypothesis always outputs a deterministic prediction
Next, we need to specify a loss function. That is, we should deﬁne how bad it
Therefore, any reasonable loss function would increase monotonically with
gistic loss function used in logistic regression penalizes hw based on the log of
Therefore, given a training set S = (x1, y1), . . . , (xm, ym), the ERM problem
associated with logistic regression is
The advantage of the logistic loss function is that it is a convex function with
respect to w; hence the ERM problem can be solved eﬃciently using standard
methods. We will study how to learn with convex functions, and in particular
specify a simple algorithm for minimizing convex functions, in later chapters.
ity of a given data set assuming a speciﬁc parametric probability function. We
The family of linear predictors is one of the most useful families of hypothesis
classes, and many learning algorithms that are being widely used in practice
rely on linear predictors. We have shown eﬃcient algorithms for learning linear
to the squared and logistic losses in the unrealizable case. In later chapters we
will present the properties of the loss function that enable eﬃcient learning.
edge, that some linear predictor attains low risk with respect to the underlying
distribution. In the next chapter we show how to construct nonlinear predictors
by composing linear predictors on top of simple classes. This will enable us to
employ linear predictors for a variety of prior knowledge assumptions.
Bibliographic Remarks
absolute value loss function, ℓ(h, (x, y)) = |h(x) −y|, as a linear program;
namely, show how to write the problem
as a linear program.
x1, . . . , xm span Rd.
m, there exist a vector w∗∈Rd (for some appropriate d) and a sequence of
examples {(x1, y1), . . . , (xm, ym)} such that the following hold:
• When running the Perceptron on this sequence of examples it makes m
updates before converging.
Hint: Choose d = m and for every i choose xi = ei.
Hint: Set each xi to be a third dimensional vector of the form (a, b, yi), where
(≤) rather than equalities (=), and ﬁgure out scenarios where the inequality
actually holds with equality.
ceptron will perform the same number of iterations as the vanilla Perceptron
and will converge to a vector that points to the same direction as the output
of the vanilla Perceptron.
(closed) balls in Rd, that is,
that if x1, . . . , xm are shattered by Bd then φ(x1), . . . , φ(xm) are shattered
Boosting is an algorithmic paradigm that grew out of a theoretical question and
became a very practical machine learning tool. The boosting approach uses a
generalization of linear predictors to address two major issues that have been
a sum of approximation error and estimation error. The more expressive the
hypothesis class the learner is searching over, the smaller the approximation
error is, but the larger the estimation error becomes. A learner is thus faced with
the problem of picking a good tradeoﬀbetween these two considerations. The
boosting paradigm allows the learner to have smooth control over this tradeoﬀ.
The learning starts with a basic class (that might have a large approximation
error), and as it progresses the class that the predictor may belong to grows
The second issue that boosting addresses is the computational complexity of
of ﬁnding an ERM hypothesis may be computationally infeasible. A boosting
algorithm ampliﬁes the accuracy of weak learners. Intuitively, one can think of
a weak learner as an algorithm that uses a simple “rule of thumb” to output a
slightly better than a random guess. When a weak learner can be implemented
eﬃciently, boosting provides a tool for aggregating such weak hypotheses to
approximate gradually good predictors for larger, and harder to learn, classes.
rithm, AdaBoost (a shorthand for Adaptive Boosting). The AdaBoost algorithm
outputs a hypothesis that is a linear combination of simple hypotheses. In other
words, AdaBoost relies on the family of hypothesis classes obtained by composing
a linear predictor on top of simple classes. We will show that AdaBoost enables
us to control the tradeoﬀbetween the approximation and estimation errors by
varying a single parameter.
AdaBoost demonstrates a general theme, that will recur later in the book, of
expanding the expressiveness of linear predictors by composing them on top of
AdaBoost stemmed from the theoretical question of whether an eﬃcient weak
learner can be “boosted” into an eﬃcient strong learner. This question was raised
Personal use only. Not for distribution. Do not post.
a graduate student at MIT. However, the proposed mechanism was not very
algorithm, which was the ﬁrst truly practical implementation of boosting. This
simple and elegant algorithm became hugely popular, and Freund and Schapire’s
work has been recognized by numerous awards.
Furthermore, boosting is a great example for the practical impact of learning
theory. While boosting originated as a purely theoretical problem, it has led to
popular and widely used algorithms. Indeed, as we shall demonstrate later in
this chapter, AdaBoost has been successfully used for learning to detect faces in
holds with respect to H, D, f, then when running the learning algorithm on
learnable class can be learned using any ERM algorithm. However, the deﬁnition
of PAC learning and the fundamental theorem of learning theory ignores the
are cases in which implementing the ERM rule is computationally hard (even in
the realizable case).
However, perhaps we can trade computational hardness with the requirement
for accuracy. Given a distribution D and a target labeling function f, maybe there
exists an eﬃciently computable learning algorithm whose error is just slightly
better than a random guess? This motivates the following deﬁnition.
assumption holds with respect to H, D, f, then when running the learning
the algorithm returns a hypothesis h such that, with probability of at least
This deﬁnition is almost identical to the deﬁnition of PAC learning, which
here we will call strong learning, with one crucial diﬀerence: Strong learnability
implies the ability to ﬁnd an arbitrarily good classiﬁer (with error rate at most
rate is slightly better than what a random labeling would give us. The hope is
that it may be easier to come up with eﬃcient weak learners than with eﬃcient
(full) PAC learners.
class H has a VC dimension d, then the sample complexity of PAC learning H
, where C1 is a constant. Applying this with
This implies that from the statistical perspective (i.e., if we ignore computational
complexity), weak learnability is also characterized by the VC dimension of H
and therefore is just as hard as PAC (strong) learning. However, when we do
consider computational complexity, the potential advantage of weak learning is
that maybe there is an algorithm that satisﬁes the requirements of weak learning
and can be implemented eﬃciently.
One possible approach is to take a “simple” hypothesis class, denoted B, and
to apply ERM with respect to B as the weak learning algorithm. For this to
work, we need that B will satisfy two requirements:
• ERMB is eﬃciently implementable.
• For every sample that is labeled by some hypothesis from H, any ERMB
Then, the immediate question is whether we can boost an eﬃcient weak learner
into an eﬃcient strong learner. In the next section we will show that this is
indeed possible, but before that, let us show an example in which eﬃcient weak
learnability of a class H is possible using a base hypothesis class B.
To see that, we ﬁrst show that for every distribution that is consistent with
every classiﬁer in H consists of three regions (two unbounded rays and a center
interval) with alternate labels. For any pair of such regions, there exists a decision
stump that agrees with the labeling of these two components. Note that for every
distribution D over R and every partitioning of the line into three such regions,
error hypothesis. A decision stump that disagrees with h only on such a region
We see that ERMB is a γ-weak learner for H. We next show how to implement
the ERM rule eﬃciently for decision stumps.
Eﬃcient Implementation of ERM for Decision Stumps
Let X = Rd and consider the base hypothesis class of decision stumps over Rd,
We will show how to implement an ERM rule, namely, how to ﬁnd a decision
stump that minimizes LS(h). Furthermore, since in the next section we will
show that AdaBoost requires ﬁnding a hypothesis with a small risk relative to
some distribution over S, we will show here how to minimize such risk functions.
Concretely, let D be a probability vector in Rm (that is, all elements of D are
have to calculate a sum over m examples; therefore the runtime of this approach
would be O(dm2). We next show a simple trick that enables us to minimize the
objective in time O(dm).
The observation is as follows. Suppose we have calculated the objective for
in which we sort the examples with respect to each coordinate, the minimization
problem can be performed in time O(dm). This yields the following pseudocode.
ERM for Decision Stumps
training set S = (x1, y1), . . . , (xm, ym)
distribution vector D
sort S using the j’th coordinate, and denote
AdaBoost (short for Adaptive Boosting) is an algorithm that has access to a
weak learner and ﬁnds a hypothesis with a low empirical risk. The AdaBoost
algorithm receives as input a training set of examples S = (x1, y1), . . . , (xm, ym),
where for each i, yi = f(xi) for some labeling function f. The boosting process
proceeds in a sequence of consecutive rounds. At round t, the booster ﬁrst deﬁnes
a distribution over the examples in S, denoted D(t). That is, D(t) ∈Rm
to the weak learner. (That way, the weak learner can construct i.i.d. examples
according to D(t) and f.) The weak learner is assumed to return a “weak”
hypothesis, ht, whose error,
That is, the weight of ht is inversely proportional to the error of ht. At the end
of the round, AdaBoost updates the distribution so that examples on which ht
errs will get a higher probability mass while examples on which ht is correct will
get a lower probability mass. Intuitively, this will force the weak learner to focus
on the problematic examples in the next round. The output of the AdaBoost
algorithm is a “strong” classiﬁer that is based on a weighted sum of all the weak
hypotheses. The pseudocode of AdaBoost is presented in the following.
training set S = (x1, y1), . . . , (xm, ym)
invoke weak learner ht = WL(D(t), S)
output the hypothesis hs(x) = sign
The following theorem shows that the training error of the output hypothesis
decreases exponentially fast with the number of boosting rounds.
Let S be a training set and assume that at each iteration of
the training error of the output hypothesis of AdaBoost is at most
For each t, denote ft = P
is fT . In addition, denote
that for every round t,
To do so, we ﬁrst note that using a simple inductive argument, for all t and i,
Each iteration of AdaBoost involves O(m) operations as well as a single call to
the weak learner. Therefore, if the weak learner can be implemented eﬃciently
(as happens in the case of ERM with respect to decision stumps) then the total
training process will be eﬃcient.
the union bound, the probability that the weak learner will not fail at all of the
distributions over the training set, in many cases we can implement the weak
case, for example, in the weak learner that ﬁnds the minimum value of LD(h)
for decision stumps, as described in the previous section.
AdaBoost goes to zero as T grows. However, what we really care about is the
true risk of the output hypothesis. To argue about the true risk, we note that the
output of AdaBoost is in fact a composition of a halfspace over the predictions
of the T weak hypotheses constructed by the weak learner. In the next section
we show that if the weak hypotheses come from a base hypothesis class of low
true risk of the output of AdaBoost would not be very far from its empirical risk.
Linear Combinations of Base Hypotheses
As mentioned previously, a popular approach for constructing a weak learner
is to apply the ERM rule with respect to a base hypothesis class (e.g., ERM
over decision stumps). We have also seen that boosting outputs a composition
of a halfspace over the predictions of the weak hypotheses. Therefore, given a
base hypothesis class B (e.g., decision stumps), the output of AdaBoost will be
a member of the following class:
tained by ﬁrst applying the T base hypotheses to construct the vector ψ(x) =
(h1(x), . . . , hT (x)) ∈RT , and then applying the (homogenous) halfspace deﬁned
In this section we analyze the estimation error of L(B, T) by bounding the
aBoost grows linearly with T. On the other hand, the empirical risk of AdaBoost
decreases with T. In fact, as we demonstrate later, T can be used to decrease
the approximation error of L(B, T). Therefore, the parameter T of AdaBoost
To demonstrate how the expressive power of L(B, T) increases with T, consider
the simple example, in which X = R and the base class is Decision Stumps,
mogenous) halfspaces on R.
Now, let H be the rather complex class (compared to halfspaces on the line)
yields a more expressive hypothesis class but on the other hand might increase
dimension of L(B, T) for any base class B.
by ˜O(VCdim(B) T) (the ˜O notation ignores constants and logarithmic factors).
chotomies (i.e., labelings) induced by B over C. Therefore, we need to choose
dichotomies we can construct is upper bounded by
that C is shattered, we must have that the preceding is at least 2m, which yields
which concludes our proof.
recognition. The value of g for type A or B is the diﬀerence between the sum of the
pixels within two rectangular regions. These regions have the same size and shape and
are horizontally or vertically adjacent. For type C, the value of g is the sum within
two outside rectangles subtracted from the sum in a center rectangle. For type D, we
compute the diﬀerence between diagonal pairs of rectangles.
AdaBoost for Face Recognition
We now turn to a base hypothesis that has been proposed by Viola and Jones for
the task of face recognition. In this task, the instance space is images, represented
as matrices of gray level values of pixels. To be concrete, let us take images of
given an image as input, should output whether the image is of a human face or
Each hypothesis in the base class is of the form h(x) = f(g(x)), where f is a
to a scalar. Each function g is parameterized by
To calculate g we stretch the mask t to ﬁt the rectangle R and then calculate
the sum of the pixels (that is, sum of their gray level values) that lie within the
red rectangles and subtract it from the sum of pixels in the blue rectangles.
weak learner for the base hypothesis class by ﬁrst calculating all the possible
outputs of g on each image, and then apply the weak learner of decision stumps
described in the previous subsection. It is possible to perform the ﬁrst step very
and then overlayed on a typical training face in the bottom row. The ﬁrst feature measures the difference in
intensity between the region of the eyes and a region across the upper cheeks. The feature capitalizes on the
observation that the eye region is often darker than the cheeks. The second feature compares the intensities
in the eye regions to the intensity across the bridge of the nose.
directly increases computation time.
The Attentional Cascade
tion performance while radically reducing computation time. The key insight is that smaller, and therefore
before more complex classiﬁers are called upon to achieve low false positive rates.
imize false negatives. The initial AdaBoost threshold,
, is designed to yield a low error rate on
the training data. A lower threshold yields higher detection rates and higher false positive rates. Based on
cessing with very few operations:
Viola and Jones. The two features are shown in the top row and then overlaid on a
typical training face in the bottom row. The ﬁrst feature measures the diﬀerence in
intensity between the region of the eyes and a region across the upper cheeks. The
feature capitalizes on the observation that the eye region is often darker than the
cheeks. The second feature compares the intensities in the eye regions to the intensity
across the bridge of the nose.
eﬃciently by a preprocessing step in which we calculate the integral image of
running it with the base features proposed by Viola and Jones.
Boosting is a method for amplifying the accuracy of weak learners. In this chapter
we described the AdaBoost algorithm. We have shown that after T iterations of
AdaBoost, it returns a hypothesis from the class L(B, T), obtained by composing
a linear classiﬁer on T hypotheses from a base class B. We have demonstrated
how the parameter T controls the tradeoﬀbetween approximation and estimation
errors. In the next chapter we will study how to tune parameters such as T, based
Bibliographic Remarks
As mentioned before, boosting stemmed from the theoretical question of whether
an eﬃcient weak learner can be “boosted” into an eﬃcient strong learner (Kearns
Boosting can be viewed from many perspectives. In the purely theoretical
context, AdaBoost can be interpreted as a negative result: If strong learning of
a hypothesis class is computationally hard, so is weak learning of this class. This
negative result can be useful for showing hardness of agnostic PAC learning of
a class B based on hardness of PAC learning of some other class H, as long as
shown that PAC learning of the class of intersection of halfspaces is hard (even
in the realizable case). This hardness result can be used to show that agnostic
for a single halfspace can yield a weak learner for the class of intersection of
halfspaces, and since such a weak learner can be boosted, we will obtain a strong
learner for the class of intersection of halfspaces.
AdaBoost also shows an equivalence between the existence of a weak learner
and separability of the data using a linear classiﬁer over the predictions of base
hypotheses. This result is closely related to von Neumann’s minimax theorem
AdaBoost is also related to the concept of margin, which we will study later on
of research that this ﬁeld has produced.
Suggest a procedure that relies on A and learns H in the usual agnostic
PAC learning model and has a sample complexity of
stant function deﬁned according to the same thresholds as h.
mechanism to “force” the weak learner to focus on the problematic examples
in the next iteration. In this question we will ﬁnd some rigorous justiﬁcation
We proved an upper bound of O(dT log(dT)), where d = VCdim(B). Here we
wish to prove an almost matching lower bound. However, that will not be the
case for all classes B.
VCdim(L(B, T)). Find a class B for which VCdim(B) = VCdim(L(B, T))
Hint: Take X to be a ﬁnite set.
• For the lower bound, assume d = 2k. Let A be a k × d matrix whose
a set of k vectors in Rd. Show that this set is shattered by decision
Hint: Construct a set of T
from the previous question, and the rows of the matrices 2A, 3A, 4A, . . . , T
Show that the resulting set is shattered by L(Bd, T).
image of A, denoted by I(A), is the matrix B such that Bi,j = P
• Show that I(A) can be calculated from A in time linear in the size of A.
• Show how every Viola and Jones feature can be calculated from I(A) in a
constant amount of time (that is, the runtime does not depend on the
size of the rectangle deﬁning the feature).
Model Selection and Validation
In the previous chapter we have described the AdaBoost algorithm and have
oﬀ. But, how do we set T in practice? More generally, when approaching some
practical problem, we usually can think of several algorithms that may yield a
good solution, each of which might have several parameters. How can we choose
the best algorithm for the particular problem at hand? And how do we set the
algorithm’s parameters? This task is often called model selection.
To illustrate the model selection task, consider the problem of learning a one
set as depicted in the ﬁgure.
However, we might be uncertain regarding which degree d would give the best
results for our data set: A small degree may not ﬁt the data well (i.e., it will
have a large approximation error), whereas a high degree may lead to overﬁtting
(i.e., it will have a large estimation error). In the following we depict the result
risk decreases as we enlarge the degree. However, looking at the graphs, our
It follows that the empirical risk alone is not enough for model selection.
Personal use only. Not for distribution. Do not post.
In this chapter we will present two approaches for model selection. The ﬁrst
approach is based on the Structural Risk Minimization (SRM) paradigm we
tradeoﬀ(such as the degree of the ﬁtted polynomial in the preceding example
or the parameter T in AdaBoost). The second approach relies on the concept
of validation. The basic idea is to partition the training set into two sets. One
is used for training each of the candidate models, and the second is used for
deciding which of them yields the best results.
mation and estimation errors. More generally, if our learning algorithm fails to
ﬁnd a predictor with a small risk, it is important to understand whether we
Model Selection Using SRM
show how SRM can be used for tuning the tradeoﬀbetween bias and complexity
without deciding on a speciﬁc hypothesis class in advance. Consider a countable
sequence of hypothesis classes H1, H2, H3, . . .. For example, in the problem of
polynomial regression mentioned, we can take Hd to be the set of polynomials
of degree at most d. Another example is taking Hd to be the class L(B, d) used
by AdaBoost, as described in the previous chapter.
We assume that for every d, the class Hd enjoys the uniform convergence
of the class Hd multiplied by a universal constant (the one appearing in the
by AdaBoost, the function g will simply grow with d.
Recall that the SRM rule follows a “bound minimization” approach, where in
Model Selection and Validation
and a complexity term that depends on d. The SRM rule will search for d and
Getting back to the example of polynomial regression described earlier, even
though the empirical risk of the 10th degree polynomial is smaller than that of
the 3rd degree polynomial, we would still prefer the 3rd degree polynomial since
its complexity (as reﬂected by the value of the function g(d)) is much smaller.
While the SRM approach can be useful in some situations, in many practical
we present a more practical approach.
dictor of a learning algorithm. So far we have derived bounds on the estimation
error of a hypothesis class, which tell us that for all hypotheses in the class, the
true risk is not very far from the empirical risk. However, these bounds might be
tributions. A more accurate estimation of the true risk can be obtained by using
some of the training data as a validation set, over which one can evalutate the
success of the algorithm’s output predictor. This procedure is called validation.
Naturally, a better estimation of the true risk is useful for model selection, as
ditional set of examples, independent of the training set, and using the empirical
error on this validation set as our estimator. Formally, let V = (x1, y1), . . . , (xmv, ymv)
be a set of fresh mv examples that are sampled according to D (independently of
we have the following:
Let h be some predictor and assume that the loss function is in
of a validation set V of size mv we have
set used to construct h and is tighter than the usual bounds that we have seen so
far. The reason for the tightness of this bound is that it is in terms of an estimate
on a fresh validation set that is independent of the way h was generated. To
illustrate this point, suppose that h was obtained by applying an ERM predictor
Therefore, taking mv to be order of m, we obtain an estimate that is more
price we pay for using such an estimate is that it requires an additional sample
on top of the sample used for training the learner.
Sampling a training set and then sampling an independent validation set is
equivalent to randomly partitioning our random set of examples into two parts,
using one part for training and the other one for validation. For this reason, the
validation set is often referred to as a hold out set.
Validation for Model Selection
Validation can be naturally used for model selection as follows. We ﬁrst train
diﬀerent algorithms (or the same algorithm with diﬀerent parameters) on the
given training set. Let H = {h1, . . . , hr} be the set of all output predictors of the
diﬀerent algorithms. For example, in the case of training polynomial regressors,
we would have each hr be the output of polynomial regression of degree r. Now,
to choose a single predictor from H we sample a fresh validation set and choose
the predictor that minimizes the error over the validation set. In other words,
we apply ERMH over the validation set.
This process is very similar to learning a ﬁnite hypothesis class. The only
ing set. However, since the validation set is independent of the training set we
get that it is also independent of H and therefore the same technique we used
to derive bounds for ﬁnite hypothesis classes holds here as well. In particular,
Let H = {h1, . . . , hr} be an arbitrary set of predictors and
Model Selection and Validation
This theorem tells us that the error on the validation set approximates the
true error as long as H is not too large. However, if we try too many methods
(resulting in |H| that is large relative to the size of the validation set) then we’re
in danger of overﬁtting.
To illustrate how validation is useful for model selection, consider again the
example of ﬁtting a one dimensional polynomial as described in the beginning
of this chapter. In the following we depict the same training set, with ERM
error, and hence it will be chosen as the best model.
tion of the complexity of the model considered. For example, for the polynomial
ﬁtting problem mentioned previously, the curve will look like:
As can be shown, the training error is monotonically decreasing as we increase
the polynomial degree (which is the complexity of the model in our case). On
the other hand, the validation error ﬁrst decreases but then starts to increase,
which indicates that we are starting to suﬀer from overﬁtting.
Plotting such curves can help us understand whether we are searching the
correct regime of our parameter space. Often, there may be more than a single
parameter to tune, and the possible number of values each parameter can take
regularization, in which the parameter of the learning algorithm is a real number.
In such cases, we start with a rough grid of values for the parameter(s) and plot
in to the correct regime and employ a ﬁner grid to search over. It is important to
verify that we are in the relevant regime. For example, in the polynomial ﬁtting
and do not employ a ﬁner grid based on the resulting curve, we will end up with
a rather poor model.
The validation procedure described so far assumes that data is plentiful and that
we have the ability to sample a fresh validation set. But in some applications,
cross validation technique is designed to give an accurate estimate of the true
error without wasting too much data.
the algorithm is trained on the union of the other folds and then the error of its
output is estimated using the fold. Finally, the average of all these errors is the
Model Selection and Validation
estimate of the true error. The special case k = m, where m is the number of
and once the best parameter is chosen, the algorithm is retrained using this
for model selection is given in the following. The procedure receives as input a
training set, S, a set of possible parameter values, Θ, an integer, k, representing
the number of folds, and a learning algorithm, A, which receives as input a
as the hypothesis trained by this parameter on the entire training set.
training set S = (x1, y1), . . . , (xm, ym)
set of parameter values Θ
learning algorithm A
partition S into S1, S2, . . . , Sk
The cross validation method often works very well in practice. However, it
orously understanding the exact behavior of cross validation is still an open
dure gives a very good estimate of the true error. Other papers show that cross
validation works for stable algorithms (we will study stability and its relation to
In most practical applications, we split the available examples into three sets.
The ﬁrst set is used for training our algorithm and the second is used as a
validation set for model selection. After we select the best model, we test the
performance of the output predictor on the third set, which is often called the
“test set.” The number obtained is used as an estimator of the true error of the
What to Do If Learning Fails
eters. You used a validation set to tune the parameters and tested the learned
factory. What went wrong then, and what should you do next?
There are many elements that can be “ﬁxed.” The main approaches are listed
• Get a larger sample
• Change the hypothesis class by:
– Completely changing it
– Changing the parameters you consider
• Change the feature representation of the data
• Change the optimization algorithm used to apply your learning rule
In order to ﬁnd the best remedy, it is essential ﬁrst to understand the cause
ror of the learned predictor into approximation error and estimation error. The
while the estimation error is deﬁned to be LD(hS) −LD(h⋆), where hS is the
learned predictor (which is based on the training set S).
The approximation error of the class does not depend on the sample size or
on the algorithm being used. It only depends on the distribution D and on the
hypothesis class H. Therefore, if the approximation error is large, it will not help
us to enlarge the training set size, and it also does not make sense to reduce the
hypothesis class. What can be beneﬁcial in this case is to enlarge the hypothesis
class or completely change it (if we have some alternative prior knowledge in
the form of a diﬀerent hypothesis class). We can also consider applying the
same hypothesis class but on a diﬀerent feature representation of the data (see
The estimation error of the class does depend on the sample size. Therefore, if
we have a large estimation error we can make an eﬀort to obtain more training
examples. We can also consider reducing the hypothesis class. However, it doesn’t
make sense to enlarge the hypothesis class in that case.
Error Decomposition Using Validation
We see that understanding whether our problem is due to approximation error
or estimation error is very useful for ﬁnding the best remedy. In the previous
section we saw how to estimate LD(hS) using the empirical risk on a validation
set. However, it is more diﬃcult to estimate the approximation error of the class.
Model Selection and Validation
Instead, we give a diﬀerent error decomposition, one that can be estimated from
the train and validation sets.
LD(hS) = (LD(hS) −LV (hS)) + (LV (hS) −LS(hS)) + LS(hS).
that our algorithm suﬀers from “overﬁtting” while when the empirical risk term,
LS(hS), is large we say that our algorithm suﬀers from “underﬁtting.” Note that
proximation errors. To illustrate this, consider the case in which H is a class of
risk, LS(hS), and the approximation error, LD(h⋆), can be signiﬁcantly diﬀerent.
Nevertheless, as we show later, the values of LS(hS) and (LV (hS)−LS(hS)) still
provide us useful information.
Consider ﬁrst the case in which LS(hS) is large. We can write
LS(hS) = (LS(hS) −LS(h⋆)) + (LS(h⋆) −LD(h⋆)) + LD(h⋆).
since h⋆does not depend on S, the term (LS(h⋆)−LD(h⋆)) can be bounded quite
that if LS(hS) is large then so is the approximation error, and the remedy to the
failure of our algorithm should be tailored accordingly (as discussed previously).
It is possible that the approximation error of our class is small,
yet the value of LS(hS) is large. For example, maybe we had a bug in our ERM
implementation, and the algorithm returns a hypothesis hS that is not an ERM.
It may also be the case that ﬁnding an ERM hypothesis is computationally hard,
and our algorithm applies some heuristic trying to ﬁnd an approximate ERM. In
some cases, it is hard to know how good hS is relative to an ERM hypothesis. But,
sometimes it is possible at least to know whether there are better hypotheses.
For example, in the next chapter we will study convex learning problems in
which there are optimality conditions that can be checked to verify whether
our optimization algorithm converged to an ERM solution. In other cases, the
solution may depend on randomness in initializing the algorithm, so we can try
diﬀerent randomly selected initial points to see whether better solutions pop out.
Next consider the case in which LS(hS) is small. As we argued before, this
does not necessarily imply that the approximation error is small. Indeed, consider
two scenarios, in both of which we are trying to learn a hypothesis class of
training set of m < d examples and the approximation error of the class is high.
In the second scenario, we have a training set of m > 2d examples and the
scenario in which the number of examples is always smaller than the VC dimension of
the class. Right: This learning curve corresponds to the scenario in which the
approximation error is zero and the number of examples is larger than the VC
dimension of the class.
distinguish between the two cases?
One possible way to distinguish between the two cases is by plotting learning
curves. To produce a learning curve we train the algorithm on preﬁxes of the
data of increasing sizes. For example, we can ﬁrst train the algorithm on the
calculate the training error (on the preﬁx the algorithm is being trained on)
and the validation error (on a predeﬁned validation set). Such learning curves
can help us distinguish between the two aforementioned scenarios. In the ﬁrst
as we didn’t really learn anything. In the second scenario the validation error
will start as a constant but then should start decreasing (it must start decreasing
In general, as long as the approximation error is greater than zero we expect
the training error to grow with the sample size, as a larger amount of data points
makes it harder to provide an explanation for all of them. On the other hand,
the validation error tends to decrease with the increase in sample size. If the
train errors converge to the approximation error. Therefore, by extrapolating
imation error, or at least to get a rough estimate on an interval in which the
approximation error resides.
Getting back to the problem of ﬁnding the best remedy for the failure of
our algorithm, if we observe that LS(hS) is small while the validation error is
large, then in any case we know that the size of our training set is not suﬃcient
for learning the class H. We can then plot a learning curve. If we see that the
Model Selection and Validation
validation error is starting to decrease then the best solution is to increase the
number of examples (if we can aﬀord to enlarge the data). Another reasonable
solution is to decrease the complexity of the hypothesis class. On the other hand,
that the approximation error of H is good. It may be the case that increasing
the training set size will not help us at all. Obtaining more data can still help
us, as at some point we can see whether the validation error starts to decrease
or whether the training error starts to increase. But, if more data is expensive,
it may be better ﬁrst to try to reduce the complexity of the hypothesis class.
To summarize the discussion, the following steps should be applied:
completely change it, or change the feature representation of the data.
whether the problem is estimation error or approximation error.
If this is not possible, consider reducing the complexity of the hypothesis class.
pothesis class or the feature representation of the data completely.
Model selection is the task of selecting an appropriate model for the learning
task based on the data itself. We have shown how this can be done using the
SRM learning paradigm or using the more practical approach of validation. If
our learning algorithm fails, a decomposition of the algorithm’s error should be
performed using learning curves, so as to ﬁnd the best remedy.
examples and you would like to learn the class H = ∪k
alternative approaches:
• Learn H on the m examples using the ERM rule
α)m training examples using the ERM rule with respect to Hi, and let
ˆh1, . . . , ˆhk be the resulting hypotheses. Second, apply the ERM rule with
respect to the ﬁnite class {ˆh1, . . . , ˆhk} on the αm validation examples.
Describe scenarios in which the ﬁrst method is better than the second and
Convex Learning Problems
In this chapter we introduce convex learning problems. Convex learning comprises
an important family of learning problems, mainly because most of what we can
learn eﬃciently falls into it. We have already encountered linear regression with
the squared loss and logistic regression, which are convex problems, and indeed
they can be learned eﬃciently. We have also seen nonconvex problems, such as
in the unrealizable case.
In general, a convex learning problem is a problem whose hypothesis class is a
gin the chapter with some required deﬁnitions of convexity. Besides convexity, we
will deﬁne Lipschitzness and smoothness, which are additional properties of the
loss function that facilitate successful learning. We next turn to deﬁning convex
learning problems and demonstrate the necessity for further constraints such as
Boundedness and Lipschitzness or Smoothness. We deﬁne these more restricted
problems are learnable. These claims will be proven in the next two chapters, in
which we will present two learning paradigms that successfully learn all problems
by minimizing “surrogate” loss functions that are convex (instead of the original
nonconvex loss function). Surrogate convex loss functions give rise to eﬃcient
solutions but might increase the risk of the learned predictor.
Convexity, Lipschitzness, and Smoothness
A set C in a vector space is convex if for any
two vectors u, v in C, the line segment between u and v is contained in C. That
Examples of convex and nonconvex sets in R2 are given in the following. For
the nonconvex sets, we depict two points in the set such that the line between
the two points is not contained in the set.
Personal use only. Not for distribution. Do not post.
Let C be a convex set. A function f :
In words, f is convex if for any u, v, the graph of f between u and v lies below
the line segment joining f(u) and f(v). An illustration of a convex function,
The epigraph of a function f is the set
epigraph(f) = {(x, β) : f(x) ≤β}.
It is easy to verify that a function f is convex if and only if its epigraph is a
epigraph, is given in the following.
Convex Learning Problems
An important property of convex functions is that every local minimum of the
function is also a global minimum. Formally, let B(u, r) = {v : ∥v −u∥≤r} be
a ball of radius r centered around u. We say that f(u) is a local minimum of f
such that u + α(v −u) ∈B(u, r) and therefore
f(u) ≤f(u + α(v −u)) .
If f is convex, we also have that
Combining these two equations and rearranging terms, we conclude that f(u) ≤
f(v). Since this holds for every v, it follows that f(u) is also a global minimum
Another important property of convex functions is that for every w we can
construct a tangent to f at w that lies below f everywhere. If f is diﬀerentiable,
this tangent is the linear function l(u) = f(w) + ⟨∇f(w), u −w⟩, where ∇f(w)
is the gradient of f at w, namely, the vector of partial derivatives of f, ∇f(w) =
. That is, for convex diﬀerentiable functions,
f(u) ≥f(w) + ⟨∇f(w), u −w⟩.
f(w) + ⟨u −w, ∇f(w)⟩
If f is a scalar diﬀerentiable function, there is an easy way to check if it is
f ′, f ′′ be its ﬁrst and second derivatives, respectively. Then, the following are
• The scalar function f(x) = x2 is convex. To see this, note that f ′(x) = 2x
since the exponent function is a monotonically increasing function.
The following claim shows that the composition of a convex scalar function
where the last inequality follows from the convexity of g.
Convex Learning Problems
linear function, and hence f is a convex function.
Finally, the following lemma shows that the maximum of convex functions is
convex and that a weighted sum of convex functions, with nonnegative weights,
following functions from Rd to R are also convex.
The ﬁrst claim follows by
For the second claim
The function g(x) = |x| is convex. To see this, note that g(x) =
max{x, −x} and that both the function f1(x) = x and f2(x) = −x are convex.
The deﬁnition of Lipschitzness below is with respect to the Euclidean norm over
Rd. However, it is possible to deﬁne Lipschitzness with respect to any norm.
is diﬀerentiable, then by the mean value theorem we have
f(w1) −f(w2) = f ′(u)(w1 −w2) ,
where u is some point between w1 and w2. It follows that if the derivative of f
is everywhere bounded (in absolute value) by ρ, then the function is ρ-Lipschitz.
inequality: For every x1, x2,
|x1| −|x2| = |x1 −x2 + x2| −|x2| ≤|x1 −x2| + |x2| −|x2| = |x1 −x2|.
Since this holds for both x1, x2 and x2, x1, we obtain that ||x1| −|x2|| ≤
• The function f(x) = x2 is not ρ-Lipschitz over R for any ρ. To see this, take
|f(w1) −f(w2)| = |⟨v, w1 −w2⟩| ≤∥v∥∥w1 −w2∥.
The following claim shows that composition of Lipschitz functions preserves
Lipschitz. Then, f is (ρ1ρ2)-Lipschitz. In particular, if g2 is the linear function,
|f(w1) −f(w2)| = |g1(g2(w1)) −g1(g2(w2))|
Convex Learning Problems
The deﬁnition of a smooth function relies on the notion of gradient. Recall that
vector of partial derivatives of f, namely, ∇f(w) =
smooth if its gradient is β-Lipschitz; namely, for all v, w we have ∥∇f(v) −
It is possible to show that smoothness implies that for all v, w we have
f(v) ≤f(w) + ⟨∇f(w), v −w⟩+ β
Recall that convexity of f implies that f(v) ≥f(w)+⟨∇f(w), v−w⟩. Therefore,
when a function is both convex and smooth, we have both upper and lower
bounds on the diﬀerence between the function and its ﬁrst order approximation.
ranging terms, we obtain
The following claim shows that a composition of a smooth scalar function over
a linear function preserves smoothness.
By the chain rule we have that ∇f(w) = g′(⟨w, x⟩+ b)x, where g′ is the
≤g(⟨w, x⟩+ b) + g′(⟨w, x⟩+ b)⟨v −w, x⟩+ β
≤g(⟨w, x⟩+ b) + g′(⟨w, x⟩+ b)⟨v −w, x⟩+ β
Convex Learning Problems
instance space and a target space, Z = X ×Y, and H being a set of functions from
X to Y. However, H can be an arbitrary set. Indeed, throughout this chapter,
we consider hypothesis classes H that are subsets of the Euclidean space Rd.
a hypothesis in H by w. Now we can ﬁnally deﬁne convex learning problems:
A learning problem, (H, Z, ℓ),
loss function, ℓ(·, z), is a convex function (where, for any z, ℓ(·, z) denotes the
regression is a tool for modeling the relationship between some “explanatory”
is a subset of Rd, for some d, and the label set Y is the set of real numbers.
equivalently model the learning problem as a convex learning problem as follows.
Convex Learning Problems
H to be the set of all such parameters, namely, H = Rd. The set of examples is
Clearly, the set H is a convex set. The loss function is also convex with respect
If ℓis a convex loss function and the class H is convex, then the
tion problem (that is, a problem of minimizing a convex function over a convex
Recall that the ERMH problem is deﬁned by
Since, for a sample S = z1, . . . , zm, for every w, LS(w) =
is a problem of minimizing a convex function subject to the constraint that the
solution should be in a convex set.
Under mild conditions, such problems can be solved eﬃciently using generic
simple algorithm for minimizing convex functions.
Learnability of Convex Learning Problems
We have argued that for many cases, implementing the ERM rule for convex
learning problems can be done eﬃciently. But is convexity a suﬃcient condition
for the learnability of a problem?
To make the quesion more speciﬁc: In VC theory, we saw that halfspaces in
using the “discretization trick” that if the problem is of d parameters, it is
learnable with a sample complexity being a function of d. That is, for a constant
d, the problem should be learnable. So, maybe all convex learning problems over
all convex learning problems over Rd are learnable. There is no contradiction
to VC theory since VC theory only deals with binary classiﬁcation while here
we consider a wide family of problems. There is also no contradiction to the
“discretization trick” as there we assumed that the loss function is bounded and
also assumed that a representation of each parameter using a ﬁnite number of
bits suﬃces. As we will show later, under some additional restricting conditions
that hold in many practical scenarios, convex problems are learnable.
contradiction, that A is a successful PAC learner for this problem. That is, there
deﬁne two distributions, and will show that A is likely to fail on at least one
supported entirely on z2.
Observe that for both distributions, the probability that all examples of the
D2, whereas for D1, the probability of this event is
Since we assume that A is a deterministic algorithm, upon receiving a training
A there exists a distribution on which A fails, which implies that the problem is
esis class. In addition to the convexity requirement, we require that H will be
bounded; namely, we assume that for some predeﬁned scalar B, every hypothesis
Boundedness and convexity alone are still not suﬃcient for ensuring that the
problem is learnable, as the following example demonstrates.
simplicity. A slightly more involved argument will show that nondeterministic algorithms
will also fail to learn the problem.
Convex Learning Problems
hypothesis class. It is easy to verify that H is convex. The argument will be
distribution to be D1 and have that
This example shows that we need additional assumptions on the learning
problem, and this time the solution is in Lipschitzness or smoothness of the
loss function. This motivates a deﬁnition of two families of learning problems,
the following holds:
that the instances are in a ball of radius ρ and we restrict the hypotheses to be
homogenous linear functions deﬁned by a vector w whose norm is bounded by
the following holds:
Note that we also required that the loss function is nonnegative. This is needed
corresponds to a regression problem with the squared loss, where we assume that
homogenous linear functions deﬁned by a vector w whose norm is bounded by B.
We claim that these two families of learning problems are learnable. That is,
the properties of convexity, boundedness, and Lipschitzness or smoothness of the
loss function are suﬃcient for learnability. We will prove this claim in the next
chapters by introducing algorithms that learn these problems successfully.
Surrogate Loss Functions
As mentioned, and as we will see in the next chapters, convex problems can
be learned eﬀﬁciently. However, in many cases, the natural loss function is not
convex and, in particular, implementing the ERM rule is hard.
This loss function is not convex with respect to w and indeed, when trying to
minimize the empirical risk with respect to this loss function we might encounter
To circumvent the hardness result, one popular approach is to upper bound
the nonconvex loss function by a convex surrogate loss function. As its name
indicates, the requirements from a convex surrogate loss are as follows:
Convex Learning Problems
Once we have deﬁned the surrogate convex loss, we can learn the problem with
respect to it. The generalization requirement from a hinge loss learner will have
(w) = E(x,y)∼D[ℓhinge(w, (x, y))]. Using the surrogate property, we
(A(S)), which yields
We can further rewrite the upper bound as follows:
(w), which measures how
• Estimation error: This is the error that results from the fact that we only
receive a training set and do not observe the distribution D. We already
• Optimization error: This is the term
that measures the diﬀerence between the approximation error with respect
inal loss. The optimization error is a result of our inability to minimize the
training loss with respect to the original loss. The size of this error depends
on the speciﬁc distribution of the data and on the speciﬁc surrogate loss
learning algorithms for these families. We also introduced the notion of convex
surrogate loss function, which enables us also to utilize the convex machinery for
Bibliographic Remarks
There are several excellent books on convex analysis and optimization (Boyd &
text of PAC learning.
not a global minimum of LS.
In the next chapter we show that from the statistical
nostic PAC model). However, our main motivation to learn such problems
resulted from the computational perspective – convex optimization is often
eﬃciently solvable. Yet the goal of this exercise is to show that convexity
Convex Learning Problems
the set of all Turing machines. Deﬁne the loss function as follows. For every
Regularization and Stability
learning problems in these two families are learnable. For some learning problems
of this type it is possible to show that uniform convergence holds; hence they
are learnable using the ERM rule. However, this is not true for all learning
problems of this type. Yet, we will introduce another learning rule and will show
The new learning paradigm we introduce in this chapter is called Regularized
pirical risk and a regularization function. Intuitively, the regularization function
ularization function is the structural risk minimization paradigm we discussed
algorithm. An algorithm is considered stable if a slight change of its input does
not change its output much. We will formally deﬁne the notion of stability (what
put”) and prove its close relation to learnability. Finally, we will show that using
rule for these families of learning problems.
Regularized Loss Minimization
imize the empirical risk and a regularization function. Formally, a regularization
outputs a hypothesis in
Regularized loss minimization shares similarities with minimum description length
Personal use only. Not for distribution. Do not post.
Regularization and Stability
tion, and the algorithm balances between low empirical risk and “simpler,” or
“less complex,” hypotheses.
There are many possible regularization functions one can use, reﬂecting some
prior belief about the problem (similarly to the description language in Minimum
Description Length). Throughout this section we will focus on one of the most
norm is the ℓ2 norm, ∥w∥=
i . This yields the learning rule:
This type of regularization function is often called Tikhonov regularization.
risk minimization, where the norm of w is a measure of its “complexity.” Recall
that in the previous chapter we introduced the notion of bounded hypothesis
classes. Therefore, we can deﬁne a sequence of hypothesis classes, H1 ⊂H2 ⊂
on i then the RLM rule is similar to the SRM rule for this sequence of nested
A diﬀerent interpretation of regularization is as a stabilizer. In the next section
we deﬁne the notion of stability and prove that stable learning rules do not
overﬁt. But ﬁrst, let us demonstrate the RLM rule for linear regression with the
Applying the RLM rule with Tikhonov regularization to linear regression with
the squared loss, we obtain the following learning rule:
obtain the set of linear equations
to ridge regression becomes
rithm and prevents overﬁtting. In particular, the analysis presented in the next
The preceding theorem tells us how many examples are needed
to guarantee that the expected value of the risk of the learned predictor will be
of agnostic PAC learning we require that the risk of the learned predictor will
algorithm with a bounded expected risk can be used to construct an agnostic
Stable Rules Do Not Overﬁt
Intuitively, a learning algorithm is stable if a small change of the input to the
algorithm does not change the output of the algorithm much. Of course, there
are many ways to deﬁne what we mean by “a small change of the input” and
what we mean by “does not change the output much”. In this section we deﬁne
a speciﬁc notion of stability and prove that under this deﬁnition, stable rules do
Let A be a learning algorithm, let S = (z1, . . . , zm) be a training set of m
examples, and let A(S) denote the output of A. The algorithm A suﬀers from
overﬁtting if the diﬀerence between the true risk of its output, LD(A(S)), and the
throughout this chapter we focus on the expectation (with respect to the choice
of S) of this quantity, namely, ES[LD(A(S)) −LS(A(S))].
ditional example z′, let S(i) be the training set obtained by replacing the i’th
nition of stability, “a small change of the input” means that we feed A with S(i)
instead of with S. That is, we only replace one training example. We measure
the eﬀect of this small change of the input on the output of A, by comparing
the loss of the hypothesis A(S) on zi to the loss of the hypothesis A(S(i)) on zi.
since in the ﬁrst term the learning algorithm does not observe the example zi
while in the second term zi is indeed observed. If the preceding diﬀerence is very
large we suspect that the learning algorithm might overﬁt. This is because the
Regularization and Stability
learning algorithm drastically changes its prediction on zi if it observes it in the
training set. This is formalized in the following theorem.
quence of examples and let z′ be another i.i.d. example. Let U(m) be the uniform
distribution over [m]. Then, for any learning algorithm,
S∼Dm[LD(A(S)) −LS(A(S))] =
Since S and z′ are both drawn i.i.d. from D, we have that for every i,
S,z′[ℓ(A(S), z′)] = E
S,z′[ℓ(A(S(i)), zi)].
On the other hand, we can write
Combining the two equations we conclude our proof.
algorithm – changing a single example in the training set does not lead to a
signiﬁcant change. Formally,
not overﬁt is not necessarily a good learning algorithm – take, for example, an
algorithm A that always outputs the same hypothesis. A useful algorithm should
ﬁnd a hypothesis that on one hand ﬁts the training set (i.e., has a low empirical
algorithm should both ﬁt the training set and at the same time be stable. As we
set and being stable.
Tikhonov Regularization as a Stabilizer
In the previous section we saw that stable rules do not overﬁt. In this section we
a stable algorithm. We will assume that the loss function is convex and that it
is either Lipschitz or smooth.
The main property of the Tikhonov regularization that we rely on is that it
makes the objective of RLM strongly convex, as deﬁned in the following.
convexity is given in the following ﬁgure.
vex. In addition, it underscores an important property of strong convexity.
The ﬁrst two points follow directly from the deﬁnition. To prove the last
point, we divide the deﬁnition of strong convexity by α and rearrange terms to
f(u + α(w −u)) −f(u)
We now turn to prove that RLM is stable. Let S = (z1, . . . , zm) be a training
Let A be the RLM rule, namely,
Regularization and Stability
On the other hand, for any v and u, and for all i, we have
+ ℓ(v, zi) −ℓ(u, zi)
+ ℓ(u, z′) −ℓ(v, z′)
fS(A(S(i)))−fS(A(S)) ≤ℓ(A(S(i)), zi) −ℓ(A(S), zi)
+ℓ(A(S), z′) −ℓ(A(S(i)), z′)
+ ℓ(A(S), z′) −ℓ(A(S(i)), z′)
schitz or smooth loss functions. For both families of loss functions we show that
RLM is stable and therefore it does not overﬁt.
If the loss function, ℓ(·, zi), is ρ-Lipschitz, then by the deﬁnition of Lipschitzness,
ℓ(A(S(i)), zi) −ℓ(A(S), zi) ≤ρ ∥A(S(i)) −A(S)∥.
ℓ(A(S), z′) −ℓ(A(S(i)), z′) ≤ρ ∥A(S(i)) −A(S)∥.
Since this holds for any S, z′, i we immediately obtain:
Assume that the loss function is convex and ρ-Lipschitz.
Smooth and Nonnegative Loss
smoothness assumption we have that
ℓ(A(S(i)), zi)−ℓ(A(S), zi) ≤⟨∇ℓ(A(S), zi), A(S(i))−A(S)⟩+β
ℓ(A(S(i)), zi) −ℓ(A(S), zi)
≤∥∇ℓ(A(S), zi)∥∥A(S(i)) −A(S)∥+ β
2βℓ(A(S), zi) ∥A(S(i)) −A(S)∥+ β
By a symmetric argument it holds that,
ℓ(A(S), z′) −ℓ(A(S(i)), z′)
2βℓ(A(S(i)), z′) ∥A(S(i)) −A(S)∥+ β
Regularization and Stability
ℓ(A(S(i)), zi) −ℓ(A(S), zi)
2βℓ(A(S), zi) ∥A(S(i)) −A(S)∥+ β
ℓ(A(S), zi) + ℓ(A(S(i)), z′)
tion with respect to S, z′, i and noting that E[ℓ(A(S), zi)] = E[ℓ(A(S(i)), z′)] =
E[LS(A(S))], we conclude that:
Assume that the loss function is β-smooth and nonnegative.
ℓ(A(S(i)), zi) −ℓ(A(S), zi)
ℓ(A(S(i)), zi) −ℓ(A(S), zi)
We can rewrite the expected risk of a learning algorithm as
S[LD(A(S)) −LS(A(S))].
The ﬁrst term reﬂects how well A(S) ﬁts the training set while the second term
reﬂects the diﬀerence between the true and empirical risks of A(S). As we have
our goal is to minimize the risk of the algorithm, we need that the sum of both
terms will be small.
In the previous section we have bounded the stability term. We have shown
that the stability term decreases as the regularization parameter, λ, increases.
complexity tradeoﬀwe discussed previously in the book.
We now derive bounds on the empirical risk term for the RLM rule. Recall
that the RLM rule is deﬁned as A(S) = argminw
arbitrary vector w∗. We have
Taking expectation of both sides with respect to S and noting that ES[LS(w∗)] =
LD(w∗), we obtain that
S[LD(A(S)) −LS(A(S))].
Assume that the loss function is convex and ρ-Lipschitz.
pothesis with low risk, the bound tells us how many examples are needed so that
A(S) will be almost as good as w∗, had we known the norm of w∗. In practice,
then for every distribution D,
The preceding corollary holds for Lipschitz loss functions. If instead the loss
derive an agnostic PAC learning guarantee.
Regularization and Stability
Assume that the loss function is convex, β-smooth, and
m , satisﬁes the following for all w∗:
we obtain from the preceding that the
expected true risk of A(S) is at most twice the expected empirical risk of A(S).
We introduced stability and showed that if an algorithm is stable then it does not
problems, the RLM rule with Tikhonov regularization leads to a stable learning
bounded problems are learnable using the RLM rule. The RLM paradigm is the
basis for many popular learning algorithms, including ridge regression (which we
discussed in this chapter) and support vector machines (which will be discussed
In the next chapter we will present Stochastic Gradient Descent, which gives us
Bibliographic Remarks
In the context of modern learning theory, the use of stability can be traced back
ity of a learning algorithm with regard to small changes in the sample controls
cal methods have been developed to introduce stability into learning algorithms,
problems uniform convergence does not hold in a strong sense.
distribution D it holds that
nonnegative and rely on Markov’s inequality.
Suggest a procedure that agnostic PAC learns the problem with sample
using A. On the basis of the previous question argue that the probability
Regularization and Stability
This problem corresponds to an unsupervised learning task, meaning that we
do not try to predict the label of x. Instead, what we try to do is to ﬁnd the
“center of mass” of the distribution over B. However, there is a twist, modeled
by the vectors α. Each example is a pair (x, α), where x is the instance x and
α indicates which features of x are “active” and which are “turned oﬀ.” A
hypothesis is a vector w representing the center of mass of the distribution,
and the loss function is the squared Euclidean distance between x and w, but
only with respect to the “active” elements of x.
• Show that this problem is learnable using the RLM rule with a sample
complexity that does not depend on d.
• Consider a distribution D over Z as follows: x is ﬁxed to be some x0, and
Show that the rate of uniform convergence of this problem grows with
Hint: Let m be a training set size. Show that if d ≫2m, then there is
a high probability of sampling a set of examples such that there exists
sample complexity of uniform convergence must grow with log(d).
• Conclude that if we take d to inﬁnity we obtain a problem that is learnable
but for which the uniform convergence property does not hold. Compare
to the fundamental theorem of statistical learning.
We say that a learning rule A is an AERM (Asymptotic Empirical Risk
distribution D it holds that
Prove the following:
Throughout the section we used the ℓ2 norm. In this exercise we generalize
some of the results to general norms. Let ∥·∥be some arbitrary norm, and let f
norm ∥· ∥. Let A be an RLM rule with respect to R, namely,
Assume that for every z, the loss function ℓ(·, z) is ρ-Lipschitz with respect
to the same norm, namely,
ℓ(w, z) −ℓ(v, z) ≤ρ ∥w −v∥.
-strongly convex with respect to the ℓ1 norm over Rd.
Stochastic Gradient Descent
Recall that the goal of learning is to minimize the risk function, LD(h) =
Ez∼D[ℓ(h, z)]. We cannot directly minimize the risk function since it depends
on the unknown distribution D. So far in the book, we have discussed learning
methods that depend on the empirical risk. That is, we ﬁrst sample a training
set S and deﬁne the empirical risk function LS(h). Then, the learner picks a
hypothesis based on the value of LS(h). For example, the ERM rule tells us to
pick the hypothesis that minimizes LS(h) over the hypothesis class, H. Or, in the
previous chapter, we discussed regularized risk minimization, in which we pick a
hypothesis that jointly minimizes LS(h) and a regularization function over h.
In this chapter we describe and analyze a rather diﬀerent learning approach,
focus on the important family of convex learning problems, and following the
notation in that chapter, we will refer to hypotheses as vectors w that come from
a convex hypothesis class, H. In SGD, we try to minimize the risk function LD(w)
directly using a gradient descent procedure. Gradient descent is an iterative
optimization procedure in which at each step we improve the solution by taking
a step along the negative of the gradient of the function to be minimized at
the current point. Of course, in our case, we are minimizing the risk function,
and since we do not know D we also do not know the gradient of LD(w). SGD
circumvents this problem by allowing the optimization procedure to take a step
along a random direction, as long as the expected value of the direction is the
negative of the gradient. And, as we shall see, ﬁnding a random direction whose
expected value corresponds to the gradient is rather simple even though we do
not know the underlying distribution D.
The advantage of SGD, in the context of convex learning problems, over the
regularized risk minimization learning rule is that SGD is an eﬃcient algorithm
that can be implemented in a few lines of code, yet still enjoys the same sample
complexity as the regularized risk minimization rule. The simplicity of SGD also
allows us to use it in situations when it is not possible to apply methods that
are based on the empirical risk, but this is beyond the scope of this book.
We start this chapter with the basic gradient descent algorithm and analyze its
subgradient and show that gradient descent can be applied for nondiﬀerentiable
Personal use only. Not for distribution. Do not post.
the Stochastic Gradient Descent algorithm, along with several useful variants.
We show that SGD enjoys an expected convergence rate similar to the rate
of gradient descent. Finally, we turn to the applicability of SGD to learning
Before we describe the stochastic gradient descent method, we would like to
describe the standard gradient descent approach for minimizing a diﬀerentiable
convex function f(w).
is the vector of partial derivatives of f, namely, ∇f(w) =
Gradient descent is an iterative algorithm. We start with an initial value of w
negative of the gradient at the current point. That is, the update step is
ent points in the direction of the greatest rate of increase of f around w(t),
the algorithm makes a small step in the opposite direction, thus decreasing the
value of the function. Eventually, after T iterations, the algorithm outputs the
averaged vector, ¯w =
turns out to be rather useful, especially when we generalize gradient descent to
nondiﬀerentiable functions and to the stochastic case.
tion. The gradient of f at w yields the ﬁrst order Taylor approximation of f
mation lower bounds f, that is,
f(u) ≥f(w) + ⟨u −w, ∇f(w)⟩.
Therefore, for w close to w(t) we have that f(w) ≈f(w(t))+⟨w−w(t), ∇f(w(t))⟩.
Hence we can minimize the approximation of f(w). However, the approximation
might become loose for w, which is far away from w(t). Therefore, we would like
to minimize jointly the distance between w and w(t) and the approximation of
f around w(t). If the parameter η controls the tradeoﬀbetween the two terms,
we obtain the update rule
f(w(t)) + ⟨w −w(t), ∇f(w(t))⟩
Solving the preceding by taking the derivative with respect to w and comparing
Stochastic Gradient Descent
To analyze the convergence rate of the GD algorithm, we limit ourselves to
themselves easily to this setting). Let w⋆be any vector and let B be an upper
bound on ∥w⋆∥. It is convenient to think of w⋆as the minimizer of f(w), but
the analysis that follows holds for every w⋆.
We would like to obtain an upper bound on the suboptimality of our solution
deﬁnition of ¯w, and using Jensen’s inequality, we have that
For every t, because of the convexity of f, we have that
f(w(t)) −f(w⋆) ≤⟨w(t) −w⋆, ∇f(w(t))⟩.
Combining the preceding we obtain
⟨w(t) −w⋆, ∇f(w(t))⟩.
Let v1, . . . , vT be an arbitrary sequence of vectors. Any algorithm
ρ2 T , then for every w⋆with ∥w⋆∥≤B we have
Using algebraic manipulations (completing the square), we obtain:
where the last equality follows from the deﬁnition of the update rule. Summing
the equality over t, we have
∥w⋆∥by B, ∥vt∥by ρ, dividing by T, and plugging in the value of η.
Stochastic Gradient Descent
satisfy the lemma’s conditions and achieve the following corollary:
Let f be a convex, ρ-Lipschitz function, and let w⋆∈argmin{w:∥w∥≤B} f(w).
If we run the GD algorithm on f for T steps with η =
ρ2 T , then the output
GD algorithm for a number of iterations that satisﬁes
alize the discussion beyond diﬀerentiable functions. We will show that the GD
gradient of f(w) at w(t), instead of the gradient.
To motivate the deﬁnition of subgradients, recall that for a convex function f,
the gradient at w deﬁnes the slope of a tangent that lies below f, that is,
f(u) ≥f(w) + ⟨u −w, ∇f(w)⟩.
The existence of a tangent that lies below f is an important property of convex
functions, which is in fact an alternative characterization of convexity.
f(u) ≥f(w) + ⟨u −w, v⟩.
The proof of this lemma can be found in many convex analysis textbooks (e.g.,
called a subgradient of f at w. The set of subgradients of f at w is called the
diﬀerential set and denoted ∂f(w).
For scalar functions, a subgradient of a convex function f at w is a slope of a
line that touches f at w and is not above f elsewhere.
f(w) + ⟨u −w, ∇f(w)⟩
a convex function, the tangent lower bounds f. Right: Illustration of several
subgradients of a nondiﬀerentiable convex function.
Calculating Subgradients
How do we construct subgradients of a given convex function? If a function is
diﬀerentiable at a point w, then the diﬀerential set is trivial, as the following
If f is diﬀerentiable at w then ∂f(w) contains a single element –
the gradient of f at w, ∇f(w).
the diﬀerential set for the diﬀerentiable parts of f, and the only point that
dients at a given point, as one member of this set would suﬃce. The following
Since gj is convex we have that for all u
gj(u) ≥gj(w) + ⟨u −w, ∇gj(w)⟩.
Since g(w) = gj(w) and g(u) ≥gj(u) we obtain that
g(u) ≥g(w) + ⟨u −w, ∇gj(w)⟩,
which concludes our proof.
Stochastic Gradient Descent
Recall the hinge loss function
To calculate a subgradient of the hinge loss at some w we rely on the preceding
claim and obtain that the vector v deﬁned in the following is a subgradient of
the hinge loss at w:
Subgradients of Lipschitz Functions
|f(u) −f(v)| ≤ρ ∥u −v∥.
The following lemma gives an equivalent deﬁnition using norms of subgradients.
f(w) −f(u) ≤⟨v, w −u⟩.
f(w) −f(u) ≤⟨v, w −u⟩≤∥v∥∥w −u∥≤ρ ∥w −u∥.
An analogous argument can show that f(u) −f(w) ≤ρ ∥w −u∥. Hence f is
On the other hand, from the Lipschitzness of f we have
Combining the two inequalities we conclude that ∥v∥≤ρ.
The gradient descent algorithm can be generalized to nondiﬀerentiable functions
by using a subgradient of f(w) at w(t), instead of the gradient. The analysis of
true for subgradients as well.
gradient descent algorithm (right). The function to be minimized is
Stochastic Gradient Descent (SGD)
In stochastic gradient descent we do not require the update direction to be based
exactly on the gradient. Instead, we allow the direction to be a random vector
and only require that its expected value at each iteration will equal the gradient
direction. Or, more generally, we require that the expected value of the random
vector will be a subgradient of the function at the current vector.
Stochastic Gradient Descent (SGD) for minimizing
choose vt at random from a distribution such that E[vt | w(t)] ∈∂f(w(t))
An illustration of stochastic gradient descent versus gradient descent is given
it is easy to ﬁnd a random vector whose expectation is a subgradient of the risk
stochastic case, in which only the expectation of vt is in ∂f(w(t)), we cannot
Stochastic Gradient Descent
subgradient of f at w(t), we can still derive a similar bound on the expected
output of stochastic gradient descent. This is formalized in the following theorem.
Assume that SGD is run for T iterations with η =
ρ2 T . Assume also that for
E [f( ¯w)] −f(w⋆) ≤B ρ
SGD algorithm for a number of iterations that satisﬁes
Let us introduce the notation v1:t to denote the sequence v1, . . . , vt.
v1:T[f( ¯w) −f(w⋆)] ≤E
By taking expectation of the bound in the lemma we have
It is left to show that
which we will hereby prove.
Using the linearity of the expectation we have
v1:T[⟨w(t) −w⋆, vt⟩].
Next, we recall the law of total expectation: For every two random variables α, β,
v1:T[⟨w(t) −w⋆, vt⟩] = E
v1:t[⟨w(t) −w⋆, vt⟩]
Overall, we have shown that
v1:T[⟨w(t) −w⋆, vt⟩] ≥
v1:T[f(w(t)) −f(w⋆)] .
Summing over t, dividing by T, and using the linearity of expectation, we get
In this section we describe several variants of Stochastic Gradient Descent.
Adding a Projection Step
In the previous analyses of the GD and SGD algorithms, we required that the
norm of w⋆will be at most B, which is equivalent to requiring that w⋆is in the
set H = {w : ∥w∥≤B}. In terms of learning, this means restricting ourselves to
the gradient (or its expected direction) might result in stepping out of this bound,
and there is even no guarantee that ¯w satisﬁes it. We show in the following how
to overcome this problem while maintaining the same convergence rate.
update rule, where we ﬁrst subtract a subgradient from the current value of w
and then project the resulting vector onto H. Formally,
The projection step replaces the current value of w by the vector in H closest
Clearly, the projection step guarantees that w(t) ∈H for all t. Since H is
of SGD with projections remains the same. This is based on the following lemma.
Let H be a closed convex set and let v be the
projection of w onto H, namely,
Stochastic Gradient Descent
Therefore, from the optimality of v we obtain
Rearranging, we obtain
Equipped with the preceding lemma, we can easily adapt the analysis of SGD
to the case in which we add projection steps on a closed and convex set. Simply
note that for every t,
of the analysis follows directly.
Another variant of SGD is decreasing the step size as a function of t. That is,
rather than updating with a constant η, we use ηt. For instance, we can set
we are closer to the minimum of the function, we take our steps more carefully,
so as not to “overshoot” the minimum.
Other Averaging Techniques
We have set the output vector to be ¯w =
a weighted average of the last few iterates. These more sophisticated averaging
schemes can improve the convergence speed in some situations, such as in the
case of strongly convex functions deﬁned in the following.
In this section we show a variant of SGD that enjoys a faster convergence rate for
of strong convexity in the previous chapter). We rely on the following claim,
⟨w −u, v⟩≥f(w) −f(u) + λ
Choose a random vector vt s.t. E[vt|w(t)] ∈∂f(w(t))
Let ∇(t) = E[vt|w(t)]. Since f is strongly convex and ∇(t) is in the
subgradient set of f at w(t) we have that
⟨w(t) −w⋆, ∇(t)⟩≥f(w(t)) −f(w⋆) + λ
Stochastic Gradient Descent
= 2ηt⟨w(t) −w⋆, vt⟩−η2
summing over t we obtain
(E[f(w(t))] −f(w⋆)) ≤ρ2
The theorem follows from the preceding by dividing by T and using Jensen’s
in which the log(T) term is eliminated for a variant of the algorithm in which
We have so far introduced and analyzed the SGD algorithm for general convex
functions. Now we shall consider its applicability to learning tasks.
SGD for Risk Minimization
Recall that in learning we face the problem of minimizing the risk function
We have seen the method of empirical risk minimization, where we minimize the
empirical risk, LS(w), as an estimate to minimizing LD(w). SGD allows us to
take a diﬀerent approach and minimize LD(w) directly. Since we do not know
D, we cannot simply calculate ∇LD(w(t)) and minimize it with the GD method.
With SGD, however, all we need is to ﬁnd an unbiased estimate of the gradient of
LD(w), that is, a random vector whose conditional expected value is ∇LD(w(t)).
We shall now see how such an estimate can be easily constructed.
For simplicity, let us ﬁrst consider the case of diﬀerentiable loss functions.
Hence the risk function LD is also diﬀerentiable. The construction of the random
vector vt will be as follows: First, sample z ∼D. Then, deﬁne vt to be the
gradient of the function ℓ(w, z) with respect to w, at the point w(t). Then, by
the linearity of the gradient we have
z∼D[∇ℓ(w(t), z)] = ∇E
z∼D[ℓ(w(t), z)] = ∇LD(w(t)).
The gradient of the loss function ℓ(w, z) at w(t) is therefore an unbiased estimate
of the gradient of the risk function LD(w(t)) and is easily constructed by sampling
a single fresh example z ∼D at each iteration t.
The same argument holds for nondiﬀerentiable loss functions. We simply let
vt be a subgradient of ℓ(w, z) at w(t). Then, for every u we have
ℓ(u, z) −ℓ(w(t), z) ≥⟨u −w(t), vt⟩.
Taking expectation on both sides with respect to z ∼D and conditioned on the
value of w(t) we obtain
LD(u) −LD(w(t)) = E[ℓ(u, z) −ℓ(w(t), z)|w(t)]
≥E[⟨u −w(t), vt⟩|w(t)]
= ⟨u −w(t), E[vt|w(t)]⟩.
It follows that E[vt|w(t)] is a subgradient of LD(w) at w(t).
To summarize, the stochastic gradient descent framework for minimizing the
Stochastic Gradient Descent (SGD) for minimizing
Stochastic Gradient Descent
LD(w) with a number of iterations (i.e., number of examples)
ρ2 T , then the output of SGD satisﬁes
It is interesting to note that the required sample complexity is of the same order
of magnitude as the sample complexity guarantee we derived for regularized loss
minimization. In fact, the sample complexity of SGD is even better than what
In the previous chapter we saw that the regularized loss minimization rule also
the SGD algorithm can be also used for such problems.
Assume that for all z, the loss function ℓ(·, z) is convex, β-
smooth, and nonnegative. Then, if we run the SGD algorithm for minimizing
LD(w) we have that for every w⋆,
samples of the SGD algorithm, let ft(·) = ℓ(·, zt), and note that vt = ∇ft(w(t)).
For all t, ft is a convex function and therefore ft(w(t))−ft(w⋆) ≤⟨vt, w(t)−w⋆⟩.
(ft(w(t)) −ft(w⋆)) ≤
Dividing by T and rearranging, we obtain
Next, we take expectation of the two sides of the preceding equation with respect
to z1, . . . , zT . Clearly, E[ft(w⋆)] = LD(w⋆). In addition, using the same argument
Combining all we conclude our proof.
As a direct corollary we obtain:
SGD for Regularized Loss Minimization
as regularized loss minimization. However, on some distributions, regularized loss
minimization may yield a better solution. Therefore, in some cases we may want
to solve the optimization problem associated with regularized loss minimization,
Since we are dealing with convex learning problems in which the loss function is
convex, the preceding problem is also a convex optimization problem that can
be solved using SGD as well, as we shall see in this section.
To apply this algorithm, we only need to ﬁnd a way to construct an unbiased
estimate of a subgradient of f at w(t). This is easily done by noting that if
To analyze the resulting algorithm, we ﬁrst rewrite the update rule (assuming
Stochastic Gradient Descent
that H = Rd and therefore the projection step does not matter) as follows
If we assume that the loss function is ρ-Lipschitz, it follows that for all t we have
∥vt∥≤ρ and therefore ∥λw(t)∥≤ρ, which yields
E[f( ¯w)] −f(w⋆) ≤4ρ2
rithms, along with several of their variants. We have analyzed their convergence
rate and calculated the number of iterations that would guarantee an expected
shown that by using SGD we can directly minimize the risk function. We do
so by sampling a point i.i.d from D and using a subgradient of the loss of the
current hypothesis w(t) at this point as an unbiased estimate of the gradient (or
a subgradient) of the risk function. This implies that a bound on the number of
iterations also yields a sample complexity bound. Finally, we have also shown
how to apply the SGD method to the problem of regularized risk minimization.
In future chapters we show how this yields extremely simple solvers to some
optimization problems associated with regularized risk minimization.
Bibliographic Remarks
in the context of stochastic optimization. See, for example, (Nemirovski & Yudin
The bound we have derived for strongly convex function is due to Hazan,
among all vectors that satisfy the preceding requirement. Let R = maxi ∥xi∥.
• Show how to calculate a subgradient of f.
pare the algorithm and the analysis to the Batch Perceptron algorithm
variable step size, ηt =
Support Vector Machines
In this chapter and the next we discuss a very useful machine learning tool: the
support vector machine paradigm (SVM) for learning linear predictors in high
dimensional feature spaces. The high dimensionality of the feature space raises
both sample complexity and computational complexity challenges.
The SVM algorithmic paradigm tackles the sample complexity challenge by
searching for “large margin” separators. Roughly speaking, a halfspace separates
a training set with a large margin if all the examples are not only on the correct
side of the separating hyperplane but also far away from it. Restricting the
algorithm to output a large margin separator can yield a small sample complexity
even if the dimensionality of the feature space is high (and even inﬁnite). We
introduce the concept of margin and relate it to the regularized loss minimization
paradigm as well as to the convergence rate of the Perceptron algorithm.
In the next chapter we will tackle the computational complexity challenge
using the idea of kernels.
a halfspace, (w, b), such that yi = sign(⟨w, xi⟩+ b) for all i. Alternatively, this
condition can be rewritten as
error is zero, which is the minimum possible error). For any separable training
sample, there are many ERM halfspaces. Which one of them should the learner
Consider, for example, the training set described in the picture that follows.
Personal use only. Not for distribution. Do not post.
amples, our intuition would probably lead us to prefer the black hyperplane over
the green one. One way to formalize this intuition is using the concept of margin.
The margin of a hyperplane with respect to a training set is deﬁned to be the
minimal distance between a point in the training set and the hyperplane. If a
hyperplane has a large margin, then it will still separate the training set even if
we slightly perturb each instance.
We will see later on that the true error of a halfspace can be bounded in terms
of the margin it has over the training sample (the larger the margin, the smaller
the error), regardless of the Euclidean dimension in which this halfspace resides.
formally, we ﬁrst express the distance between a point x to a hyperplane using
the parameters deﬁning the halfspace.
The distance between a point x and the hyperplane deﬁned by
The distance between a point x and the hyperplane is deﬁned as
Taking v = x −(⟨w, x⟩+ b)w we have that
∥x −v∥= |⟨w, x⟩+ b| ∥w∥= |⟨w, x⟩+ b|.
Hence, the distance is at most |⟨w, x⟩+ b|. Next, take any other point u on the
where the last equality is because ⟨w, v⟩= ⟨w, u⟩= −b. Hence, the distance
Support Vector Machines
between x and u is at least the distance between x and v, which concludes our
On the basis of the preceding claim, the closest point in the training set to the
input: (x1, y1), . . . , (xm, ym)
for w of minimal norm among all the vectors that separate the data and for
but now the units in which we measure the margin scale with the norm of w.
Therefore, ﬁnding the largest margin halfspace boils down to ﬁnding w whose
norm is minimal. Formally:
yi(⟨w⋆, xi⟩+ b⋆) ≥γ⋆
Hence, the pair ( w⋆
γ⋆) satisﬁes the conditions of the quadratic optimization
convex quadratic function and the constraints are linear inequalities.
∥w0∥yi(⟨w0, xi⟩+ b0) ≥
It is often more convenient to consider homogenous halfspaces, namely, halfspaces
that pass through the origin and are thus deﬁned by sign(⟨w, x⟩), where the bias
halfspaces to the problem of learning homogenous halfspaces by adding one more
of the weight vector) as well. However, regularizing b usually does not make a
signiﬁcant diﬀerence to the sample complexity.
sample complexity of learning halfspaces grows with the dimensionality of the
problem. Furthermore, the fundamental theorem of learning tells us that if the
To overcome this problem, we will make an additional assumption on the
underlying data distribution. In particular, we will deﬁne a “separability with
margin γ” assumption and will show that if the data is separable with margin
follows that even if the dimensionality is very large (or even inﬁnite), as long as
the data adheres to the separability with margin assumption we can still have a
small sample complexity. There is no contradiction to the lower bound given in
the fundamental theorem of learning because we are now making an additional
assumption on the underlying data distribution.
Before we formally deﬁne the separability with margin assumption, there is a
scaling issue we need to resolve. Suppose that a training set S = (x1, y1), . . . , (xm, ym)
Support Vector Machines
ple scaling of the data can make it separable with an arbitrarily large margin. It
follows that in order to give a meaningful deﬁnition of margin we must take into
account the scale of the examples as well. One way to formalize this is using the
deﬁnition that follows.
b⋆) ≥γ and ∥x∥≤ρ. Similarly, we say that D is separable with a (γ, ρ)-margin
using a homogenous halfspace if the preceding holds with a halfspace of the form
separability with margin assumption using a homogenous halfspace. Then, with
and analyzed the Perceptron algorithm for ﬁnding an ERM hypothesis with
the number of updates the Perceptron might make on a given training set. It
is the radius of examples and γ is the margin.
violated for some of the examples in the training set. This can be modeled by
introducing nonnegative slack variables, ξ1, . . . , ξm, and replacing each constraint
minimizes the norm of w (corresponding to the margin) and the average of ξi
(corresponding to the violations of the constraints). The tradeoﬀbetween the two
input: (x1, y1), . . . , (xm, ym)
Recall the deﬁnition of the hinge loss:
Given (w, b) and a training set S, the averaged hinge loss on S is denoted by
((w, b)). Now, consider the regularized loss minimization problem:
ξi = ℓhinge((w, b), (xi, yi)) for all i, and the claim follows.
only for training errors but also for large norm.
halfspace, where the bias term b is set to be zero, which yields the following
optimization problem:
Support Vector Machines
a generalization bound for the regularized loss minimization framework assuming
that the loss function is convex and Lipschitz. We have already shown that the
hinge loss is convex so it is only left to analyze the Lipschitzness of the hinge
It is easy to verify that any subgradient of f at w is of the form αx where
space as a function of the norm of that halfspace, independently of the Euclidean
dimension of the space over which the halfspace is deﬁned. This becomes highly
signiﬁcant when we learn via embeddings into high dimensional feature spaces,
as we will consider in the next chapter.
The condition that X will contain vectors with a bounded norm
follows from the requirement that the loss function will be Lipschitz. This is
not just a technicality. As we discussed before, separation with large margin
deed, without a constraint on the scale, we can always enlarge the margin by
multiplying all instances by a large scalar.
dimension of the instance space. Instead, the bounds depend on the norm of the
examples, ρ, the norm of the halfspace B (or equivalently the margin parameter
γ) and, in the nonseparable case, the bounds also depend on the minimum hinge
homogenous halfspaces is d, which implies that the error of an ERM hypothesis
Consider the problem of learning to classify a short text document according
to its topic, say, whether the document is about sports or not. We ﬁrst need to
dimension d to be the number of words in the dictionary. Given a document,
problem, the value of ρ2 will be the maximal number of distinct words in a given
A halfspace for this problem assigns weights to words. It is natural to assume
that by assigning positive and negative weights to a few dozen words we will
be able to determine whether a given document is about sports or not with
reasonable accuracy. Therefore, for this problem, the value of B2 can be set to
therefore shown a problem in which there can be an order of magnitude diﬀerence
between learning a halfspace with the SVM rule and learning a halfspace using
the vanilla ERM rule.
Of course, it is possible to construct problems in which the SVM bound will
be worse than the VC bound. When we use SVM, we in fact introduce another
tive bias can signiﬁcantly decrease our estimation error, it can also enlarge the
approximation error.
we minimize the hinge loss. As we have shown in the previous subsection, the
with respect to the hinge loss while the approximation error in VC bounds is
that of the hinge loss.
It is not possible to derive bounds that involve the estimation error term
Support Vector Machines
insensitive, and therefore there is no meaning to the norm of w or its margin
function that on one hand it is scale sensitive and thus enjoys the estimation
option is the ramp loss, deﬁned as
penalize examples that are separated with margin. The diﬀerence between the
classiﬁed but not with a signiﬁcant margin. Generalization bounds for the ramp
The reason SVM relies on the hinge loss and not on the ramp loss is that
the hinge loss is convex and, therefore, from the computational point of view,
minimizing the hinge loss can be performed eﬃciently. In contrast, the problem
of minimizing the ramp loss is computationally intractable.
Optimality Conditions and “Support Vectors”*
The name “Support Vector Machine” stems from the fact that the solution of
therefore called support vectors. To see this, we rely on Fritz John optimality
where f, g1, . . . , gm are diﬀerentiable. Then, there exists α ∈Rm such that
Historically, many of the properties of SVM have been obtained by considering
We start by rewriting the problem in an equivalent form as follows. Consider
Now suppose that we ﬂip the order of min and max in the above equation. This
The preceding inequality is called weak duality. It turns out that in our case,
strong duality also holds; namely, the inequality holds with equality. Therefore,
We can simplify the dual problem by noting that once α is ﬁxed, the optimization
Support Vector Machines
problem with respect to w is unconstrained and the objective is diﬀerentiable;
thus, at the optimum, the gradient equals zero:
This shows us that the solution must be in the linear span of the examples, a
fact we will use later to derive SVM with kernels. Plugging the preceding into
Rearranging yields the dual problem
Note that the dual problem only involves inner products between instances and
erty is important when implementing SVM with kernels, as we will discuss in
In this section we describe a very simple algorithm for solving the optimization
where vj is a subgradient of the loss function at w(j) on the random example
chosen at iteration j. For the hinge loss, given an example (x, y), we can choose vj
Choose i uniformly at random from [m]
not assume separability of the data and allows the constraints to be violated to
some extent. The sample complexity for both types of SVM is diﬀerent from the
sample complexity of straightforward halfspace learning, as it does not depend
on the dimension of the domain but rather on parameters such as the maximal
in the next chapter, where we will discuss the embedding of the given domain
into some high dimensional feature space as means for enriching our hypothesis
class. Such a procedure raises computational and sample complexity problems.
The latter is solved by using SVM, whereas the former can be solved by using
SVM with kernels, as we will see in the next chapter.
Bibliographic Remarks
Support Vector Machines
is equivalent to the following formulation:
arable with a margin γ and such that all the instances are within a ball of
radius ρ. Prove that the maximal number of updates the Batch Perceptron
In the previous chapter we described the SVM paradigm for learning halfspaces
in high dimensional feature spaces. This enables us to enrich the expressive
power of halfspaces by ﬁrst mapping the data into a high dimensional feature
space, and then learning a linear predictor in that space. This is similar to the
potheses. While this approach greatly extends the expressiveness of halfspace
lenges. In the previous chapter we tackled the sample complexity issue using
the concept of margin. In this chapter we tackle the computational complexity
challenge using the method of kernels.
We start the chapter by describing the idea of embedding the data into a high
dimensional feature space. We then introduce the idea of kernels. A kernel is a
type of a similarity measure between instances. The special property of kernel
similarities is that they can be viewed as inner products in some Hilbert space
tually embedded. We introduce the “kernel trick” that enables computationally
sional representation of the domain instances. Kernel based learning algorithms,
tools. Their success may be attributed both to being ﬂexible for accommodating
domain speciﬁc prior knowledge and to having a well developed set of eﬃcient
implementation algorithms.
Embeddings into Feature Spaces
ing training set is not separable by a halfspace.
To make the class of halfspaces more expressive, we can ﬁrst map the original
instance space into another space (possibly of a higher dimension) and then
learn a halfspace in that space. For example, consider the example mentioned
previously. Instead of learning a halfspace in the original representation let us
Personal use only. Not for distribution. Do not post.
We use the term feature space to denote the range of ψ. After applying ψ the
data can be easily explained using the halfspace h(x) = sign(⟨w, ψ(x)⟩−b),
The basic paradigm is as follows:
for some feature space F, that will usually be Rn for some n (however, the
range of such a mapping can be any Hilbert space, including such spaces of
inﬁnite dimension, as we will show later).
image sequence ˆS = (ψ(x1), y1), . . . , (ψ(xm), ym).
Note that, for every probability distribution D over X × Y, we can readily
deﬁne its image probability distribution Dψ over F × Y by setting, for every
over the feature space, LDψ(h) = LD(h ◦ψ), where h ◦ψ is the composition of h
The success of this learning paradigm depends on choosing a good ψ for a
given learning task: that is, a ψ that will make the image of the data distribution
(close to being) linearly separable in the feature space, thus making the resulting
algorithm a good learner for a given task. Picking such an embedding requires
prior knowledge about that task. However, often some generic mappings that
enable us to enrich the class of halfspaces and extend its expressiveness are used.
One notable example is polynomial mappings, which are a generalization of the
ψ we have seen in the previous example.
Recall that the prediction of a standard halfspace classiﬁer on an instance x
In that case, p(x) = Pk
of the polynomial we need to learn. We can rewrite p(x) = ⟨w, ψ(x)⟩where
learning a k degree polynomial over R can be done by learning a linear mapping
than halfspaces. We have seen at the beginning of this chapter an example in
which the training set, in its original domain (X = R), cannot be separable
So, while the classiﬁer is always linear in the feature space, it can have highly
nonlinear behavior on the original space from which instances were sampled.
any ﬁnite d. But there are also inﬁnite dimensional Hilbert spaces (as we shall
see later on in this chapter).
The bottom line of this discussion is that we can enrich the class of halfspaces
by ﬁrst applying a nonlinear mapping, ψ, that maps the instance space into some
feature space, and then learning a halfspace in that feature space. However, if
large, we need many more samples in order to learn a halfspace in the range
of ψ. Second, from the computational point of view, performing calculations in
the high dimensional space might be too costly. In fact, even the representation
of the vector w in the feature space can be unrealistic. The ﬁrst issue can be
tackled using the paradigm of large margin (or low norm predictors), as we
already discussed in the previous chapter in the context of the SVM algorithm.
In the following section we address the computational issue.
We have seen that embedding the input space into some high dimensional feature
space makes halfspace learning more expressive. However, the computational
complexity of such learning may still pose a serious hurdle – computing linear
separators over very high dimensional data may be computationally expensive.
The common solution to this concern is kernel based learning. The term “kernels”
is used in this context to describe inner products in the feature space. Given
an embedding ψ of some domain space X into some Hilbert space, we deﬁne
the kernel function K(x, x′) = ⟨ψ(x), ψ(x′)⟩. One can think of K as specifying
similarity between instances and of the embedding ψ as mapping the domain set
complete if all Cauchy sequences in the space converge.
In our case, the norm ∥w∥is deﬁned by the inner product
⟨w, w⟩. The reason we require
the range of ψ to be in a Hilbert space is that projections in a Hilbert space are well
deﬁned. In particular, if M is a linear subspace of a Hilbert space, then every x in the
X into a space where these similarities are realized as inner products. It turns
out that many learning algorithms for halfspaces can be carried out just on the
basis of the values of the kernel function over pairs of domain points. The main
advantage of such algorithms is that they implement linear separators in high
dimensional feature spaces without having to specify points in that space or
expressing the embedding ψ explicitly. The remainder of this section is devoted
to constructing such algorithms.
In the previous chapter we saw that regularizing the norm of w yields a small
estingly, as we show later, regularizing the norm of w is also helpful in overcoming
timization problem we have derived in the previous chapter are instances of the
following general problem:
w (f (⟨w, ψ(x1)⟩, . . . , ⟨w, ψ(xm)⟩) + R(∥w∥)),
for all i, and f(a1, . . . , am) = ∞otherwise.
Assume that ψ is a mapping from X to
a Hilbert space. Then, there exists a vector α ∈Rm such that w = Pm
element of a Hilbert space, we can rewrite w⋆as
thus ∥w∥≤∥w⋆∥. Since R is nondecreasing we obtain that R(∥w∥) ≤R(∥w⋆∥).
Additionally, for all i we have that
⟨w, ψ(xi)⟩= ⟨w⋆−u, ψ(xi)⟩= ⟨w⋆, ψ(xi)⟩,
f (⟨w, ψ(x1)⟩, . . . , ⟨w, ψ(xm)⟩) = f (⟨w⋆, ψ(x1)⟩, . . . , ⟨w⋆, ψ(xm)⟩) .
than the objective at w⋆and therefore w is also an optimal solution. Since
respect to the coeﬃcients α instead of the coeﬃcients w as follows. Writing
Let K(x, x′) = ⟨ψ(x), ψ(x′)⟩be a function that implements the kernel function
the equivalent problem
αjK(xj, x1), . . . ,
direct access to elements in the feature space. The only thing we should know is
how to calculate inner products in the feature space, or equivalently, to calculate
value of the m × m matrix G s.t. Gi,j = K(xi, xj), which is often called the
where (Gα)i is the i’th element of the vector obtained by multiplying the Gram
programming and hence can be solved eﬃciently. In the next section we describe
Once we learn the coeﬃcients α we can calculate the prediction on a new
The advantage of working with kernels rather than directly optimizing w in
the feature space is that in some situations the dimension of the feature space
is extremely large while implementing the kernel function is very simple. A few
examples are given in the following.
The k degree polynomial kernel is deﬁned
Now we will show that this is indeed a kernel function. That is, we will show
that there exists a mapping ψ from the original space to some higher dimensional
space for which K(x, x′) = ⟨ψ(x), ψ(x′)⟩. For simplicity, denote x0 = x′
element of ψ(x) that equals Qk
K(x, x′) = ⟨ψ(x), ψ(x′)⟩.
Since ψ contains all the monomials up to degree k, a halfspace over the range
of ψ corresponds to a polynomial predictor of degree k over the original space.
Hence, learning a halfspace with a k degree polynomial kernel enables us to learn
polynomial predictors of degree k over the original space.
Note that here the complexity of implementing K is O(n) while the dimension
of the feature space is on the order of nk.
Let the original instance space be R and
an element ψ(x)n that equals
Here the feature space is of inﬁnite dimension while evaluating the kernel is very
Intuitively, the Gaussian kernel sets the inner product in the feature space
between x, x′ to be close to zero if the instances are far away from each other
controls the scale determining what we mean by “close.” It is easy to verify that
K implements an inner product in a space in which for any n and any monomial
of order k there exists an element of ψ(x) that equals
Hence, we can learn any polynomial predictor over the original space by using a
required to learn with Gaussian kernels depends on the margin in the feature
space, which will be large if we are lucky, but can in general be arbitrarily small.
Kernels as a Way to Express Prior Knowledge
As we discussed previously, a feature mapping, ψ, may be viewed as expanding
the class of linear classiﬁers to a richer class (corresponding to linear classiﬁers
over the feature space). However, as discussed in the book so far, the suitability
of any hypothesis class to a given learning task depends on the nature of that
task. One can therefore think of an embedding ψ as a way to express and utilize
prior knowledge about the problem at hand. For example, if we believe that
positive examples can be distinguished by some ellipse, we can deﬁne ψ to be all
As a more realistic example, consider the task of learning to ﬁnd a sequence of
characters (“signature”) in a ﬁle that indicates whether it contains a virus or not.
Formally, let Xd be the set of all strings of length at most d over some alphabet
Let us show how using an appropriate embedding this class can be realized by
linear classiﬁers over the resulting feature space. Consider a mapping ψ to a space
Rs where s = |Xd|, so that each coordinate of ψ(x) corresponds to some string v
in d. It is not hard to see that every member of the class H can be realized by
composing a linear classiﬁer over ψ(x), and, moreover, by such a halfspace whose
complexity that is polynomial in d. However, the dimension of the feature space
is exponential in d so a direct implementation of SVM over the feature space is
problematic. Luckily, it is easy to calculate the inner product in the feature space
(i.e., the kernel function) without explicitly mapping instances into the feature
space. Indeed, K(x, x′) is simply the number of common substrings of x and x′,
which can be easily calculated in time polynomial in d.
This example also demonstrates how feature mapping enables us to use halfspaces
for nonvectorial domains.
As we have discussed in the previous section, we can think of the speciﬁcation of
the kernel matrix as a way to express prior knowledge. Consider a given similarity
it represent an inner product between ψ(x) and ψ(x′) for some feature mapping
ψ? The following lemma gives a suﬃcient and necessary condition.
product in some Hilbert space if and only if it is positive semideﬁnite; namely,
for all x1, . . . , xm, the Gram matrix, Gi,j = K(xi, xj), is a positive semideﬁnite
It is trivial to see that if K implements an inner product in some Hilbert
space then the Gram matrix is positive semideﬁnite. For the other direction,
combinations of elements of the form K(·, x). Deﬁne an inner product on this
This is a valid inner product since it is symmetric (because K is symmetric), it is
with equality only for ψ(x) being the zero function). Clearly,
⟨ψ(x), ψ(x′)⟩= ⟨K(·, x), K(·, x′)⟩= K(x, x′),
which concludes our proof.
while only using kernel evaluations. The basic observation is that the vector w(t)
the linear span of {ψ(x1), . . . , ψ(xm)}. Therefore, rather than maintaining w(t)
we can maintain the corresponding coeﬃcients α.
Formally, let K be the kernel function, namely, for all x, x′, K(x, x′) =
⟨ψ(x), ψ(x′)⟩. We shall maintain two vectors in Rm, corresponding to two vectors
and α(t) be such that
The vectors β and α are updated according to the following procedure.
Choose i uniformly at random from [m]
The following lemma shows that the preceding implementation is equivalent
the output of applying SGD with kernels. Then ¯w = ˆw.
space. By the deﬁnition of α(t) =
which concludes our proof.
Mappings from the given domain to some higher dimensional space, on which a
halfspace predictor is used, can be highly powerful. We beneﬁt from a rich and
complex hypothesis class, yet need to solve the problems of high sample and
rithm, which faces these challenges by using a weak learner: Even though we’re
in a very high dimensional space, we have an “oracle” that bestows on us a
duced a diﬀerent approach, the kernel trick. The idea is that in order to ﬁnd a
halfspace predictor in the high dimensional space, we do not need to know the
representation of instances in that space, but rather the values of inner products
between the mapped instances. Calculating inner products between instances in
the high dimensional space without using their representation in that space is
done using kernel functions. We have also shown how the SGD algorithm can be
implemented using kernels.
The ideas of feature mapping and the kernel trick allow us to use the framework
of halfspaces and linear predictors for nonvectorial data. We demonstrated how
kernels can be used to learn predictors over the domain of strings.
We presented the applicability of the kernel trick in SVM. However, the kernel
trick can be applied in many other algorithms. A few examples are given as
lems. The next two chapters deal with completely diﬀerent types of hypothesis
Bibliographic Remarks
of conditions due to Mercer. Many useful kernel functions have been introduced
in the literature for various applications. We refer the reader to Sch¨olkopf &
only accessing the instances via the kernel function. Hint: The derivation is
similar to the derivation of implementing SGD with kernels.
mapping ψ, is the problem of ﬁnding a vector w that minimizes the function
and then returning the predictor
Show how to implement the ridge regression algorithm with kernels.
Hint: The representer theorem tells us that there exists a vector α ∈Rm
i ψ(xi) is a minimizer of f.
K(x, x′) = min{x, x′}.
where H is some Hilbert space, such that
on the basis of their shopping carts. Speciﬁcally, he sampled i.i.d. customers,
customer has a baby. As prior knowledge, the manager knows that there are
at least one of these k items. Of course, the identity of these k items is not
known (otherwise, there was nothing to learn). In addition, according to the
store regulation, each customer can buy at most s items. Help the manager to
design a learning algorithm such that both its time complexity and its sample
implements inner products in the feature space V .
Consider the binary classiﬁcation algorithm that predicts the label of
an unseen instance according to the class with the closest average. Formally,
the algorithm outputs the following decision rule:
h(x) = sign(⟨w, ψ(x)⟩+ b).
accessing individual entries of ψ(x) or w.
Multiclass, Ranking, and Complex
Multiclass categorization is the problem of classifying instances into one of several
rizing documents according to topic (X is the set of documents and Y is the set
of possible topics) or determining which object appears in a given image (X is
the set of images and Y is the set of possible objects).
The centrality of the multiclass learning problem has spurred the development
of various approaches for tackling the task. Perhaps the most straightforward
approach is a reduction from multiclass classiﬁcation to binary classiﬁcation. In
drawback of the reduction approach.
We then turn to describe a family of linear predictors for multiclass problems.
Relying on the RLM and SGD frameworks from previous chapters, we describe
several practical algorithms for multiclass prediction.
diction problems in which Y can be extremely large but has some structure on
strate this approach for the task of recognizing handwritten words, in which Y
is the set of all possible strings of some bounded length (hence, the size of Y is
exponential in the maximal length of a word).
ical application is ordering results of a search engine according to their relevance
to the query. We describe several performance measures that are adequate for
assessing the performance of ranking predictors and describe how to learn linear
predictors for ranking problems eﬃciently.
The simplest approach to tackle multiclass prediction problems is by reduction
to binary classiﬁcation. Recall that in multiclass prediction we would like to learn
Personal use only. Not for distribution. Do not post.
Multiclass, Ranking, and Complex Prediction Problems
siﬁers, each of which discriminates between one class and the rest of the classes.
That is, given a training set S = (x1, y1), . . . , (xm, ym), where every yi is in Y, we
given h1, . . . , hk, we construct a multiclass predictor using the rule
which class to predict (e.g., we can arbitrarily decide to break ties by taking the
minimal index in argmaxi hi(x)). A better approach can be applied whenever
each hi hides additional information, which can be interpreted as the conﬁdence
in the prediction y = i. For example, this is the case in halfspaces, where the
actual prediction is sign(⟨w, x⟩), but we can interpret ⟨w, x⟩as the conﬁdence
approach is given in the following.
training set S = (x1, y1), . . . , (xm, ym)
algorithm for binary classiﬁcation A
classes are compared to each other. Formally, given a training set S = (x1, y1), . . . , (xm, ym),
sequence, Si,j, containing all examples from S whose label is either i or j. For
classiﬁcation algorithm based on every Si,j to get hi,j. Finally, we construct
a multiclass classiﬁer by predicting the class that had the highest number of
training set S = (x1, y1), . . . , (xm, ym)
algorithm for binary classiﬁcation A
initialize Si,j to be the empty sequence
the multiclass hypothesis deﬁned by
simple and easy to construct from existing algorithms, their simplicity has a
price. The binary learner is not aware of the fact that we are going to use its
output hypotheses for constructing a multiclass predictor, and this might lead
to suboptimal results, as illustrated in the following example.
merical value of the class label). In contrast, if we choose hi(x) = ⟨wi, x⟩,
ﬁer deﬁned by h(x) = argmaxi hi(x) perfectly predicts all the examples. We see
Multiclass, Ranking, and Complex Prediction Problems
that even though the approximation error of the class of predictors of the form
good predictor from this class.
Linear Multiclass Predictors
In light of the inadequacy of reduction methods, in this section we study a more
direct approach for learning multiclass predictors. We describe the family of
linear multiclass predictors. To motivate the construction of this family, recall
that a linear predictor for binary classiﬁcation (i.e., a halfspace) takes the form
h(x) = sign(⟨w, x⟩).
An equivalent way to express the prediction is as follows:
where yx is the vector obtained by multiplying each element of x by y.
This representation leads to a natural generalization of halfspaces to multiclass
That is, Ψ takes as input a pair (x, y) and maps it into a d dimensional feature
vector. Intuitively, we can think of the elements of Ψ(x, y) as score functions that
assess how well the label y ﬁts the instance x. We will elaborate on Ψ later on.
That is, the prediction of h for the input x is the label that achieves the highest
weighted score, where weighting is according to the vector w.
Of course, the immediate question, which we discuss in the sequel, is how to
W = Rd, then HΨ,W becomes the hypothesis class of homogeneous halfspace
predictors for binary classiﬁcation.
As mentioned before, we can think of the elements of Ψ(x, y) as score functions
that assess how well the label y ﬁts the instance x. Naturally, designing a good Ψ
is similar to the problem of designing a good feature mapping (as we discussed in
of useful constructions are given in the following.
The Multivector Construction:
That is, Ψ(x, y) is composed of k vectors, each of which is of dimension n, where
we set all the vectors to be the all zeros vector except the y’th vector, which is
tor construction. By the construction we have that ⟨w, Ψ(x, y)⟩= ⟨wy, x⟩, and
therefore the multiclass prediction becomes
A geometric illustration of the multiclass prediction over X = R2 is given in the
The previous deﬁnition of Ψ(x, y) does not incorporate any prior knowledge
about the problem. We next describe an example of a feature function Ψ that
does incorporate prior knowledge. Let X be a set of text documents and Y be a
set of possible topics. Let d be a size of a dictionary of words. For each word in the
dictionary, whose corresponding index is j, let TF(j, x) be the number of times
the word corresponding to j appears in the document x. This quantity is called
corresponding to j appears in documents in our training set that are not about
Ψj(x, y) = TF(j, x) log
Multiclass, Ranking, and Complex Prediction Problems
pears a lot in the document x but does not appear at all in documents that are
not on topic y. If this is the case, we tend to believe that the document x is on
topic y. Note that unlike the multivector construction described previously, in
the current construction the dimension of Ψ does not depend on the number of
topics (i.e., the size of Y).
of loss for diﬀerent mistakes. For example, in object recognition tasks, it is less
severe to predict that an image of a tiger contains a cat than predicting that
the image contains a whale. This can be modeled by specifying a loss function,
the label y′ when the correct label is y is deﬁned to be ∆(y′, y). We assume
We have deﬁned the hypothesis class HΨ,W and speciﬁed a loss function ∆. To
learn the class with respect to the loss function, we can apply the ERM rule with
parameterized by a vector w, that minimizes the empirical risk with respect to
We now show that when W = Rd and we are in the realizable case, then it is
possible to solve the ERM problem eﬃciently using linear programming. Indeed,
Equivalently, we need that w will satisfy the following set of linear inequalities
⟨w, Ψ(xi, yi)⟩> ⟨w, Ψ(xi, y)⟩.
Finding w that satisﬁes the preceding set of linear equations amounts to solving
As in the case of binary classiﬁcation, it is also possible to use a generalization
tionally hard. We tackle this diﬃculty using the method of convex surrogate
multiclass problems.
Generalized Hinge Loss
y⟨w, x⟩}. We now generalize the hinge loss to multiclass predictors of the form
Recall that a surrogate convex loss should upper bound the original nonconvex
loss, which in our case is ∆(hw(x), y). To derive an upper bound on ∆(hw(x), y)
we ﬁrst note that the deﬁnition of hw(x) implies that
⟨w, Ψ(x, y)⟩≤⟨w, Ψ(x, hw(x))⟩.
∆(hw(x), y) ≤∆(hw(x), y) + ⟨w, Ψ(x, hw(x)) −Ψ(x, y)⟩.
y′∈Y (∆(y′, y) + ⟨w, Ψ(x, y′) −Ψ(x, y)⟩)
We use the term “generalized hinge loss” to denote the preceding expression. As
ever the score of the correct label is larger than the score of any other label, y′,
by at least ∆(y′, y), namely,
⟨w, Ψ(x, y)⟩≥⟨w, Ψ(x, y′)⟩+ ∆(y′, y).
It is also immediate to see that ℓ(w, (x, y)) is a convex function with respect to w
and that ℓ(w, (x, y)) is ρ-Lipschitz with ρ = maxy′∈Y ∥Ψ(x, y′) −Ψ(x, y)∥.
We use the name “generalized hinge loss” since in the binary
becomes the vanilla hinge loss for binary classiﬁcation,
Geometric Intuition:
The value of ℓ(w, (x, y)) will be zero if there exists a direction w such that
when projecting the |Y| vectors onto this direction we obtain that each vector is
represented by the scalar ⟨w, Ψ(x, y)⟩, and we can rank the diﬀerent points on
the basis of these scalars so that
Multiclass, Ranking, and Complex Prediction Problems
• For each y′ ̸= y, the diﬀerence between ⟨w, Ψ(x, y)⟩and ⟨w, Ψ(x, y′)⟩is larger
than the loss of predicting y′ instead of y. The diﬀerence ⟨w, Ψ(x, y)⟩−
This is illustrated in the following ﬁgure:
Multiclass SVM and SGD
multiclass SVM rule:
input: (x1, y1), . . . , (xm, ym)
y′∈Y (∆(y′, yi) + ⟨w, Ψ(xi, y′) −Ψ(xi, yi)⟩)
ing generic convex optimization algorithms (or using the method described in
generalized hinge loss upper bounds the ∆loss, we immediately obtain an analog
B2m on a training set S ∼Dm
and let hw be the output of Multiclass SVM. Then,
D(h) = E(x,y)∼D[∆(h(x), y)] and Lg−hinge
(w) = E(x,y)∼D[ℓ(w, (x, y))]
We can also apply the SGD learning framework for minimizing Lg−hinge
functions. In light of this claim, in order to ﬁnd a subgradient of the generalized
deﬁnition of the generalized hinge loss. This yields the following algorithm:
SGD for Multiclass Learning
 ∆(y′, y) + ⟨w(t), Ψ(x, y′) −Ψ(x, y)⟩
set vt = Ψ(x, ˆy) −Ψ(x, y)
iterations (i.e., number of examples)
ρ2 T , then the output of SGD satisﬁes
pend implicitly on the size of Y via the norm of Ψ(x, y) and the fact that the
bounds are meaningful only when there exists some vector u, ∥u∥≤B, for which
(u) is not excessively large.
Multiclass, Ranking, and Complex Prediction Problems
Structured Output Prediction
Structured output prediction problems are multiclass problems in which Y is
very large but is endowed with a predeﬁned structure. The structure plays a
key role in constructing eﬃcient algorithms. To motivate structured learning
problems, consider the problem of optical character recognition (OCR). Suppose
we receive an image of some handwritten word and would like to predict which
word is written in the image. To simplify the setting, suppose we know how to
segment the image into a sequence of images, each of which contains a patch of
the image corresponding to a single letter. Therefore, X is the set of sequences
of images and Y is the set of sequences of letters. Note that the size of Y grows
exponentially with the maximal length of a word. An example of an image x
corresponding to the label y = “workable” is given in the following.
To tackle structure prediction we can rely on the family of linear predictors
described in the previous section. In particular, we need to deﬁne a reasonable
Ψ. By “good” we mean a feature mapping that will lead to a low approximation
error for the class of linear predictors with respect to Ψ and ∆. Once we do this,
we can rely, for example, on the SGD learning algorithm deﬁned in the previous
However, the huge size of Y poses several challenges:
over Y. How can we predict eﬃciently when Y is so large?
need to solve a maximization problem over Y.
In the previous section we have already shown that the sample complexity of
learning a linear multiclass predictor does not depend explicitly on the number
of classes. We just need to make sure that the norm of the range of Ψ is not too
large. This will take care of the overﬁtting problem. To tackle the computational
challenges we rely on the structure of the problem, and deﬁne the functions Ψ and
∆so that calculating the maximization problems in the deﬁnition of hw and in
the SGD algorithm can be performed eﬃciently. In the following we demonstrate
one way to achieve these goals for the OCR task mentioned previously.
To simplify the presentation, let us assume that all the words in Y are of length
r and that the number of diﬀerent letters in our alphabet is q. Let y and y′ be two
words (i.e., sequences of letters) in Y. We deﬁne the function ∆(y′, y) to be the
nient to think about x as a matrix of size n × r, where n is the number of pixels
in each image, and r is the number of images in the sequence. The j’th column
of x corresponds to the j’th image in the sequence (encoded as a vector of gray
level values of pixels). The dimension of the range of Ψ is set to be d = n q + q2.
That is, we sum the value of the i’th pixel only over the images for which y
whose gray level values are indicative of a certain letter. The second type of
features take the form
That is, we sum the number of times the letter i follows the letter j. Intuitively,
these features can capture rules like “It is likely to see the pair ‘qu’ in a word”
or “It is unlikely to see the pair ‘rz’ in a word.” Of course, some of these features
will not be very useful, so the goal of the learning process is to assign weights to
features by learning the vector w, so that the weighted score will give us a good
It is left to show how to solve the optimization problem in the deﬁnition
of hw(x) eﬃciently, as well as how to solve the optimization problem in the
deﬁnition of ˆy in the SGD algorithm. We can do this by applying a dynamic
programming procedure. We describe the procedure for solving the maximization
in the deﬁnition of hw and leave as an exercise the maximization problem in the
deﬁnition of ˆy in the SGD algorithm.
To derive the dynamic programming procedure, let us ﬁrst observe that we
Multiclass, Ranking, and Complex Prediction Problems
Therefore, the prediction can be written as
In the following we derive a dynamic programming procedure that solves every
Clearly, the maximum of ⟨w, Ψ(x, y)⟩equals maxs Ms,r. Furthermore, we can
calculate M in a recursive manner:
This yields the following procedure:
Dynamic Programming for Calculating hw(x) as Given
set yt = argmaxs Ms,r
output: y = (y1, . . . , yr)
vance.” A typical application is ordering results of a search engine according to
tronic transactions and should alert for possible fraudulent transactions. Such a
system should order transactions according to how suspicious they are.
Formally, let X ∗= S∞
X of arbitrary length. A ranking hypothesis, h, is a function that receives a
sequence of instances ¯x = (x1, . . . , xr) ∈X ∗, and returns a permutation of [r].
sorting the elements of y we obtain the permutation over [r]. We denote by
In the notation of our PAC learning model, the examples domain is Z =
We next turn to describe loss functions for ranking. There are many possible ways
to deﬁne such loss functions, and here we list a few examples. In all the examples
we deﬁne ℓ(h, (¯x, y)) = ∆(h(¯x), y), for some function ∆: S∞
a loss function is almost never used in practice as it does not distinguish
between the case in which π(y′) is almost equal to π(y) and the case in
which π(y′) is completely diﬀerent from π(y).
order in the two permutations. This can be written as
similarity between the two rankings.
phasizes the correctness at the top of the list by using a monotonically
cumulative gain measure:
In words, if we interpret yi as a score of the “true relevance” of item i, then
we take a weighted sum of the relevance of the elements, while the weight
of yi is determined on the basis of the position of i in π(y′). Assuming that
G(y, y). We can therefore deﬁne a normalized discounted cumulative gain
by the ratio G(y′, y)/G(y, y), and the corresponding loss function would
(D(π(y)i) −D(π(y′)i)) yi.
Multiclass, Ranking, and Complex Prediction Problems
A typical way to deﬁne the discount function is by
where k < r is a parameter. This means that we care more about elements
that are ranked higher, and we completely ignore elements that are not at
the performance of search engines since in such applications it makes sense
completely to ignore elements that are not at the top of the ranking.
Once we have a hypothesis class and a ranking loss function, we can learn a
ranking function using the ERM rule. However, from the computational point of
view, the resulting optimization problem might be hard to solve. We next discuss
how to learn linear predictors for ranking.
Linear Predictors for Ranking
A natural way to deﬁne a ranking function is by projecting the instances onto
some vector w and then outputting the resulting scalars as our representation
deﬁne a ranking function
hw((x1, . . . , xr)) = (⟨w, x1⟩, . . . , ⟨w, xr⟩).
instances into some feature space and then takes the inner products with w in the
Given some W ⊂Rd, we can now deﬁne the hypothesis class HW = {hw :
loss function, we can apply the ERM rule as follows: Given a training set, S =
As in the case of binary classiﬁcation, for many loss functions this problem is
computationally hard, and we therefore turn to describe convex surrogate loss
functions. We describe the surrogates for the Kendall tau loss and for the NDCG
A Hinge Loss for the Kendall Tau Loss Function:
In particular, for every (i, j) we can rewrite
j = ⟨w, xi −xj⟩. It follows that we can use the hinge loss upper
Taking the average over the pairs we obtain the following surrogate convex loss
for the Kendall tau loss function:
tau loss. It is also a ρ-Lipschitz function with parameter ρ ≤maxi,j ∥xi −xj∥.
A Hinge Loss for the NDCG Loss Function:
The NDCG loss function depends on the predicted ranking vector y′ ∈Rr via
the permutation it induces. To derive a surrogate loss function we ﬁrst make
the following observation. Let V be the set of all permutations of [r] encoded as
Let us denote Ψ(¯x, v) = Pr
sensitive multiclass classiﬁcation as a surrogate loss function for the NDCG loss
∆(hw(¯x), y) ≤∆(hw(¯x), y) + ⟨w, Ψ(¯x, π(hw(¯x)))⟩−⟨w, Ψ(¯x, π(y))⟩
[∆(v, y) + ⟨w, Ψ(¯x, v)⟩−⟨w, Ψ(¯x, π(y))⟩]
Multiclass, Ranking, and Complex Prediction Problems
equivalent to solving the problem
Ai,j = jαi + D(j) βi.
Now, let us think about each j as a “worker,” each i as a “task,” and Ai,j as
the cost of assigning task i to worker j. With this view, the problem of ﬁnding
v becomes the problem of ﬁnding an assignment of the tasks to workers of
minimal cost. This problem is called “the assignment problem” and can be solved
Another way to solve the assignment problem is using linear programming. To
do so, let us ﬁrst write the assignment problem as
A matrix B that satisﬁes the constraints in the preceding optimization problem
is called a permutation matrix. This is because the constraints guarantee that
redundant – if we solve the optimization problem while simply omitting the
combinatorial constraint, then we are still guaranteed that there is an optimal
solution that will satisfy this constraint. This is formalized later.
mizing ⟨A, B⟩such that B is a permutation matrix.
The following claim states that every doubly stochastic matrix is a convex
combination of permutation matrices.
The set of doubly stochastic
matrices in Rr,r is the convex hull of the set of permutation matrices in Rr,r.
On the basis of the claim, we easily obtain the following:
⟨A, B⟩≤⟨A, Ci⟩for every i. We claim that there is some i for which ⟨A, B⟩=
⟨A, Ci⟩. This must be true since otherwise, if for every i ⟨A, B⟩< ⟨A, Ci⟩, we
which cannot hold. We have thus shown that some permutation matrix, Ci,
satisﬁes ⟨A, B⟩= ⟨A, Ci⟩. But, since for every other permutation matrix C we
Bipartite Ranking and Multivariate Performance Measures
In the previous section we described the problem of ranking. We used a vector
are diﬀerent from each other, then y speciﬁes a full order over [r]. However, if two
elements of y attain the same value, yi = yj for i ̸= j, then y can only specify a
partial order over [r]. In such a case, we say that xi and xj are of equal relevance
either relevant or nonrelevant. This setting is often called “bipartite ranking.” For
example, in the fraud detection application mentioned in the previous section,
Seemingly, we can solve the bipartite ranking problem by learning a binary
classiﬁer, applying it on each instance, and putting the positive ones at the top
of the ranked list. However, this may lead to poor results as the goal of a binary
goal of a ranker might be signiﬁcantly diﬀerent. To illustrate this, consider again
the problem of fraud detection. Usually, most of the transactions are benign (say
predictor is meaningless for the fraud detection application. The crux of the
Multiclass, Ranking, and Complex Prediction Problems
interested in. A more adequate performance measure should take into account
the predictions over the entire set of instances. For example, in the previous
section we have deﬁned the NDCG loss, which emphasizes the correctness of the
speciﬁcally adequate for bipartite ranking problems.
As in the previous section, we are given a sequence of instances, ¯x = (x1, . . . , xr),
threshold transforms the vector y′ ∈Rr into the vector (sign(y′
The recall (a.k.a. sensitivity) of a prediction vector is the fraction of true
positives y′ “catches,” namely,
predictions among the positive labels we predict, namely,
is the fraction of true negatives that our predictor “catches,” namely,
various techniques for combining both the precision and recall.
• Averaging sensitivity and speciﬁcity: This measure is the average of the
. This is also the accuracy
on positive examples averaged with the accuracy on negative examples.
the numbers a, b, c as follows; F1 =
• Fβ-score: It is like F1 score, but we attach β2 times more importance to
recall than to precision, that is,
Recall . It can also be written as
• Recall at k: We measure the recall while the prediction must contain at most
nient, for example, in the application of a fraud detection system, where a
bank employee can only handle a small number of suspicious transactions.
• Precision at k: We measure the precision while the prediction must contain
mance measures. Note that these measures are highly diﬀerent from the average
Linear Predictors for Bipartite Ranking
We next describe how to train linear predictors for bipartite ranking. As in the
previous section, a linear predictor for ranking is deﬁned to be
hw(¯x) = (⟨w, x1⟩, . . . , ⟨w, xr⟩).
The corresponding loss function is one of the multivariate performance measures
described before. The loss function depends on y′ = hw(¯x) via the binary vector
it induces, which we denote by
As in the previous section, to facilitate an eﬃcient algorithm we derive a convex
surrogate loss function on ∆. The derivation is similar to the derivation of the
generalized hinge loss for the NDCG ranking loss, as described in the previous
Multiclass, Ranking, and Complex Prediction Problems
∆(hw(¯x), y) = ∆(b(hw(¯x)), y)
(bi(hw(¯x)) −yi)⟨w, xi⟩
In the following we describe how to ﬁnd this maximizer eﬃciently for any
performance measure that can be written as a function of the numbers a, b, c, d
for which the values of a, b satisfy some constraints. For example, for “recall at
within each ¯Ya,b that has a nonempty intersection with V separately, and then
take the optimal value. The key observation is that once we are searching only
within ¯Ya,b, the value of ∆is ﬁxed so we only need to maximize the expression
Suppose the examples are sorted so that ⟨w, x1⟩≥· · · ≥⟨w, xr⟩. Then, it is
easy to verify that we would like to set vi to be positive for the smallest indices
yields the following procedure.
(x1, . . . , xr), (y1, . . . , yr), w, V, ∆
∆is a function of a, b, c, d
µ = (⟨w, x1⟩, . . . , ⟨w, xr⟩), α⋆= −∞
let i1, . . . , iP be the (sorted) indices of the positive examples
let j1, . . . , jN be the (sorted) indices of the negative examples
calculate ∆using a, b, c, d
Many real world supervised learning problems can be cast as learning a multiclass
predictor. We started the chapter by introducing reductions of multiclass learning
to binary learning. We then described and analyzed the family of linear predictors
for multiclass learning. We have shown how this family can be used even if the
number of classes is extremely large, as long as we have an adequate structure
study the sample complexity of multiclass learning in more detail.
Bibliographic Remarks
der the framework of Error Correction Output Codes (ECOC) (Dietterich &
Multiclass, Ranking, and Complex Prediction Problems
in which we analyze the sample complexity of multiclass learning.
Structured output SVM has been studied in (Weston, Chapelle, Vapnik, Elisseeﬀ
The dynamic procedure we have presented for calculating the prediction hw(x)
calculated by the Viterbi procedure in HMMs (see, for instance, (Rabiner &
output is closely related to the problem of inference in graphical models (see, for
served that the maximization problem in the deﬁnition of the generalized hinge
loss is equivalent to the assignment problem.
ranking with multivariate performance measures.
such that every example (x, y) ∈S falls within a ball centered at µy whose
multivector construction, namely,
Hint: Observe that for every example (x, y) ∈S we can write x = µy + v for
Multiclass Batch Perceptron
A training set (x1, y1), . . . , (xm, ym)
If (∃i and y ̸= yi s.t. ⟨w(t), Ψ(xi, yi)⟩≤⟨w(t), Ψ(xi, y)⟩) then
Prove the following:
Assume that there exists w⋆such that for all i and for all
dure for multiclass prediction. You can assume that ∆(y′, y) = Pr
an instance x by traveling from a root node of a tree to a leaf. For simplicity
trees can be applied for other prediction problems as well. At each node on the
input space. Usually, the splitting is based on one of the features of x or on a
predeﬁned set of splitting rules. A leaf contains a speciﬁc label. An example of
gives slightly to palm pressure
pale green to pale yellow
To check if a given papaya is tasty or not, the decision tree ﬁrst examines
the color of the Papaya. If this color is not in the range pale green to pale
yellow, then the tree immediately predicts that the papaya is not tasty without
additional tests. Otherwise, the tree turns to examine the softness of the papaya.
If the softness level of the papaya is such that it gives slightly to palm pressure,
the decision tree predicts that the papaya is tasty. Otherwise, the prediction is
decision trees – the resulting classiﬁer is very simple to understand and interpret.
Personal use only. Not for distribution. Do not post.
A popular splitting rule at internal nodes of the tree is based on thresholding the
value of a single feature. That is, we move to the right or left child of the node on
is the threshold. In such cases, we can think of a decision tree as a splitting of
the instance space, X = Rd, into cells, where each leaf of the tree corresponds
to one cell. It follows that a tree with k leaves can shatter a set of k instances.
Hence, if we allow decision trees of arbitrary size, we obtain a hypothesis class
of inﬁnite VC dimension. Such an approach can easily lead to overﬁtting.
To avoid overﬁtting, we can rely on the minimum description length (MDL)
hand ﬁts the data well while on the other hand is not too large.
is a vector of d bits. In that case, thresholding the value of a single feature
we can model the “papaya decision tree” earlier by assuming that a papaya is
represents whether the color is pale green to pale yellow or not, and the bit x2
represents whether the softness is gives slightly to palm pressure or not. With
algorithms and analysis we provide in the following can be extended to more
With the aforementioned simplifying assumption, the hypothesis class becomes
the number of examples we need to PAC learn the hypothesis class grows with
2d. Unless d is very small, this is a huge number of examples.
The underlying prior knowledge is that we should prefer smaller trees over larger
trees. To formalize this intuition, we ﬁrst need to deﬁne a description language
for decision trees, which is preﬁx free and requires fewer bits for smaller decision
code. Each block indicates whether the current node is:
This bound performs a tradeoﬀ: on the one hand, we expect larger, more complex
decision trees to have a smaller training risk, LS(h), but the respective value of
n will be larger. On the other hand, smaller decision trees will have a smaller
value of n, but LS(h) might be larger. Our hope (or prior knowledge) is that we
can ﬁnd a decision tree with both low empirical risk, LS(h), and a number of
nodes n not too high. Our bound indicates that such a tree will have low true
Decision Tree Algorithms
Consequently, practical decision tree learning algorithms are based on heuristics
such as a greedy approach, where the tree is constructed gradually, and locally
optimal decisions are made at the construction of each node. Such algorithms
cannot guarantee to return the globally optimal decision tree but tend to work
reasonably well in practice.
A general framework for growing a decision tree is as follows. We start with
a tree with a single leaf (the root) and assign this leaf a label according to a
majority vote among all labels over the training set. We now perform a series of
iterations. On each iteration, we examine the eﬀect of splitting a single leaf. We
deﬁne some “gain” measure that quantiﬁes the improvement due to this split.
Then, among all possible splits, we either choose the one that maximizes the
gain and perform it, or choose not to split the leaf at all.
In the following we provide a possible implementation. It is based on a popular
child, we can replace the node by its child without aﬀecting the predictions of the decision
The algorithm works by recursive calls, with the initial call being ID3(S, [d]),
and returns a decision tree. In the pseudocode that follows, we use a call to a
procedure Gain(S, i), which receives a training set S and an index i and evaluates
the gain of a split of the tree according to the ith feature. We describe several
if A = ∅, return a leaf whose value = majority of labels in S
if all examples in S have the same label
Return a leaf whose value = majority of labels in S
Implementations of the Gain Measure
Diﬀerent algorithms use diﬀerent implementations of Gain(S, i). Here we present
three. We use the notation PS[F] to denote the probability that an event holds
with respect to the uniform distribution over S.
Train Error: The simplest deﬁnition of gain is the decrease in training error.
the error after splitting on feature i is
Therefore, we can deﬁne Gain to be the diﬀerence between the two, namely,
Information Gain: Another popular gain measure that is used in the ID3
gain is the diﬀerence between the entropy of the label before and after the split,
and is achieved by replacing the function C in the previous expression by the
Yet another deﬁnition of a gain, which is used by the CART
Both the information gain and the Gini index are smooth and concave upper
The ID3 algorithm described previously still suﬀers from a big problem: The
returned tree will usually be very large. Such trees may have low empirical risk,
but their true risk will tend to be high – both according to our theoretical
analysis, and in practice. One solution is to limit the number of iterations of ID3,
leading to a tree with a bounded number of nodes. Another common solution is
to prune the tree after it is built, hoping to reduce it to a much smaller tree,
but still with a similar empirical error. Theoretically, according to the bound in
much, we are likely to get a decision tree with a smaller true risk.
might be replaced with one of its subtrees or with a leaf, based on some bound
of a common template is given in the following.
Generic Tree Pruning Procedure
of a decision tree T, based on a sample of size m),
ﬁnd T ′ which minimizes f(T ′, m), where T ′ is any of the following:
the current tree after replacing node j with its left subtree.
the current tree after replacing node j with its right subtree.
In the previous section we have described an algorithm for growing a decision
tree assuming that the features are binary and the splitting rules are of the
The basic idea is to reduce the problem to the case of binary features as
procedure described in the previous section. It is easy to verify that for any
features there exists a decision tree over the constructed binary features with
the same training error and the same number of nodes.
is m, then the number of constructed binary features becomes dm. Calculating
the Gain of each feature might therefore take O(dm2) operations. However, using
a more clever implementation, the runtime can be reduced to O(dm log(m)). The
idea is similar to the implementation of ERM for decision stumps as described
As mentioned before, the class of decision trees of arbitrary size has inﬁnite VC
dimension. We therefore restricted the size of the decision tree. Another way
to reduce the danger of overﬁtting is by constructing an ensemble of trees. In
particular, in the following we describe the method of random forests, introduced
A random forest is a classiﬁer consisting of a collection of decision trees, where
each tree is constructed by applying an algorithm A on the training set S and
The prediction of the random forest is obtained by a majority vote over the
predictions of the individual trees.
To specify a particular random forest, we need to deﬁne the algorithm A and
from S with replacements; namely, we sample a new training set S′ of size m′
using the uniform distribution over S. Second, we construct a sequence I1, I2, . . .,
where each It is a subset of [d] of size k, which is generated by sampling uniformly
the algorithm A grows a decision tree (e.g., using the ID3 algorithm) based on
the sample S′, where at each splitting stage of the algorithm, the algorithm is
restricted to choosing a feature that maximizes Gain from the set It. Intuitively,
if k is small, this restriction may prevent overﬁtting.
Decision trees are very intuitive predictors. Typically, if a human programmer
creates a predictor it will look like a decision tree. We have shown that the VC
dimension of decision trees with k leaves is k and proposed the MDL paradigm
for learning decision trees. The main problem with decision trees is that they
cedures for training them.
Bibliographic Remarks
The proof of the hardness of training decision trees is given in Hyaﬁl & Rivest
Suppose we wish to use this training set in order to build a decision tree of
node and its children according to the algorithm, but instead of keeping
on with the recursion, we stop and pick leaves according to the majority
label in each subtree). Assume that the subroutine used to measure the
quality of each feature is based on the entropy function (so we measure the
information gain), and that if two features get the same score, one of them
is picked arbitrarily. Show that the training error of the resulting decision
Nearest Neighbor algorithms are among the simplest of all machine learning
algorithms. The idea is to memorize the training set and then to predict the
label of any new instance on the basis of the labels of its closest neighbors in
the training set. The rationale behind such a method is based on the assumption
that the features that are used to describe the domain points are relevant to
Furthermore, in some situations, even when the training set is immense, ﬁnding
a nearest neighbor can be done extremely fast (for example, when the training
set is the entire Web and distances are based on links).
Note that, in contrast with the algorithmic paradigms that we have discussed
so far, like ERM, SRM, MDL, or RLM, that are determined by some hypothesis
class, H, the Nearest Neighbor method ﬁgures out a label on any test point
without searching for a predictor within some predeﬁned class of functions.
In this chapter we describe Nearest Neighbor methods for classiﬁcation and
regression problems. We analyze their performance for the simple case of binary
classiﬁcation and discuss the eﬃciency of implementing these methods.
the distance between any two elements of X. For example, if X = Rd then ρ can
be the Euclidean distance, ρ(x, x′) = ∥x −x′∥=
Let S = (x1, y1), . . . , (xm, ym) be a sequence of training examples. For each
distance to x, ρ(x, xi). That is, for all i < m,
Personal use only. Not for distribution. Do not post.
depicted are the sample points, and the predicted label of any new point will be the
label of the sample point in the center of the cell it belongs to. These cells are called a
Voronoi Tessellation of the space.
input: a training sample S = (x1, y1), . . . , (xm, ym)
For regression problems, namely, Y = R, one can deﬁne the prediction to be
 (xπ1(x), yπ1(x)), . . . , (xπk(x), yπk(x))
It is easy to verify that we can cast the prediction by majority of labels (for
an appropriate choice of φ. The generality can lead to other rules; for example, if
Y = R, we can take a weighted average of the targets according to the distance
sistency results, analyzing the performance of NN rules when the sample size, m,
eralization performance as a function of the size of such ﬁnite training sets and
of m and how it depends on properties of the distribution. We will also explain
particular, the analysis speciﬁes the number of examples required to achieve a
that the labeling rule is “well behaved” (in a sense we will deﬁne later).
We start by introducing some notation. Let D be a distribution over X × Y.
the conditional probability1 over the labels, that is,
Recall that the Bayes optimal rule (that is, the hypothesis that minimizes LD(h)
over all functions) is
assumption means that if two vectors are close to each other then their labels
are likely to be the same.
The following lemma applies the Lipschitzness of the conditional probability
expected distance between each test instance and its nearest neighbor in the
S = (x1, y1), . . . , (xm, ym) be an i.i.d. sample and let hS be its corresponding
S∼Dm,x∼D[∥x −xπ1(x)∥].
probability to sample a training set S and an additional example (x, y), such
that the label of π1(x) is diﬀerent from y. In other words, we can ﬁrst sample
m unlabeled examples, Sx = (x1, . . . , xm), according to DX , and an additional
unlabeled example, x ∼DX , then ﬁnd π1(x) to be the nearest neighbor of x in
Sx, and ﬁnally sample y ∼η(x) and yπ1(x) ∼η(π1(x)). It follows that
y∼η(x),y′∼η(π1(x))[y ̸= y′]
We next upper bound Py∼η(x),y′∼η(x′)[y ̸= y′] for any two domain points x, x′:
the probability is at most:
Finally, the error of the Bayes optimal classiﬁer is
Combining the preceding two inequalities concludes our proof.
The next step is to bound the expected distance between a random x and its
closest element in S. We ﬁrst need the following general probability lemma. The
lemma bounds the probability weight of subsets that are not hit by a random
sample, as a function of the size of that sample.
Let C1, . . . , Cr be a collection of subsets of some domain set, X.
Let S be a sequence of m points sampled i.i.d. according to some probability
distribution, D over X. Then,
From the linearity of expectation, we can rewrite:
Next, for each i we have
Combining the preceding two equations we get
me and this concludes the proof.
Equipped with the preceding lemmas we are now ready to state and prove the
For each x, x′ in the same box we have ∥x−x′∥≤
we conclude our proof.
Bayes error. The analysis can be generalized to larger values of k, showing that
The “Curse of Dimensionality”
of η) and with d, the Euclidean dimension of the domain set X. In fact, it is easy
increase exponentially with the dimension. The following theorem tells us that
this is not just an artifact of our upper bound, but, for some distributions, this
amount of examples is indeed necessary for learning with the NN rule.
Fix any values of c and d. Let Gd
contains the set of all binary valued functions over that domain. We can therefore
needed sample sizes for learning that class. The number of points on the grid is
a predeﬁned set of hypotheses, it still relies on some prior knowledge – its success
depends on the assumption that the dimension and the Lipschitz constant of the
underlying distribution, η, are not too high.
entire training data set to be stored, and at test time, we need to scan the entire
data set in order to ﬁnd the neighbors. The time of applying the NN rule is
therefore Θ(d m). This leads to expensive computation at test time.
When d is small, several results from the ﬁeld of computational geometry have
However, the space required by these data structures is roughly mO(d), which
makes these methods impractical for larger values of d.
To overcome this problem, it was suggested to improve the search method by
guaranteed to retrieve a point within distance of at most r times the distance
to the nearest neighbor. Three popular approximate algorithms for NN are the
that “things that look alike must be alike.” We formalized this intuition using
risk of the Bayes optimal rule. We have also derived a lower bound that shows
nentially with the dimension. As a result, NN is usually performed in practice
after a dimensionality reduction preprocessing step. We discuss dimensionality
Bibliographic Remarks
verges to twice the Bayes optimal error under mild conditions. Following a lemma
is consistent (with respect to the hypothesis class of all functions from Rd to
another ﬁnite sample bound for NN that is more similar to VC bounds.
Let h⋆be the Bayes optimal hypothesis. Then,
Let C1, . . . , Cr be a collection of subsets of some domain set,
X. Let S be a sequence of m points sampled i.i.d. according to some probability
me to show that for such i we have
with expected value p.” Prove the following lemma:
• To conclude the proof of the lemma, you can rely on the following inequality
y∼p′[y ̸= y′] + |p −p′|.
box we have ∥x −x′∥≤
• To bound the second summand, let us ﬁx S|x and x such that all the k
assume that the k NN are x1, . . . , xk. Denote pi = η(xi) and let p =
y∼η(x)[hS(x) ̸= y] ≤
y∼p[hS(x) ̸= y] + |p −η(x)|.
to conclude the proof.
An artiﬁcial neural network is a model of computation inspired by the structure
of neural networks in the brain. In simpliﬁed models of the brain, it consists of
a large number of basic computing devices (neurons) that are connected to each
other in a complex communication network, through which the brain is able to
carry out highly complex computations. Artiﬁcial neural networks are formal
computation constructs that are modeled after this computation paradigm.
edge performance on several learning tasks.
A neural network can be described as a directed graph whose nodes correspond
to neurons and edges correspond to links between them. Each neuron receives
as input a weighted sum of the outputs of the neurons connected to its incoming
edges. We focus on feedforward networks in which the underlying graph does not
In the context of learning, we can deﬁne a hypothesis class consisting of neural
ture of the network and diﬀer in the weights over edges. As we will show in
the size of the network is the number of nodes in it. It follows that the family
of hypothesis classes of neural networks of polynomial size can suﬃce for all
practical learning tasks, in which our goal is to learn predictors which can be
ple complexity of learning such hypothesis classes is also bounded in terms of the
size of the network. Hence, it seems that this is the ultimate learning paradigm
plexity and has the minimal approximation error among all hypothesis classes
consisting of eﬃciently implementable predictors.
learner if the loss function is convex. In neural networks, the loss function is
highly nonconvex. Nevertheless, we can still implement the SGD algorithm and
Personal use only. Not for distribution. Do not post.
hope it will ﬁnd a reasonable solution (as happens to be the case in several
networks. In particular, the most complicated operation is the calculation of the
gradient of the loss function with respect to the parameters of the network. We
present the backpropagation algorithm that eﬃciently calculates the gradient.
Feedforward Neural Networks
The idea behind neural networks is that many neurons can be joined together
by communication links to carry out complex computations. It is common to
describe the structure of a neural network as a graph whose nodes are the neurons
and each (directed) edge in the graph links the output of some neuron to the
input of another neuron. We will restrict our attention to feedforward network
structures in which the underlying graph does not contain cycles.
A feedforward neural network is described by a directed acyclic graph, G =
threshold function. We call σ the “activation” function of the neuron. Each edge
in the graph links the output of some neuron to the input of another neuron.
The input of a neuron is obtained by taking a weighted sum of the outputs of
all the neurons connected to it, where the weighting is according to w.
To simplify the description of the calculation performed by the network, we
further assume that the network is organized in layers. That is, the set of nodes
can be decomposed into a union of (nonempty) disjoint subsets, V = ·∪T
output of neuron i in V0 is simply xi. The last neuron in V0 is the “constant”
and by ot,i(x) the output of vt,i when the network is fed with the input vector x.
We now proceed with the calculation in a layer by layer manner. Suppose we
have calculated the outputs of the neurons at layer t. Then, we can calculate
the output layer. In simple prediction problems the output layer contains a single
neuron whose output is the output of the network.
We refer to T as the number of layers in the network (excluding V0), or the
“depth” of the network. The size of the network is |V |. The “width” of the
network is maxt |Vt|. An illustration of a layered feedforward neural network of
neuron in the hidden layer that has no incoming edges. This neuron will output
Learning Neural Networks
Once we have speciﬁed a neural network by (V, E, σ, w), we obtain a function
tors by ﬁxing the graph (V, E) as well as the activation function σ and letting
The triplet (V, E, σ) is often called the architecture of the network. We denote
the hypothesis class by
HV,E,σ = {hV,E,σ,w : w is a mapping from E to R}.
That is, the parameters specifying a hypothesis in the hypothesis class are the
weights over the edges of the network.
We can now study the approximation error, estimation error, and optimization
error of HV,E,σ by studying what type of functions hypotheses in HV,E,σ can
study the estimation error of HV,E,σ, for the case of binary classiﬁcation (i.e.,
commonly used heuristic for training HV,E,σ.
The Expressive Power of Neural Networks
In this section we study the expressive power of neural networks, namely, what
type of functions can be implemented using a neural network. More concretely,
we will ﬁx some architecture, V, E, σ, and will study what functions hypotheses
in HV,E,σ can implement, as a function of the size of V .
We start the discussion with studying which type of Boolean functions (i.e.,
for every computer in which real numbers are stored using b bits, whenever we
be implemented by HV,E,sign can tell us which functions can be implemented on
a computer that stores real numbers using b bits.
We begin with a simple claim, showing that without restricting the size of the
network, every Boolean function can be implemented using a neural network of
be some Boolean function. We need to show that we can adjust the weights so
implements the function gi(x). Next, we observe that f(x) is the disjunction of
the functions gi(x), and therefore can be written as
which concludes our proof.
The preceding claim shows that neural networks can implement any Boolean
function. However, this is a very weak property, as the size of the resulting
network might be exponentially large. In the construction given at the proof of
is not an artifact of our proof, as stated in the following theorem.
For every n, let s(n) be the minimal integer such that there
exists a graph (V, E) with |V | = s(n) such that the hypothesis class HV,E,sign
Similar results hold for HV,E,σ where σ is the sigmoid function.
Suppose that for some (V, E) we have that HV,E,sign contains all functions
proof for the case of networks with the sign activation function. The proof for
the sigmoid case is analogous.
It is possible to derive a similar theorem for HV,E,σ for any σ, as
long as we restrict the weights so that it is possible to express every weight using
sider hypothesis classes where diﬀerent neurons can employ diﬀerent activation
functions, as long as the number of allowed activation functions is also ﬁnite.
ceding claim tells us that it is impossible to express all Boolean functions using
a network of polynomial size. On the positive side, in the following we show
that all Boolean functions that can be calculated in time O(T(n)) can also be
that can be implemented using a Turing machine using runtime of at most T(n).
The proof of this theorem relies on the relation between the time complexity
nutshell, a Boolean circuit is a type of network in which the individual neurons
plexity measures the size of Boolean circuits required to calculate functions. The
relation between time complexity and circuit complexity can be seen intuitively
as follows. We can model each step of the execution of a computer program as a
simple operation on its memory state. Therefore, the neurons at each layer of the
network will reﬂect the memory state of the computer at the corresponding time,
and the translation to the next layer of the network involves a simple calculation
that can be carried out by the network. To relate Boolean circuits to networks
with the sign activation function, we need to show that we can implement the
operations of conjunction, disjunction, and negation, using the sign activation
tion function. The following lemma shows that the sign activation function can
also implement conjunctions and disjunctions of its inputs.
Suppose that a neuron v, that implements the sign activation
function, has k incoming edges, connecting it to neurons whose outputs are in
by adjusting the weights on the edges to v, the output of v can implement the
conjunction or the disjunction of its inputs.
tion, f(x) = ∧ixi, then it can be written as f(x) = sign
Similarly, the disjunction function, f(x) = ∨ixi, can be written as f(x) =
functions, the size of the network here again cannot be polynomial in n. This is
such that there exists a graph (V, E) with |V | = s(n) such that the hypothesis class
HV,E,σ, with σ being the sigmoid function, can approximate, to within precision
and show how to express them using a neural network with the sign activation
layer. Each neuron in the hidden layer implements a halfspace predictor. Then,
the single neuron at the output layer applies a halfspace on top of the binary
outputs of the neurons in the hidden layer. As we have shown before, a halfspace
can implement the conjunction function. Therefore, such networks contain all
of neurons in the hidden layer; namely, they can express all convex polytopes
We have shown that a neuron in layer V2 can implement a function that
indicates whether x is in some convex polytope. By adding one more layer, and
letting the neuron in the output layer implement the disjunction of its inputs,
we get a network that computes the union of polytopes. An illustration of such
a function is given in the following.
The Sample Complexity of Neural Networks
Next we discuss the sample complexity of learning the class HV,E,σ. Recall that
fore, we focus on calculating the VC dimension of hypothesis classes of the form
HV,E,σ, where the output layer of the graph contains a single neuron.
We start with the sign activation function, namely, with HV,E,sign. What is
the VC dimension of this class? Intuitively, since we learn |E| parameters, the
VC dimension should be order of |E|. This is indeed the case, as formalized by
the following theorem.
The VC dimension of HV,E,sign is O(|E| log(|E|)).
pothesis class by H. Recall the deﬁnition of the growth function, τH(m), from
nition for a set of functions from X to some ﬁnite set Y, by letting HC be the
restriction of H to functions from C to Y, and keeping the deﬁnition of τH(m)
Our neural network is deﬁned by a layered graph. Let V0, . . . , VT be the layers
that the growth function of a composition of hypothesis classes is bounded by
the products of the growth functions of the individual classes. Therefore,
In addition, each H(t) can be written as a product of function classes, H(t) =
classes, and this yields
Let dt,i be the number of edges that are headed to the ith neuron of layer t.
Since the neuron is a homogenous halfspace hypothesis and the VC dimension
of homogenous halfspaces is the dimension of their input, we have by Sauer’s
Overall, we obtained that
Now, assume that there are m shattered points. Then, we must have τH(m) =
2m, from which we obtain
Next, we consider HV,E,σ, where σ is the sigmoid function. Surprisingly, it
but the proof is beyond the scope of this book. In any case, since in practice
we only consider networks in which the weights have a short representation as
obtain that such networks have a VC dimension of O(|E|), even if we use the
sigmoid activation function.
The Runtime of Learning Neural Networks
In the previous sections we have shown that the class of neural networks with an
mented eﬃciently, and that the sample complexity has a favorable dependence
on the size of the network. In this section we turn to the analysis of the time
complexity of training neural networks.
We ﬁrst show that it is NP hard to implement the ERM rule with respect to
in the hidden layer.
constant neuron, and a single output node. Then, it is NP hard to implement the
ERM rule with respect to HV,E,sign.
One way around the preceding hardness result could be that for the purpose
One may also wonder whether it may be possible to change the architecture
of the network so as to circumvent the hardness result. That is, maybe ERM
with respect to the original network structure is computationally hard but ERM
with respect to some other, larger, network may be implemented eﬃciently (see
vation functions (such as sigmoids, or any other type of eﬃciently computable
activation functions). There is a strong indication that all of such approaches
are doomed to fail. Indeed, under some cryptographic assumption, the problem
implies that, under the same cryptographic assumption, any hypothesis class
which contains intersections of halfspaces cannot be learned eﬃciently.
learner if the loss function is convex. In neural networks, the loss function is
highly nonconvex. Nevertheless, we can still implement the SGD algorithm and
hope it will ﬁnd a reasonable solution (as happens to be the case in several
SGD and Backpropagation
The problem of ﬁnding a hypothesis in HV,E,σ with a low risk amounts to the
problem of tuning the weights over the edges. In this section we show how to
apply a heuristic search for good weights using the SGD algorithm. Throughout
the derivation holds for any diﬀerentiable scalar function.
Suppose the network has n input neurons and k output neurons, and denote by
deﬁned by w. Let us denote by ∆(hw(x), y) the loss of predicting hw(x) when
every diﬀerentiable function. Finally, given a distribution D over the examples
domain, Rn × Rk, let LD(w) be the risk of the network, namely,
(x,y)∼D [∆(hw(x), y)] .
Recall the SGD algorithm for minimizing the risk function LD(w). We repeat
to the neural network application because of the nonconvexity of the objective
we initialize w to be a randomly chosen vector with values close to zero. This
is because an initialization with the zero vector will lead all hidden neurons to
have the same weights (if the network is a full layered network). In addition,
the hope is that if we repeat the SGD procedure several times, where each time
we initialize the process with a new random vector, one of the runs will lead
to a good local minimum. Second, while a ﬁxed step size, η, is guaranteed to
be good enough for convex problems, here we utilize a variable step size, ηt, as
choice of the sequence ηt is more signiﬁcant, and it is tuned in practice by a trial
and error manner. Third, we output the best performing vector on a validation
set. In addition, it is sometimes helpful to add regularization on the weights,
gradient does not have a closed form solution. Instead, it is implemented using
the backpropagation algorithm, which will be described in the sequel.
SGD for Neural Networks
number of iterations τ
step size sequence η1, η2, . . . , ητ
layered graph (V, E)
calculate gradient vi = backpropagation(x, y, w, (V, E), σ)
¯w is the best performing w(i) on a validation set
example (x, y), weight vector w, layered graph (V, E),
Explaining How Backpropagation Calculates the Gradient:
We next explain how the backpropagation algorithm calculates the gradient of
the loss function on an example (x, y) with respect to the vector w. Let us ﬁrst
recall a few deﬁnitions from vector calculus. Each element of the gradient is
the partial derivative with respect to the variable in w corresponding to one of
the edges of the network. Recall the deﬁnition of a partial derivative. Given a
(represented as a row vector). Two examples of Jacobian calculations, which we
will later use, are as follows.
• For every n, we use the notation σ to denote the function from Rn to Rn
The chain rule for taking the derivative of a composition of functions can be
Jw(f ◦g) = Jg(w)(f)Jw(g).
Jw(σ ◦g) = diag(σ′(Aw)) A.
To describe the backpropagation algorithm, let us ﬁrst decompose V into the
layers of the graph, V = ·∪T
Since when calculating the partial derivative with respect to the weight of some
edge we ﬁx all other weights, these additional “phantom” edges have no eﬀect
on the partial derivative with respect to existing edges. It follows that we can
Next, we discuss how to calculate the partial derivatives with respect to the
ﬁx all other weights of the network, it follows that the outputs of all the neurons
loss function of the subnetwork deﬁned by layers Vt, . . . , VT as a function of the
outputs of the neurons in Vt. The input to the neurons of Vt can be written as
Therefore, applying the chain rule, we obtain that
of ℓt at ot. We calculate this in a recursive manner. First observe that for the
last layer we have that ℓT (u) = ∆(u, y), where ∆is the loss function. Since we
Therefore, by the chain rule,
In summary, we can ﬁrst calculate the vectors {at, ot} from the bottom of
the network back to its bottom. Once we have all of these vectors, the partial
the pseudocode of backpropagation indeed calculates the gradient.
Neural networks over graphs of size s(n) can be used to describe hypothesis
classes of all predictors that can be implemented in runtime of O(
have also shown that their sample complexity depends polynomially on s(n)
(speciﬁcally, it depends on the number of edges in the network). Therefore, classes
of neural network hypotheses seem to be an excellent choice. Regrettably, the
problem of training the network on the basis of training data is computationally
hard. We have presented the SGD framework as a heuristic approach for training
neural networks and described the backpropagation algorithm which eﬃciently
calculates the gradient of the loss function with respect to the weights over the
Bibliographic Remarks
Neural networks were extensively studied in the 1980s and early 1990s, but with
ments, as well as increasing computational power and data size, has led to a
The expressive power of neural networks and the relation to circuit complexity
sentation independent learning. This hardness result relies on the cryptographic
vector problem. As we have argued, this implies that there cannot be an eﬃcient
algorithm for training neural networks, even if we allow larger networks or other
activation functions that can be implemented eﬃciently.
The backpropagation algorithm has been introduced in Rumelhart, Hinton &
boxes. Use the Lipschitzness of f to show that it is approximately constant
at each box. Finally, show that a neural network can ﬁrst decide which box
the input vector belongs to, and then predict the averaged value of f at that
X to Yi. Deﬁne H = F1 × F2 to be the Cartesian product class. That is, for
Prove that τH(m) ≤τF1(m) τF2(m).
to Z and let F2 be a set of functions from Z to Y. Let H = F2 ◦F1 be the
such that h(x) = f2(f1(x)). Prove that τH(m) ≤τF2(m)τF1(m).
(V, E) such that the VC dimension of the class of neural networks over these
the exercise we assume that we can exactly implement the activation function
of the network will be x.
mension of the resulting hypothesis class is n2.
Additional Learning Models
In this chapter we describe a diﬀerent model of learning, which is called online
learning. Previously, we studied the PAC learning model, in which the learner
pothesis, and only when learning is completed uses the learned hypothesis for
predicting the label of new examples. In our papayas learning problem, this
means that we should ﬁrst buy a bunch of papayas and taste them all. Then, we
use all of this information to learn a prediction rule that determines the taste
of new papayas. In contrast, in online learning there is no separation between a
training phase and a prediction phase. Instead, each time we buy a papaya, it
is ﬁrst considered a test example since we should predict whether it is going to
taste good. Then, after taking a bite from the papaya, we know the true label,
and the same papaya can be used as a training example that can help us improve
our prediction mechanism for future papayas.
Concretely, online learning takes place in a sequence of consecutive rounds.
On each online round, the learner ﬁrst receives an instance (the learner buys
a papaya and knows its shape and color, which form the instance). Then, the
learner is required to predict a label (is the papaya tasty?). At the end of the
round, the learner obtains the correct label (he tastes the papaya and then knows
whether it is tasty or not). Finally, the learner uses this information to improve
his future predictions.
To analyze online learning, we follow a similar route to our study of PAC
learning. We start with online binary classiﬁcation problems. We consider both
the realizable case, in which we assume, as prior knowledge, that all the labels are
generated by some hypothesis from a given hypothesis class, and the unrealizable
case, which corresponds to the agnostic PAC learning model. In particular, we
learning problems in which the loss function is convex. Finally, we present the
Perceptron algorithm as an example of the use of surrogate convex loss functions
in the online learning model.
Personal use only. Not for distribution. Do not post.
Online Classiﬁcation in the Realizable Case
Online learning is performed in a sequence of consecutive rounds, where at round
t the learner is given an instance, xt, taken from an instance domain X, and is
required to provide its label. We denote the predicted label by pt. After predicting
goal is to make as few prediction mistakes as possible during this process. The
learner tries to deduce information from previous rounds so as to improve its
predictions on future rounds.
Clearly, learning is hopeless if there is no correlation between past and present
rounds. Previously in the book, we studied the PAC model in which we assume
that past and present examples are sampled i.i.d. from the same distribution
ministic, stochastic, or even adversarially adaptive to the learner’s own behavior
number of prediction mistakes of our online learning algorithm arbitrarily large.
For example, the adversary can present the same instance on each online round,
wait for the learner’s prediction, and provide the opposite label as the correct
izability assumption is one possible natural restriction. In the realizable case, we
thermore, h⋆is taken from a hypothesis class H, which is known to the learner.
restriction on the sequence, the learner should make as few mistakes as possible,
versary. For an online learning algorithm, A, we denote by MA(H) the maximal
number of mistakes A might make on a sequence of examples which is labeled by
some h⋆∈H. We emphasize again that both h⋆and the sequence of instances
we will study how to design algorithms for which MA(H) is minimal. Formally:
esis class and let A be an online learning algorithm. Given any sequence S =
(x1, h⋆(y1)), . . . , (xT , h⋆(yT )), where T is any integer and h⋆∈H, let MA(S) be
the number of mistakes A makes on the sequence S. We denote by MA(H) the
supremum of MA(S) over all sequences of the above form. A bound of the form
MA(H) ≤B < ∞is called a mistake bound. We say that a hypothesis class H is
online learnable if there exists an algorithm A for which MA(H) ≤B < ∞.
Our goal is to study which hypothesis classes are learnable in the online model,
and in particular to ﬁnd good learning algorithms for a given hypothesis class.
tional aspect of learning, and do not restrict the algorithms to be eﬃcient. In
To simplify the presentation, we start with the case of a ﬁnite hypothesis class,
In PAC learning, we identiﬁed ERM as a good learning algorithm, in the sense
that if H is learnable then it is learnable by the rule ERMH. A natural learning
rule for online learning is to use (at any online round) any ERM hypothesis,
namely, any hypothesis which is consistent with all past examples.
input: A ﬁnite hypothesis class H
receive true label yt = h⋆(xt)
The Consistent algorithm maintains a set, Vt, of all the hypotheses which
Obviously, whenever Consistent makes a prediction mistake, at least one
hypothesis is removed from Vt. Therefore, after making M mistakes we have
|Vt| ≤|H| −M. Since Vt is always nonempty (by the realizability assumption it
Let H be a ﬁnite hypothesis class. The Consistent algorithm
It is rather easy to construct a hypothesis class and a sequence of examples on
shall see that this algorithm is guaranteed to make exponentially fewer mistakes.
input: A ﬁnite hypothesis class H
receive true label yt = h⋆(xt)
Let H be a ﬁnite hypothesis class. The Halving algorithm
enjoys the mistake bound MHalving(H) ≤log2(|H|).
(hence the name Halving). Therefore, if M is the total number of mistakes, we
Rearranging this inequality we conclude our proof.
Of course, Halving’s mistake bound is much better than Consistent’s mistake
bound. We already see that online learning is diﬀerent from PAC learning—while
in PAC, any ERM hypothesis is good, in online learning choosing an arbitrary
ERM hypothesis is far from being optimal.
ability. In particular, we target the following question: What is the optimal online
learning algorithm for a given hypothesis class H?
able mistake bound. This measure was proposed by Nick Littlestone and we
therefore refer to it as Ldim(H).
To motivate the deﬁnition of Ldim it is convenient to view the online learning
process as a game between two players: the learner versus the environment. On
round t of the game, the environment picks an instance xt, the learner predicts a
Suppose that the environment wants to make the learner err on the ﬁrst T rounds
should choose the instances xt in such a way that ensures that for some h⋆∈H
A strategy for an adversarial environment can be formally described as a
binary tree, as follows. Each node of the tree is associated with an instance from
X. Initially, the environment presents to the learner the instance associated with
at each round, the environment will present the instance associated with the
Formally, consider a complete binary tree of depth T (we deﬁne the depth of
the tree as the number of edges in a path from the root to a leaf). We have
x1 = v1. At round t, we set xt = vit where it is the current node. At the end of
H = {h1, h2, h3, h4}, where the predictions of each hypothesis in H on the instances
The preceding strategy for the environment succeeds only if for every (y1, . . . , yT )
A shattered tree of depth d is a sequence
Ldim(H) is the maximal
integer T such that there exists a shattered tree of depth T, which is shattered
No algorithm can have a mistake bound strictly smaller than
Ldim(H); namely, for every algorithm, A, we have MA(H) ≥Ldim(H).
requirements in the deﬁnition of Ldim. If the environment sets xt = vit and
Let us now give several examples.
tered by H has depth of at most log2(|H|). Therefore, Ldim(H) ≤log2(|H|).
large. Therefore, this example shows that Ldim(H) can be signiﬁcantly smaller
This tree is shattered by H. And, because of the density of the reals, this tree
can be made arbitrarily deep.
algorithm. Interestingly, there is a standard algorithm whose mistake bound
matches this lower bound. The algorithm is similar to the Halving algorithm.
Recall that the prediction of Halving is made according to a majority vote of
the hypotheses which are consistent with previous examples. We denoted this
set by Vt. Put another way, Halving partitions Vt into two sets: V +
larger of the two groups. The rationale behind this prediction is that whenever
The optimal algorithm we present in the following uses the same idea, but
instead of predicting according to the larger class, it predicts according to the
class with larger Ldim.
Standard Optimal Algorithm (SOA)
input: A hypothesis class H
receive true label yt
SOA enjoys the mistake bound MSOA(H) ≤Ldim(H).
of pt implies that Ldim(V (r)
leads to the desired contradiction.
Let H be any hypothesis class. Then, the standard optimal
algorithm enjoys the mistake bound MSOA(H) = Ldim(H) and no other algorithm
can have MA(H) < Ldim(H).
Comparison to VC Dimension
In the PAC learning model, learnability is characterized by the VC dimension of
the class H. Recall that the VC dimension of a class H is the maximal number
d such that there are instances x1, . . . , xd that are shattered by H. That is, for
that gives exactly this sequence of labels. The following theorem relates the VC
dimension to the Littlestone dimension.
For any class H, VCdim(H) ≤Ldim(H), and there are classes
for which strict inequality holds. Furthermore, the gap can be arbitrarily larger.
We ﬁrst prove that VCdim(H) ≤Ldim(H). Suppose VCdim(H) = d and
let x1, . . . , xd be a shattered set. We now construct a complete binary tree of
following illustration:
Now, the deﬁnition of a shattered set clearly implies that we got a valid shattered
tree of depth d, and we conclude that VCdim(H) ≤Ldim(H). To show that the
Online Classiﬁcation in the Unrealizable Case
In the previous section we studied online learnability in the realizable case. We
now consider the unrealizable case. Similarly to the agnostic PAC model, we
no longer assume that all labels are generated by some h⋆∈H, but we require
the learner to be competitive with the best ﬁxed predictor from H. This is
captured by the regret of the algorithm, which measures how “sorry” the learner
Formally, the regret of an algorithm A relative to h when running on a sequence
of T examples is deﬁned as
(x1,y1),...,(xT ,yT )
and the regret of the algorithm relative to a hypothesis class H is
We restate the learner’s goal as having the lowest possible regret relative to H.
An interesting question is whether we can derive an algorithm with low regret,
meaning that RegretA(H, T) grows sublinearly with the number of rounds, T,
which implies that the diﬀerence between the error rate of the learner and the
best hypothesis in H tends to zero as T goes to inﬁnity.
We ﬁrst show that this is an impossible mission—no algorithm can obtain a
equal to T, by simply waiting for the learner’s prediction and then providing
the opposite label as the true label. In contrast, for any sequence of true labels,
y1, . . . , yT , let b be the majority of labels in y1, . . . , yT , then the number of
To sidestep Cover’s impossibility result, we must further restrict the power
of the adversarial environment. We do so by allowing the learner to randomize
ity result, since in deriving this result we assumed nothing about the learner’s
onment to decide on yt without knowing the random coins ﬂipped by the learner
on round t. The adversary can still know the learner’s forecasting strategy and
even the random coin ﬂips of previous rounds, but it does not know the actual
value of the random coin ﬂips used by the learner on round t. With this (mild)
change of game, we analyze the expected number of mistakes of the algorithm,
where the expectation is with respect to the learner’s own randomization. That
P[ˆyt ̸= yt] = |pt −yt|.
ular, we will prove the following theorem.
For every hypothesis class H, there exists an algorithm for
Furthermore, no algorithm can achieve an expected regret bound smaller than
We will provide a constructive proof of the upper bound part of the preceding
learning with expert advice. This algorithm is important by itself and we dedicate
the next subsection to it.
vice. In this online learning problem, on round t the learner has to choose the
advice of d given experts. We also allow the learner to randomize his choice by
tions are randomized, then its loss is deﬁned to be the averaged cost, namely,
i vt,i = ⟨w(t), vt⟩. The algorithm assumes that the number of rounds T is
input: number of experts, d ; number of rounds, T
set w(t) = ˜w(t)/Zt where Zt = P
choose expert i at random according to P[i] = w(t)
rithm enjoys the bound
= −η ⟨w(t), vt⟩+ η2 X
Summing this inequality over t we get
which can be rearranged as follows:
Plugging the value of η into the equation concludes our proof.
a ﬁnite class, and let us write H = {h1, . . . , hd}. In this case, we can refer to
each hypothesis, hi, as an expert, whose advice is to predict hi(xt), and whose
cost is vt,i = |hi(xt) −yt|. The prediction of the algorithm will therefore be
i |hi(xt) −yt|. All in all, we have shown that
i |hi(xt) −yt| = ⟨w(t), vt⟩.
Furthermore, for each i, P
t vt,i is exactly the number of mistakes hypothesis hi
Let H be a ﬁnite hypothesis class. There exists an algorithm
structed an expert for each individual hypothesis. However, if H is inﬁnite this
leads to a vacuous bound. The main idea is to construct a set of experts in a
more sophisticated way. The challenge is how to deﬁne a set of experts that, on
one hand, is not excessively large and, on the other hand, contains experts that
give accurate predictions.
sequence of instances, x1, x2, . . . , xT , there exists at least one expert in the set
the game between SOA (presented in the previous section) and the environment
on the sequence of instances x1, x2, . . . , xT assuming that SOA makes a mistake
precisely in rounds i1, i2, . . . , iL. The expert is deﬁned by the following algorithm.
Expert(i1, i2, . . . , iL)
input A hypothesis class H ; Indices i1 < i2 < · · · < iL
deﬁne ˜yt = argmaxr Ldim
Note that each such expert can give us predictions at every round t while only
observing the instances x1, . . . , xt. Our generic online learning algorithm is now
To analyze the algorithm we ﬁrst note that the number of experts is
is at most the number of mistakes of the best expert plus
next show that the number of mistakes of the best expert is at most the number
of mistakes of the best hypothesis in H. The following key lemma shows that,
with the same behavior.
Let H be any hypothesis class with Ldim(H) < ∞. Let x1, x2, . . . , xT
on the sequence x1, x2, . . . , xT , the expert predicts h(xt) on each online round
indices i1, i2, . . . , iL. Consider running SOA on the input (x1, h(x1)), (x2, h(x2)),
. . ., (xT , h(xT )). SOA makes at most Ldim(H) mistakes on such input. We deﬁne
L to be the number of mistakes made by SOA and we deﬁne {i1, i2, . . . , iL} to
be the set of rounds in which SOA made the mistakes.
Now, consider the Expert(i1, i2, . . . , iL) running on the sequence x1, x2, . . . , xT .
By construction, the set Vt maintained by Expert(i1, i2, . . . , iL) equals the set Vt
maintained by SOA when running on the sequence (x1, h(x1)), . . . , (xT , h(xT )).
The predictions of SOA diﬀer from the predictions of h if and only if the round is
in {i1, i2, . . . , iL}. Since Expert(i1, i2, . . . , iL) predicts exactly like SOA if t is not
in {i1, i2, . . . , iL} and the opposite of SOAs’ predictions if t is in {i1, i2, . . . , iL},
The previous lemma holds in particular for the hypothesis in H that makes the
least number of mistakes on the sequence of examples, and we therefore obtain
Let (x1, y1), (x2, y2), . . . , (xT , yT ) be a sequence of examples
mistakes on the sequence of examples.
Online Convex Optimization
results for these problems in the agnostic PAC learning framework. In this section
we show that similar learnability results hold for convex problems in the online
learning framework. In particular, we consider the following problem.
Online Convex Optimization
learner predicts a vector w(t) ∈H
learner suﬀers loss ℓ(w(t), zt)
As in the online classiﬁcation problem, we analyze the regret of the algorithm.
pothesis, which here will be some vector w⋆∈H, is deﬁned as
As before, the regret of the algorithm relative to a set of competing vectors, H,
learning problems in the agnostic PAC model. We now show that a very similar
algorithm, Online Gradient Descent, solves online convex learning problems.
Online Gradient Descent
receive zt and let ft(·) = ℓ(·, zt)
The Online Gradient Descent algorithm enjoys the following
regret bound for every w⋆∈H,
The analysis is similar to the analysis of Stochastic Gradient Descent
deﬁnition of subgradients, we have that for every t,
(ft(w(t)) −ft(w⋆)) + η2
This proves the ﬁrst bound in the theorem. The second bound follows from the
assumption that ft is ρ-Lipschitz, which implies that ∥vt∥≤ρ.
The Online Perceptron Algorithm
The Perceptron is a classic online learning algorithm for binary classiﬁcation with
which aims to solve the ERM problem with respect to H. We now present an
online version of the Perceptron algorithm.
The learner maintains a weight vector w(t) ∈Rd and predicts pt = sign(⟨w(t), xt⟩).
The goal of the learner is to make as few prediction mistakes as possible. In
achievable mistake bound depends on the Littlestone dimension of the class.
no hope of making few prediction mistakes. Indeed, consider the tree for which
the density of the reals, this tree is shattered by the subset of H which contains
To sidestep this impossibility result, the Perceptron algorithm relies on the
A weight vector w makes a mistake on an example (x, y) whenever the sign of
On rounds on which the algorithm makes a prediction mistake, we shall use the
• ft is a convex function
• For all w, ft(w) ≥ℓ(w, (xt, yt)). In particular, this holds for w(t).
examples. In the online model, we allow the surrogate to depend on the speciﬁc
round. It can even depend on w(t). Our ability to use a round speciﬁc surrogate
Let us now run the Online Gradient Descent algorithm on the sequence of
functions, f1, . . . , fT , with the hypothesis class being all vectors in Rd (hence,
and its update rule is
is in ∂ft(w(t)). We therefore obtain the update rule
Denote by M the set of rounds in which sign(⟨w(t), xt⟩) ̸= yt. Note that on
round t, the prediction of the Perceptron can be rewritten as
pt = sign(⟨w(t), xt⟩) = sign
This form implies that the predictions of the Perceptron algorithm and the set
obtained the Perceptron algorithm:
predict pt = sign(⟨w(t), xt⟩)
scent given in the previous section. In our case, the subgradient of ft we use
Denote R = maxt ∥xt∥; then we obtain
|M| and rearranging, we obtain
This inequality implies
Suppose that the Perceptron algorithm runs on a sequence
(x1, y1), . . . , (xT , yT ) and let R = maxt ∥xt∥. Let M be the rounds on which the
last claim can be easily derived by analyzing the roots of the convex parabola
xt lies on the correct side of the halfspace, it also guarantees that xt is not too
close to the decision boundary. More speciﬁcally, the distance from xt to the
When the separability assumption does not hold, the bound involves the term
As a last remark we note that there can be cases in which there exists some
w⋆that makes zero errors on the sequence but the Perceptron will make many
errors. Indeed, this is a direct consequence of the fact that Ldim(H) = ∞. The
way we sidestep this impossibility result is by assuming more on the sequence of
t ft(w⋆) is not excessively large.
In this chapter we have studied the online learning model. Many of the results
we derived for the PAC learning model have an analog in the online model. First,
acterizes online learnability. To show this, we introduced the SOA algorithm (for
case). We have also studied online convex optimization and have shown that
online gradient descent is a successful online learner whenever the loss function
is convex and Lipschitz. Finally, we presented the online Perceptron algorithm
as a combination of online gradient descent and the concept of surrogate convex
Bibliographic Remarks
bound of the Halving algorithm is tight.
Calculate MHalving(H) (i.e., derive lower and upper bounds on MHalving(H),
and prove that they are equal).
exercise we show how to get rid of this dependence by a simple trick.
Consider an algorithm that enjoys a regret bound of the form α
its parameters require the knowledge of T. The doubling trick, described in
the following, enables us to convert such an algorithm into an algorithm that
does not need to know the time horizon. The idea is to divide the time into
periods of increasing size and run the original algorithm on each period.
input: algorithm A whose parameters depend on the time horizon
Show that if the regret of A on each period of 2m rounds is at most α
then the total regret is at most
cessful online learning algorithm can be used to derive a successful PAC
Consider a PAC learning problem for binary classiﬁcation parameterized
by an instance domain, X, and a hypothesis class, H. Suppose that there exists
an online learning algorithm, A, which enjoys a mistake bound MA(H) < ∞.
pled i.i.d. from a distribution D over the instance space X, and are labeled by
some h⋆∈H. Suppose that for every round t, the prediction of the algorithm
where the expectation is over the random choice of the instances as well as a
random choice of r according to the uniform distribution over [T].
ysis. Across all disciplines, from social sciences to biology to computer science,
people try to get a ﬁrst intuition about their data by identifying meaningful
groups among the data points. For example, computational biologists cluster
tailers cluster customers, on the basis of their customer proﬁles, for the purpose
of targeted marketing; and astronomers cluster stars on the basis of their spacial
tuitively, clustering is the task of grouping a set of objects such that similar
ferent groups. Clearly, this description is quite imprecise and possibly ambiguous.
Quite surprisingly, it is not at all clear how to come up with a more rigorous
There are several sources for this diﬃculty. One basic problem is that the
two objectives mentioned in the earlier statement may in many cases contradict
tive relation, while cluster sharing is an equivalence relation and, in particular,
it is a transitive relation. More concretely, it may be the case that there is a
long sequence of objects, x1, . . . , xm such that each xi is very similar to its two
sure that whenever two elements are similar they share the same cluster, then
we must put all of the elements of the sequence in the same cluster. However,
in that case, we end up with dissimilar elements (x1 and xm) sharing a cluster,
thus violating the second requirement.
To illustrate this point further, suppose that we would like to cluster the points
in the following picture into two clusters.
input by separating it horizontally according to the two lines:
Personal use only. Not for distribution. Do not post.
Another basic problem is the lack of “ground truth” for clustering, which is a
common problem in unsupervised learning. So far in the book, we have mainly
dealt with supervised learning (e.g., the problem of learning a classiﬁer from
labeled training data). The goal of supervised learning is clear – we wish to
learn a classiﬁer which will predict the labels of future examples as accurately
as possible. Furthermore, a supervised learner can estimate the success, or the
risk, of its hypotheses using the labeled training data by computing the empirical
loss. In contrast, clustering is an unsupervised learning problem; namely, there
are no labels that we try to predict. Instead, we wish to organize the data in
some meaningful way. As a result, there is no clear success evaluation procedure
for clustering. In fact, even on the basis of full knowledge of the underlying data
distribution, it is not clear what is the “correct” clustering for that data or how
to evaluate a proposed clustering.
Consider, for example, the following set of points in R2:
and suppose we are required to cluster them into two clusters. We have two
highly justiﬁable solutions:
This phenomenon is not just artiﬁcial but occurs in real applications. A given
set of objects can be clustered in various diﬀerent meaningful ways. This may
be due to having diﬀerent implicit notions of distance (or similarity) between
objects, for example, clustering recordings of speech by the accent of the speaker
versus clustering them by content, clustering movie reviews by movie topic versus
clustering them by the review sentiment, clustering paintings by topic versus
clustering them by style, and so on.
lutions for a given data set. As a result, there is a wide variety of clustering
algorithms that, on some input data, will output very diﬀerent clusterings.
Clustering tasks can vary in terms of both the type of input they have and the
type of outcome they are expected to compute. For concreteness, we shall focus
on the following common setup:
Input — a set of elements, X, and a distance function over it. That is, a function
and often also satisﬁes the triangle inequality. Alternatively, the function
algorithms also require an input parameter k (determining the number
of required clusters).
Output — a partition of the domain set X into subsets. That is, C = (C1, . . . Ck)
clustering is “soft,” namely, the partition of X into the diﬀerent clusters
is probabilistic where the output is a function assigning to each domain
the probability that x belongs to cluster Ci. Another possible output is
ing), which is a hierarchical tree of domain subsets, having the singleton
sets in its leaves, and the full domain as its root. We shall discuss this
formulation in more detail in the following.
In the following we survey some of the most popular clustering methods. In
the last section of this chapter we return to the high level discussion of what is
of clustering. These algorithms proceed in a sequence of rounds. They start from
ing. Consequently, the number of clusters decreases with each such round. If kept
going, such algorithms would eventually result in the trivial clustering in which
all of the domain points share one large cluster. Two parameters, then, need to
be determined to deﬁne such an algorithm clearly. First, we have to decide how
to measure (or deﬁne) the distance between clusters, and, second, we have to
determine when to stop merging. Recall that the input to a clustering algorithm
a measure of distance between domain subsets (or clusters). The most common
by the minimum distance between members of the two clusters, namely,
deﬁned to be the average distance between a point in one of the clusters and
a point in the other, namely,
as the maximum distance between their elements, namely,
start from data that is completely fragmented and keep building larger and
larger clusters as they proceed. Without employing a stopping rule, the outcome
of such an algorithm can be described by a clustering dendrogram: that is, a tree
of domain subsets, having the singleton sets in its leaves, and the full domain as
its root. For example, if the input is the elements X = {a, b, c, d, e} ⊂R2 with
the Euclidean distance as depicted on the left, then the resulting dendrogram is
the one depicted on the right:
The single linkage algorithm is closely related to Kruskal’s algorithm for ﬁnding
a minimal spanning tree on a weighted graph. Indeed, consider the full graph
whose vertices are elements of X and the weight of an edge (x, y) is the distance
d(x, y). Each merge of two clusters performed by the single linkage algorithm
corresponds to a choice of an edge in the aforementioned graph. It is also possible
to show that the set of edges the single linkage algorithm chooses along its run
forms a minimal spanning tree.
If one wishes to turn a dendrogram into a partition of the space (a clustering),
one needs to employ a stopping criterion. Common stopping criteria include
• Fixed number of clusters – ﬁx some parameter, k, and stop merging clusters
as soon as the number of clusters is k.
criterion is called “scaled distance upper bound.”
Another popular approach to clustering starts by deﬁning a cost function over a
parameterized set of possible clusterings and the goal of the clustering algorithm
is to ﬁnd a partitioning (clustering) of minimal cost. Under this paradigm, the
clustering task is turned into an optimization problem. The objective function
is a function from pairs of an input, (X, d), and a proposed clustering solution
C = (C1, . . . , Ck), to positive real numbers. Given such an objective function,
which we denote by G, the goal of a clustering algorithm is deﬁned as ﬁnding, for
a given input (X, d), a clustering C so that G((X, d), C) is minimized. In order
to reach that goal, one has to apply some appropriate search algorithm.
tion algorithm rather than the cost function or the corresponding exact solution
of the minimization problem.
Many common objective functions require the number of clusters, k, as a
parameter. In practice, it is often up to the user of the clustering algorithm to
choose the parameter k that is most suitable for the given clustering problem.
In the following we describe some of the most common objective functions.
where each Ci is represented by a centroid µi. It is assumed that the input
the squared distance between each point in X to the centroid of its cluster.
The centroid of Ci is deﬁned to be
Gk−means((X, d), (C1, . . . , Ck)) =
This can also be rewritten as
Gk−means((X, d), (C1, . . . , Ck)) =
munication tasks, where the members of X may be viewed as a collection
of signals that have to be transmitted. While X may be a very large set
of real valued vectors, digital transmission allows transmitting of only a
sion under such constraints is to represent each member of X by a “close”
member of some ﬁnite set µ1, . . . µk, and replace the transmission of any
can be viewed as a measure of the distortion created by such a transmission
representation scheme.
except that it requires the cluster centroids to be members of the input
set. The objective function is deﬁned by
GK−medoid((X, d), (C1, . . . , Ck)) =
tive, except that the “distortion” between a data point and the centroid
of its cluster is measured by distance, rather than by the square of the
GK−median((X, d), (C1, . . . , Ck)) =
An example where such an objective makes sense is the facility location
problem. Consider the task of locating k ﬁre stations in a city. One can
model houses as data points and aim to place the stations so as to minimize
the average distance between a house and its closest ﬁre station.
lution to such a clustering problem is determined by a set of cluster centers,
Gf((X, d), (C1, . . . Ck)) =
where X ′ is either X or some superset of X.
cluster distances (SOD)
GSOD((X, d), (C1, . . . Ck)) =
approximate to within some constant). As an alternative, the following simple
respect to the Euclidean distance function d(x, y) = ∥x −y∥.
input: X ⊂Rn ; Number of clusters k
initialize: Randomly choose initial centroids µ1, . . . , µk
repeat until convergence
(break ties in some arbitrary manner)
To simplify the notation, let us use the shorthand G(C1, . . . , Ck) for the
It is convenient to deﬁne µ(Ci) =
new partition assigned at iteration t. Using the deﬁnition of the objective as
In addition, the deﬁnition of the new partition (C(t)
minimizes the expression Pk
(C1, . . . , Ck). Hence,
we obtain that G(C(t)
), which concludes our
gorithm needs in order to reach convergence. Furthermore, there is no nontrivial
gorithm’s output and the minimum possible value of that objective function. In
the procedure several times with diﬀerent randomly chosen initial centroids (e.g.,
we can choose the initial centroids to be random points from the data).
Often, a convenient way to represent the relationships between points in a data
set X = {x1, . . . , xm} is by a similarity graph; each vertex represents a data
point xi, and every two vertices are connected by an edge whose weight is their
The clustering problem can now be formulated as follows: We want to ﬁnd a
partition of the graph such that the edges between diﬀerent groups have low
weights and the edges within a group have high weights.
In the clustering objectives described previously, the focus was on one side
of our intuitive deﬁnition of clustering – making sure that points in the same
cluster are similar. We now present objectives that focus on the other requirement
– points separated into diﬀerent clusters should be nonsimilar.
Given a graph represented by a similarity matrix W, the simplest and most
direct way to construct a partition of the graph is to solve the mincut problem,
which chooses a partition C1, . . . , Ck that minimizes the objective
cut(C1, . . . , Ck) =
often does not lead to satisfactory partitions. The problem is that in many cases,
the solution of mincut simply separates one individual vertex from the rest of the
graph. Of course, this is not what we want to achieve in clustering, as clusters
should be reasonably large groups of points.
Several solutions to this problem have been suggested. The simplest solution
is to normalize the cut and deﬁne the normalized mincut objective as follows:
RatioCut(C1, . . . , Ck) =
The preceding objective assumes smaller values if the clusters are not too small.
Unfortunately, introducing this balancing makes the problem computationally
hard to solve. Spectral clustering is a way to relax the problem of minimizing
Graph Laplacian and Relaxed Graph Cuts
The main mathematical object for spectral clustering is the graph Laplacian
matrix. There are several diﬀerent deﬁnitions of graph Laplacian in the literature,
and in the following we describe one particular deﬁnition.
The unnormalized graph
Laplacian is the m × m matrix L = D −W where D is a diagonal matrix with
Then, the columns of H are orthonormal to each other and
RatioCut(C1, . . . , Ck) = trace(H⊤L H).
Let h1, . . . , hk be the columns of H. The fact that these vectors are
nipulations, it can be shown that trace(H⊤L H) = Pk
any vector v we have
Therefore, to minimize RatioCut we can search for a matrix H whose columns
|Cj|. Unfortunately,
this is an integer programming problem which we cannot solve eﬃciently. Instead,
Rm,k that minimizes trace(H⊤L H). As we will see in the next chapter about
to set U to be the matrix whose columns are the eigenvectors corresponding to
the k minimal eigenvalues of L. The resulting algorithm is called Unnormalized
Spectral Clustering.
Unnormalized Spectral Clustering
Unnormalized Spectral Clustering
Initialize: Compute the unnormalized graph Laplacian L
corresponding to the k smallest eigenvalues
Let v1, . . . , vm be the rows of U
The spectral clustering algorithm starts with ﬁnding the matrix H of the k
eigenvectors corresponding to the smallest eigenvalues of the graph Laplacian
matrix. It then represents points according to the rows of H. It is due to the
properties of the graph Laplacians that this change of representation is useful.
algorithm to detect the clusters seamlessly. Intuitively, if H is as deﬁned in
whose value is nonzero only on the element corresponding to the cluster it belongs
The information bottleneck method is a clustering technique introduced by
Tishby, Pereira, and Bialek. It relies on notions from information theory. To
illustrate the method, consider the problem of clustering text documents where
corresponding to index i appears in the document. Given a set of m documents,
probability over a random variable x, indicating the identity of a document (thus
taking values in [m]), and a random variable y, indicating the identity of a word
in the dictionary (thus taking values in [n]).
With this interpretation, the information bottleneck refers to the identity of
a clustering as another random variable, denoted C, that takes values in [k]
(where k will be set by the method as well). Once we have formulated x, y, C
as random variables, we can use tools from information theory to express a
clustering objective. In particular, the information bottleneck objective is
p(C|x) I(x; C) −βI(C; y) ,
parameter, and the minimization is over all possible probabilistic assignments of
points to clusters. Intuitively, we would like to achieve two contradictory goals.
On one hand, we would like the mutual information between the identity of
the document and the identity of the cluster to be as small as possible. This
reﬂects the fact that we would like a strong compression of the original data. On
the other hand, we would like high mutual information between the clustering
variable and the identity of the words, which reﬂects the goal that the “relevant”
information about the document (as reﬂected by the words that appear in the
document) is retained. This generalizes the classical notion of minimal suﬃcient
statistics2 used in parametric statistics to arbitrary distributions.
Solving the optimization problem associated with the information bottleneck
principle is hard in the general case. Some of the proposed methods are similar
A High Level View of Clustering
damental questions remain unaddressed. First and foremost, what is clustering?
What is it that distinguishes a clustering algorithm from any arbitrary function
that takes an input space and outputs a partition of that space? Are there any
basic properties of clustering that are independent of any speciﬁc algorithm or
One method for addressing such questions is via an axiomatic approach. There
have been several attempts to provide an axiomatic deﬁnition of clustering. Let
us demonstrate this approach by presenting the attempt made by Kleinberg
Consider a clustering function, F, that takes as input any ﬁnite domain X
with a dissimilarity function d over its pairs and returns a partition of X.
Consider the following three properties of such a function:
Scale Invariance (SI) For any domain set X, dissimilarity function d, and
Richness (Ri) For any ﬁnite X and every partition C = (C1, . . . Ck) of X (into
nonempty subsets) there exists some dissimilarity function d over X such
, where the sum is over all values x can take and all
respect to a statistical model and its associated unknown parameter, meaning that “no
other statistic which can be calculated from the same sample provides any additional
information as to the value of the parameter.” For example, if we assume that a variable is
distributed normally with a unit variance and an unknown expectation, then the average
function is a suﬃcient statistic.
Consistency (Co) If d and d′ are dissimilarity functions over X, such that
d′(x, y) ≤d(x, y) and if x, y belong to diﬀerent clusters in F(X, d) then
d′(x, y) ≥d(x, y), then F(X, d) = F(X, d′).
A moment of reﬂection reveals that the Scale Invariance is a very natural
requirement – it would be odd to have the result of a clustering function depend
basically states that the outcome of the clustering function is fully controlled by
the function d, which is also a very intuitive feature. The third requirement,
Consistency, is the only requirement that refers to the basic (informal) deﬁnition
of clustering – we wish that similar points will be clustered together and that
dissimilar points will be separated to diﬀerent clusters, and therefore, if points
that already share a cluster become more similar, and points that are already
separated become even less similar to each other, the clustering function should
have even stronger “support” of its previous clustering decisions.
ties: Scale Invariance, Richness, and Consistency.
Assume, by way of contradiction, that some F does satisfy all three
properties. Pick some domain set X with at least three points. By Richness,
some d2 such that F(X, d2) ̸= F(X, d1).
αd2. Consider F(X, d3). By the Scale Invariance property of F, we should have
diﬀerent clusters w.r.t. F(X, d1), and d3(x, y) ≥d1(x, y), the Consistency of F
implies that F(X, d3) = F(X, d1). This is a contradiction, since we chose d1, d2
so that F(X, d2) ̸= F(X, d1).
It is important to note that there is no single “bad property” among the three
properties. For every pair of the the three axioms, there exist natural clustering
functions that satisfy the two properties in that pair (one can even construct such
examples just by varying the stopping criteria for the Single Linkage clustering
function). On the other hand, Kleinberg shows that any clustering algorithm
does satisfy Consistency).
The Kleinberg impossibility result can be easily circumvented by varying the
properties. For example, if one wishes to discuss clustering functions that have
Alternatively, one can relax the Consistency property. For example, say that two
clusterings C = (C1, . . . Ck) and C′ = (C′
l) are compatible if for every
tained by trimming that dendrogram are compatible). “Reﬁnement Consistency”
is the requirement that, under the assumptions of the Consistency property, the
new clustering F(X, d′) is compatible with the old clustering F(X, d). Many
common clustering functions satisfy this requirement as well as Scale Invariance
erties of clustering functions that sound intuitive and desirable and are satisﬁed
by some common clustering functions.
cating that there is no “ideal” clustering function. Every clustering function will
tion for any given task must therefore take into account the speciﬁc properties
theorem shows). Clustering, just like classiﬁcation prediction, must take into
account some prior knowledge about the speciﬁc task at hand.
Clustering is an unsupervised learning problem, in which we wish to partition
tering, and the information bottleneck. We discussed the diﬃculty of formalizing
the intuitive meaning of clustering.
Bibliographic Remarks
spectral clustering we refer the reader to the excellent tutorial by Von Luxburg
and suppose we break ties in the deﬁnition of Ci by assigning i to be the
smallest value in argminj ∥x −µj∥.
a partition of X into C1, . . . , Ck which minimizes the expression
Gk−diam((X, d), (C1, . . . , Ck)) = max
diam objective. Fortunately, we have a very simple approximation algorithm:
is, if we denote its output by ˆC1, . . . , ˆCk, and denote the optimal solution by
following inequalities
Gk−diam((X, d), ( ˆC1, . . . , ˆCk)) ≤2r
is a clustering that minimizes the objective
Gf((X, d), (C1, . . . Ck)) =
where X ′ is either X or some superset of X.
ness, and Consistency. Consider the Single Linkage clustering algorithm.
Fixed Number of Clusters (any ﬁxed nonzero number) stopping rule.
Distance Upper Bound (any ﬁxed nonzero upper bound) stopping rule.
for Single Linkage clustering, under which these two axioms are satisﬁed.
For any ﬁnite X and every partition C = (C1, . . . Ck) of X (into nonempty subsets)
there exists some dissimilarity function d over X such that F(X, d) = C.
Prove that, for every number k, there exists a clustering function that
Dimensionality Reduction
Dimensionality reduction is the process of taking data in a high dimensional
space and mapping it into a new space whose dimensionality is much smaller.
mation theory. There are several reasons to reduce the dimensionality of the
data. First, high dimensional data impose computational challenges. Moreover,
ties of the learning algorithm (for example, in Nearest Neighbor classiﬁers the
Finally, dimensionality reduction can be used for interpretability of the data, for
ﬁnding meaningful structure of the data, and for illustration purposes.
In this chapter we describe popular methods for dimensionality reduction. In
those methods, the reduction is performed by applying a linear transformation
to the original data. That is, if the original data is in Rd and we want to embed
enable a reasonable recovery of the original x. It is not hard to show that in
The ﬁrst method we describe is called Principal Component Analysis (PCA).
mations and the method ﬁnds the linear transformations for which the diﬀerences
between the recovered vectors and the original vectors are minimal in the least
Next, we describe dimensionality reduction using random matrices W. We
which analyzes the distortion caused by such a random dimensionality reduction
Last, we show how one can reduce the dimension of all sparse vectors using
again a random matrix. This process is known as Compressed Sensing. In this
case, the recovery process is nonlinear but can still be implemented eﬃciently
using linear programming.
We conclude by underscoring the underlying “prior assumptions” behind PCA
and compressed sensing, which can help us understand the merits and pitfalls of
Personal use only. Not for distribution. Do not post.
Dimensionality Reduction
Principal Component Analysis (PCA)
mately) recover each original vector x from its compressed version. That is, for
a compressed vector y = Wx, where y is in the low dimensional space Rn, we
can construct ˜x = Uy, so that ˜x is the recovered version of x and resides in the
original high dimensional space Rd.
In PCA, we ﬁnd the compression matrix W and the recovering matrix U so
that the total squared distance between the original and recovered vectors is
minimal; namely, we aim at solving the problem
To solve this problem we ﬁrst show that the optimal solution takes a speciﬁc
U are orthonormal (namely, U ⊤U is the identity matrix of Rn) and W = U ⊤.
namely, the range of V is R and V ⊤V = I. Therefore, each vector in R can be
where we used the fact that V ⊤V is the identity matrix of Rn. Minimizing the
preceding expression with respect to y by comparing the gradient with respect
to y to zero gives that y = V ⊤x. Therefore, for each x we have that
In particular this holds for x1, . . . , xm and therefore we can replace U, W by
V, V ⊤and by that do not increase the objective
Since this holds for every U, W the proof of the lemma follows.
On the basis of the preceding lemma, we can rewrite the optimization problem
We further simplify the optimization problem by using the following elementary
where the trace of a matrix is the sum of its diagonal entries. Since the trace is
i . The matrix A is symmetric and therefore it can be
written using its spectral decomposition as A = VDV ⊤, where D is diagonal and
V ⊤V = VV ⊤= I. Here, the elements on the diagonal of D are the eigenvalues of
A and the columns of V are the corresponding eigenvectors. We assume without
the matrix U whose columns are the n eigenvectors of A corresponding to the
largest n eigenvalues.
Let x1, . . . , xm be arbitrary vectors in Rd, let A = Pm
and let u1, . . . , un be n eigenvectors of the matrix A corresponding to the largest
n eigenvalues of A. Then, the solution to the PCA optimization problem given
with orthonormal columns and let B = V ⊤U. Then, VB = VV ⊤U = U. It
U ⊤AU = B⊤V ⊤VDV ⊤VB = B⊤DB,
Note that B⊤B = U ⊤VV ⊤U = U ⊤U = I. Therefore, the columns of B are
also orthonormal, which implies that Pd
Rd,d be a matrix such that its ﬁrst n columns are the columns of B and in
addition ˜B⊤˜B = I. Then, for every j we have Pd
Dimensionality Reduction
thonormal columns it holds that trace(U ⊤AU) ≤Pn
if we set U to be the matrix whose columns are the n leading eigenvectors of A
we obtain that trace(U ⊤AU) = Pn
It is a common practice to “center” the examples before applying
PCA. That is, we ﬁrst calculate µ =
vectors (x1 −µ), . . . , (xm −µ). This is also related to the interpretation of PCA
A More Eﬃcient Solution for the Case d ≫m
In some situations the original dimensionality of the data is much larger than
the number of examples m. The computational complexity of calculating the
PCA solution as described previously is O(d3) (for calculating eigenvalues of A)
plus O(md2) (for constructing the matrix A). We now show a simple trick that
enables us to calculate the PCA solution more eﬃciently when d ≫m.
Recall that the matrix A is deﬁned to be Pm
i . It is convenient to rewrite
⟨xi, xj⟩. Suppose that u is an eigenvector of B: That is, Bu = λu for some
λ ∈R. Multiplying the equality by X⊤and using the deﬁnition of B we obtain
X⊤XX⊤u = λX⊤u. But, using the deﬁnition of A, we get that A(X⊤u) =
We can therefore calculate the PCA solution by calculating the eigenvalues of
B instead of A. The complexity is O(m3) (for calculating eigenvalues of B) and
m2d (for constructing the matrix B).
The previous discussion also implies that to calculate the PCA
solution we only need to know how to calculate inner products between vectors.
This enables us to calculate PCA implicitly even when d is very large (or even
inﬁnite) using kernels, which yields the kernel PCA algorithm.
Implementation and Demonstration
A pseudocode of PCA is given in the following.
dimensionality reduction to R1 using PCA (red circles).
number of components n
Let u1, . . . , un be the eigenvectors of A with largest eigenvalues
Let v1, . . . , vn be the eigenvectors of B with largest eigenvalues
output: u1, . . . , un
To illustrate how PCA works, let us generate vectors in R2 that approximately
reside on a line, namely, on a one dimensional subspace of R2. For example,
suppose that each example is of the form (x, x + y) where x is chosen uniformly
eigenvector corresponding to the largest eigenvalue will be close to the vector
Next, we demonstrate the eﬀectiveness of PCA on a data set of faces. We
extracted images of faces from the Yale data set (Georghiades, Belhumeur &
dimensionality is very high.
Dimensionality Reduction
reconstruction. Middle row: an enlarged version of one of the images before and after
PCA. Bottom: The images after dimensionality reduction to R2. The diﬀerent marks
indicate diﬀerent individuals.
In this section we show that reducing the dimension by using a random linear
transformation leads to a simple compression scheme with a surprisingly low
referred to as a random projection. In particular, we provide a variant of a famous
lemma due to Johnson and Lindenstrauss, showing that random projections do
not distort Euclidean distances too much.
Let x1, x2 be two vectors in Rd. A matrix W does not distort too much the
distance between x1 and x2 if the ratio
the transformation are almost the same. To show that ∥Wx1 −Wx2∥is not too
far away from ∥x1 −x2∥it suﬃces to show that W does not distort the norm of
the diﬀerence vector x = x1 −x2. Therefore, from now on we focus on the ratio
We start with analyzing the distortion caused by applying a random projection
equivalent inequality is
Let wi be the ith row of W. The random variable ⟨wi, x⟩is a weighted sum of
d independent normal random variables and therefore it is normally distributed
with zero mean and variance P
n distribution. The claim now follows
directly from a measure concentration property of χ2 random variables stated in
Let Q be a ﬁnite set of vectors
Dimensionality Reduction
such that each element of W is distributed normally with zero mean and variance
dimension of x. In fact, the bound holds even if x is in an inﬁnite dimensional
Compressed sensing is a dimensionality reduction technique which utilizes a prior
thermore, this compression is lossless – we can reconstruct x exactly from the s
(index,value) pairs. Now, lets take one step forward and assume that x = Uα,
ural vectors are (at least approximately) sparse in some representation. In fact,
this assumption underlies many modern compression schemes. For example, the
are approximately sparse in a wavelet basis.
Can we still compress x into roughly s numbers? Well, one simple way to do
this is to multiply x by U ⊤, which yields the sparse vector α, and then represent
α by its s (index,value) pairs. However, this requires us ﬁrst to “sense” x, to
store it, and then to multiply it by U ⊤. This raises a very natural question: Why
go to so much eﬀort to acquire all the data when most of what we get will be
thrown away? Cannot we just directly measure the part that will not end up
presses the data. The key result is that a random linear transformation can
compress x without losing information. The number of measurements needed is
order of s log(d). That is, we roughly acquire only the important information
about the signal. As we will see later, the price we pay is a slower reconstruction
phase. In some situations, it makes sense to save time in compression even at
the price of a slower reconstruction. For example, a security camera should sense
and compress a large amount of images while most of the time we do not need to
decode the compressed data at all. Furthermore, in many practical applications,
formed eﬃciently in hardware. For example, a team led by Baraniuk and Kelly
has proposed a camera architecture that employs a digital micromirror array to
perform optical calculations of a linear transformation of an image. In this case,
obtaining each compressed measurement is as easy as obtaining a single raw
measurement. Another important application of compressed sensing is medical
imaging, in which requiring fewer measurements translates to less radiation for
stricted Isoperimetric Property (RIP). A matrix that satisﬁes this property is
guaranteed to have a low distortion of the norm of any sparse representable
is greater than an order of s log(d).
The ﬁrst theorem establishes that RIP matrices yield a lossless compression
scheme for sparse vectors. It also provides a (noneﬃcient) reconstruction scheme.
be a reconstructed vector. Then, ˜x = x.
Dimensionality Reduction
We assume, by way of contradiction, that ˜x ̸= x. Since x satisﬁes the
constraints in the optimization problem that deﬁnes ˜x we clearly have that
which leads to a contradiction.
because we need to minimize a combinatorial objective (the sparsity of v). Quite
can be solved eﬃciently. This is stated formally in the following theorem.
In fact, we will prove a stronger result, which holds even if x is not a sparse
arbitrary vector and denote
That is, xs is the vector which equals x on the s largest elements of x and equals
be the reconstructed vector. Then,
Note that in the special case that x = xs we get an exact recovery, x⋆= x, so
likely to be RIP. In fact, the theorem shows that multiplying a random matrix
by an orthonormal matrix also provides an RIP matrix. This is important for
compressing signals of the form x = Uα where x is not sparse but α is sparse.
In that case, if W is a random matrix and we compress using y = Wx then this
is the same as compressing α by y = (WU)α and since WU is also RIP we can
reconstruct α (and thus also x) from y.
Let h = x⋆−x. Given a vector v and a set of indices I we denote by vI the
the partition as follows. In T0 we put the s indices corresponding to the s largest
elements in absolute values of x (ties are broken arbitrarily). Let T c
Next, T1 will be the s indices corresponding to the s largest elements in absolute
the s largest elements in absolute value of hT c
To prove the theorem we ﬁrst need the following lemma, which shows that
RIP also implies approximate orthogonality.
I, J, both of size at most s, and for any vector u we have that ⟨WuI, WuJ⟩≤
We are now ready to prove the theorem. Clearly,
To prove the theorem we will show the following two claims:
Dimensionality Reduction
and this will conclude our proof.
To prove this claim we do not use the RIP condition at all but only use the fact
Next, we show that ∥hT c
For the second claim we use the RIP condition to get that
⟨WhT0 + WhT1, WhTj⟩.
Rearranging the inequality gives
which concludes the proof of the second claim.
lemma with a simple covering argument.
We start with a covering property of the unit ball.
Let k be an integer and let
ℓ2 ball of Rd. Since the points in Q′ are distributed evenly on the unit ℓ∞ball,
the size of Q is the size of Q′ times the ratio between the volumes of the unit ℓ2
For simplicity, assume that d is even and therefore
Dimensionality Reduction
where in the last inequality we used Stirling’s approximation. Overall we obtained
Let U be an orthonormal d × d matrix and let I ⊂[d] be a set
But since U is orthogonal we also have that
the condition given in the lemma, the following holds with probability of at least
This also implies that
Let a be the smallest number such that
But the deﬁnition of a implies that
Dimensionality Reduction
PCA or Compressed Sensing?
Suppose we would like to apply a dimensionality reduction technique to a given
set of examples. Which method should we use, PCA or compressed sensing? In
this section we tackle this question, by underscoring the underlying assumptions
behind the two methods.
fect recovery. PCA guarantees perfect recovery whenever the set of examples is
contained in an n dimensional subspace of Rd. Compressed sensing guarantees
perfect recovery whenever the set of examples is sparse (in some basis). On the
basis of these observations, we can describe cases in which PCA will be better
than compressed sensing and vice versa.
As a ﬁrst example, suppose that the examples are the vectors of the standard
will lead to poor performance, since the data is far from being in an n dimensional
subspace, as long as n < d. Indeed, it is easy ro verify that in such a case, the
We next show a case where PCA is better than compressed sensing. Consider
m examples that are exactly on an n dimensional subspace. Clearly, in such a
case, PCA will lead to perfect recovery. As to compressed sensing, note that
the subspace. Therefore, compressed sensing would also work if we will reduce
the dimension to Ω(n log(d)). However, with exactly n dimensions, compressed
sensing might fail. PCA has also better resilience to certain types of noise. See
mations: PCA and random projections. We have shown that PCA is optimal in
tion procedure to be linear as well. However, if we allow nonlinear reconstruction,
dom projections can signiﬁcantly outperform PCA. This fact is at the heart of
the compressed sensing method.
Bibliographic Remarks
position (SVD). The SVD method is described in Appendix C. SVD dates back
sides PCA and SVD, there are additional names that refer to the same idea and
Young theorem (after Carl Eckart and Gale Young who analyzed the method in
compression scheme is impossible.
increase βi, while possibly decreasing βj for some j > i, and obtain a better
ing nonlinear dimensionality reduction on the basis of the kernel trick (see
Let X be some instance space and let S = {x1, . . . , xm} be a set of points
(possibly of inﬁnite dimension). Let K : X × X be a kernel function, that is,
k(x, x′) = ⟨ψ(x), ψ(x′)⟩. Kernel PCA is the process of mapping the elements
in S into V using ψ, and then applying PCA over {ψ(x1), . . . , ψ(xm)} into
Rn. The output of this process is the set of reduced elements.
Show how this process can be done in polynomial time in terms of m
stant time. In particular, if your implementation requires multiplication of
two matrices A and B, verify that their product can be computed. Similarly,
Dimensionality Reduction
if an eigenvalue decomposition of some matrix C is required, verify that this
decomposition can be computed.
Let x1, . . . , xm be m vectors in Rd, and let x be a random vector distributed
random variable ⟨w, x⟩has maximal variance. That is, we would like to
Var[⟨w, x⟩] = argmax
Show that the solution of the problem is to set w to be the ﬁrst principle
vector of x1, . . . , xm.
mizes the variance of ⟨w2, x⟩, but is also uncorrelated to ⟨w1, x⟩. That is,
we would like to solve:
Show that the solution to this problem is to set w to be the second principal
component of x1, . . . , xm.
E[(⟨w1, x⟩)(⟨w, x⟩)] = w⊤
i . Since w is an eigenvector of A we have that the
lemma tells us that a random projection preserves distances between a ﬁnite
set of vectors. In this exercise you need to prove that if the set of vectors are
within the unit ball, then not only are the distances between any two vectors
preserved, but the inner product is also preserved.
that these vectors are linearly separable with margin of γ. Assume that
We started this book with a distribution free learning framework; namely, we
did not impose any assumptions on the underlying distribution over the data.
Furthermore, we followed a discriminative approach in which our goal is not to
learn the underlying distribution but rather to learn an accurate predictor. In
this chapter we describe a generative approach, in which it is assumed that the
underlying distribution over the data has a speciﬁc parametric form and our goal
is to estimate the parameters of the model. This task is called parametric density
The discriminative approach has the advantage of directly optimizing the
ing distribution. This was phrased as follows by Vladimir Vapnik in his principle
for solving problems using a restricted amount of information:
When solving a given problem, try to avoid a more general problem as an intermediate
Of course, if we succeed in learning the underlying distribution accurately,
we are considered to be “experts” in the sense that we can predict by using
the Bayes optimal classiﬁer. The problem is that it is usually more diﬃcult to
learn the underlying distribution than to learn an accurate predictor. However,
in some situations, it is reasonable to adopt the generative learning approach.
For example, sometimes it is easier (computationally) to estimate the parameters
of the model than to learn a discriminative predictor. Additionally, in some cases
we do not have a speciﬁc task at hand but rather would like to model the data
either for making predictions at a later time without having to retrain a predictor
or for the sake of interpretability of the data.
We start with a popular statistical method for estimating the parameters of
the data, which is called the maximum likelihood principle. Next, we describe two
scribe the EM algorithm for calculating the maximum likelihood in the presence
of latent variables. We conclude with a brief description of Bayesian reasoning.
Personal use only. Not for distribution. Do not post.
Maximum Likelihood Estimator
Let us start with a simple example. A drug company developed a new drug to
treat some deadly disease. We would like to estimate the probability of survival
when using the drug. To do so, the drug company sampled a training set of m
people and gave them the drug. Let S = (x1, . . . , xm) denote the training set,
the probability of survival.
the average of m i.i.d. binary random variables we can use Hoeﬀding’s inequality
formally explain now. We ﬁrst write the probability of generating the sample S:
P[S = (x1, . . . , xm)] =
Maximum Likelihood Estimation for Continuous Random Variables
overcome this technical problem we deﬁne the likelihood as log of the density of
the probability of X at x. That is, given an i.i.d. training set S = (x1, . . . , xm)
As an example, consider a Gaussian random variable, for which the density
We can rewrite the likelihood as
Solving the preceding equations we obtain the maximum likelihood estimates:
Note that the maximum likelihood estimate is not always an unbiased estimator.
For example, while ˆµ is unbiased, it is possible to show that the estimate ˆσ of
Simplifying Notation
To simplify our notation, we use P[X = x] in this chapter to describe both the
probability that X = x (for discrete random variables) and the density of the
distribution at x (for continuous variables).
Maximum Likelihood and Empirical Risk Minimization
The maximum likelihood estimator shares some similarity with the Empirical
Risk Minimization (ERM) principle, which we studied extensively in previous
chapters. Recall that in the ERM principle we have a hypothesis class H and
empirical risk. We now show that the maximum likelihood estimator is an ERM
for a particular loss function.
likelihood principle is equivalent to minimizing the empirical risk with respect
tion. The relative entropy is a divergence measure between two probabilities.
sumption aﬀects our density estimation, even in the limit of inﬁnite data. It
shows that if the underlying distribution is indeed of a parametric form, then by
bution. However, if the distribution is not of the assumed parametric form, even
the best parameter leads to an inferior model and the suboptimality is measured
by the relative entropy divergence.
Generalization Analysis
How good is the maximum likelihood estimator when we learn from a ﬁnite
mated solution of the density estimation problem. Unlike discriminative learning,
where there is a clear notion of “loss,” in generative learning there are various
ways to deﬁne the loss of a model. On the basis of the previous subsection, one
In some situations, it is easy to prove that the maximum likelihood principle
guarantees low true risk as well. For example, consider the problem of estimating
the mean of a Gaussian variable of unit variance. We saw previously that the
i xi. Let µ⋆be the optimal
Next, we note that ˆµ is the average of m Gaussian variables and therefore it is
also distributed normally with mean µ⋆and variance σ⋆/m. From this fact we
In some situations, the maximum likelihood estimator clearly overﬁts. For
we saw previously, using Hoeﬀding’s inequality we can easily derive a guarantee
This simple example shows that we should be careful in applying the maximum
likelihood principle.
viously in the book. A simple regularization technique is outlined in Exercise
sumptions and parameter estimations simplify the learning process. Consider
optimal classiﬁer is
To describe the probability function P[Y = y|X = x] we need 2d parameters,
This implies that the number of examples we need grows exponentially with the
In the Naive Bayes approach we make the (rather naive) generative assumption
that given the label, the features are independent of each other. That is,
With this assumption and using Bayes’ rule, the Bayes optimal classiﬁer can be
P[Y = y]P[X = x|Y = y]
Here, the generative assumption we made reduced signiﬁcantly the number of
parameters we need to learn.
ple, the resulting classiﬁer is called the Naive Bayes classiﬁer.
Linear Discriminant Analysis
Linear discriminant analysis (LDA) is another demonstration of how generative
assumptions simplify the learning process. As in the Naive Bayes classiﬁer we
vector of features x = (x1, . . . , xd). But now the generative assumption is as
that the conditional probability of X given Y is a Gaussian distribution. Finally,
the covariance matrix of the Gaussian distribution is the same for both values
the density distribution is given by
As we have shown in the previous section, using Bayes’ rule we can write
P[Y = y]P[X = x|Y = y].
We can rewrite this as ⟨w, x⟩+ b where
tioned generative assumptions, the Bayes optimal classiﬁer is a linear classiﬁer.
Additionally, one may train the classiﬁer by estimating the parameter µ0, µ1
and Σ from the data, using, for example, the maximum likelihood estimator.
With those estimators at hand, the values of w and b can be calculated as in
Latent Variables and the EM Algorithm
In generative models we assume that the data is generated by sampling from
a speciﬁc parametric distribution over our instance space X. Sometimes, it is
convenient to express this distribution using latent random variables. A natural
example is a mixture of k Gaussian distributions. That is, X = Rd and we
assume that each x is generated as follows. First, we choose a random number in
P[Y = y] = cy. Second, we choose x on the basis of the value of Y according to
a Gaussian distribution
Therefore, the density of X can be written as:
P[Y = y]P[X = x|Y = y]
less, we introduce Y since it helps us describe a simple parametric form of the
algorithm, due to Dempster, Laird, and Rubin, is an iterative procedure for
global maximum, it often works reasonably well in practice.
EM is designed for those cases in which, had we known the values of the latent
variables Y , then the maximum likelihood optimization problem would have been
tractable. More precisely, deﬁne the following function over m × k matrices and
If each row of Q deﬁnes a probability over the ith latent variable given X = xi,
(x1, y1), . . . , (xm, ym), where the expectation is with respect to the choice of
each yi on the basis of the ith row of Q. In the deﬁnition of F, the summation is
outside the log, and we assume that this makes the optimization problem with
The intuitive idea of EM is that we have a “chicken and egg” problem. On one
hand, had we known Q, then by our assumption, the optimization problem of
• Expectation Step: Set
By our assumption, it is possible to solve this optimization problem eﬃ-
procedure terminates after the improvement in the likelihood value stops being
EM as an Alternate Maximization Algorithm
To analyze the EM algorithm, we ﬁrst view it as an alternate maximization
algorithm. Deﬁne the following objective function
The second term is the sum of the entropies of the rows of Q. Let
be the set of matrices whose rows deﬁne probabilities over [k]. The following
The EM procedure can be rewritten as:
The preceding lemma immediately implies:
By the lemma we have
simplicity, we assume that Σ1 = Σ2 = · · · = Σk = I, where I is the identity
matrix. Specifying the EM algorithm for this case we obtain the following:
where Zi is a normalization factor which ensures that P
which in our case amounts to maximizing the following expression w.r.t. c
ranging terms we obtain:
That is, µy is a weighted average of the xi where the weights are according
to the probabilities calculated in the E step. To ﬁnd the optimal c we need
to be more careful since we must ensure that c is a probability vector. In
to a cluster according to the distance ∥xi −µy∥. Then, we update each center
µy according to the average of the examples assigned to this cluster. In the EM
approach, however, we determine the probability that each example belongs to
each cluster. Then, we update the centers on the basis of a weighted sum over
The maximum likelihood estimator follows a frequentist approach. This means
that we do not know its value. A diﬀerent approach to parameter estimation
is called Bayesian reasoning. In the Bayesian approach, our uncertainty about
name indicates, the prior distribution should be deﬁned by the learner prior to
As an example, let us consider again the drug company which developed a
new drug. On the basis of past experience, the statisticians at the drug company
believe that whenever a drug has reached the level of clinic experiments on
people, it is likely to be eﬀective. They model this prior belief by deﬁning a
X. This is because we can write the probability over X as a marginal probability
where the last equality follows from the deﬁnition of conditional probability. If
Seemingly, once we know P[X = x], a training set S = (x1, . . . , xm) tells us
nothing as we are already experts who know the distribution over a new point
X. However, the Bayesian view introduces dependency between S and X. This is
since it is just a parameter of the distribution, a new point X and previous points
S are always independent.
In the Bayesian framework, since X and S are not independent anymore, what
we would like to calculate is the probability of X given S, which by the chain
rule can be written as follows:
The second inequality follows from the assumption that X and S are independent
We therefore obtain the following expression for Bayesian prediction:
Getting back to our drug company example, we can rewrite P[X = x|S] as
Solving the preceding integral (using integration by parts) we obtain
Recall that the prediction according to the maximum likelihood principle in this
m . The Bayesian prediction with uniform prior is rather
similar to the maximum likelihood prediction, except it adds “pseudoexamples”
to the training set, thus biasing the prediction toward the uniform prior.
Maximum A Posteriori
In many situations, it is diﬃcult to ﬁnd a closed form solution to the integral
riori estimator. Once this value is found, we can calculate the probability that
X = x given the maximum a posteriori estimator and independently on S.
bution over the data. In particular, in parametric density estimation we further
ric form and our goal is to estimate the parameters of the model. We have
lihood, Bayesian estimation, and maximum a posteriori. We have also described
ferent assumptions on the underlying data distribution, in particular, Naive
Bibliographic Remarks
The maximum likelihood principle was studied by Ronald Fisher in the beginning
of the 20th century. Bayesian statistics follow Bayes’ rule, which is named after
the 18th century English mathematician Thomas Bayes.
There are many excellent books on the generative and Bayesian approaches
• Show that the preceding objective is equivalent to the usual empirical error
had we added two pseudoexamples to the training set. Conclude that
the regularized maximum likelihood estimator would be
+ is a vector of nonnegative weights. Verify that the M step
y νy ν. Show that c⋆is a probability vector.
• Show that the optimization problem is equivalent to the problem:
• Using properties of the relative entropy, conclude that c⋆is the solution to
the optimization problem.
Feature Selection and Generation
In the beginning of the book, we discussed the abstract model of learning, in
which the prior knowledge utilized by the learner is fully encoded by the choice
of the hypothesis class. However, there is another modeling choice, which we
have so far ignored: How do we represent the instance space X? For example, in
the papayas learning problem, we proposed the hypothesis class of rectangles in
to represent a papaya as a two dimensional point corresponding to its softness
and color. Only after that did we choose the hypothesis class of rectangles as a
class of mappings from the plane into the label set. The transformation from the
real world object “papaya” into the scalar representing its softness or its color
is called a feature function or a feature for short; namely, any measurement of
the real world object can be regarded as a feature. If X is a subset of a vector
understand that the way we encode real world objects as an instance space X is
by itself prior knowledge about the problem.
resented as a subset of a vector space, we might still want to change it into a
diﬀerent representation and apply a hypothesis class on top of it. That is, we
may deﬁne a hypothesis class on X by composing some class H on top of a
mapping ψ that maps each original instance in X into some Hilbert space. And,
indeed, the choice of ψ is another form of prior knowledge we impose on the
In this chapter we study several methods for constructing a good feature set.
We start with the problem of feature selection, in which we have a large pool
of features and our goal is to select a small number of features that will be
used by our predictor. Next, we discuss feature manipulations and normalization.
These include simple transformations that we apply on our original features. Such
transformations may decrease the sample complexity of our learning algorithm,
its bias, or its computational complexity. Last, we discuss several approaches for
feature learning. In these methods, we try to automate the process of feature
Personal use only. Not for distribution. Do not post.
Feature Selection and Generation
mate feature learner. Any feature learning algorithm might fail on some problem.
In other words, the success of each feature learner relies (sometimes implicitly)
on some form of prior assumption on the data distribution. Furthermore, the
relative quality of features highly depends on the learning algorithm we are later
going to apply using these features. This is illustrated in the following example.
Consider a regression problem in which X = R2, Y = R, and
the loss function is the squared loss. Suppose that the underlying distribution
is such that an example (x, y) is generated as follows: First, we sample x1 from
Finally, the second feature is set to be x2 = y + z, where z is sampled from the
feature. Intuitively, the ﬁrst feature should be preferred over the second feature
as the target can be perfectly predicted based on the ﬁrst feature alone, while it
cannot be perfectly predicted based on the second feature. Indeed, choosing the
ﬁrst feature would be the right choice if we are later going to apply polynomial
regressor, then we should prefer the second feature over the ﬁrst one, since the
optimal linear predictor based on the ﬁrst feature will have a larger risk than
the optimal linear predictor based on the second feature.
sented as a vector of d features. Our goal is to learn a predictor that only relies
on k ≪d features. Predictors that use only a small subset of features require a
smaller memory footprint and can be applied faster. Furthermore, in applications
such as medical diagnostics, obtaining each possible “feature” (e.g., test result)
can be costly; therefore, a predictor that uses only a small number of features
is desirable even at the cost of a small degradation in performance, relative to
a predictor that uses more features. Finally, constraining the hypothesis class to
use a small subset of features can reduce its estimation error and thus prevent
Ideally, we could have tried all subsets of k out of d features and choose the
subset which leads to the best performing predictor. However, such an exhaustive
search is usually computationally intractable. In the following we describe three
computationally feasible approaches for feature selection. While these methods
cannot guarantee ﬁnding the optimal subset, they often work reasonably well in
practice. Some of the methods come with formal guarantees on the quality of the
selected subsets under certain assumptions. We do not discuss these guarantees
Maybe the simplest approach for feature selection is the ﬁlter method, in which
we assess individual features, independently of other features, according to some
quality measure. We can then select the k features that achieve the highest score
(alternatively, decide also on the number of features to select according to the
value of their scores).
Many quality measures for features have been proposed in the literature.
cording to the error rate of a predictor that is trained solely by that feature.
To illustrate this, consider a linear regression problem with the squared loss.
Let v = (x1,j, . . . , xm,j) ∈Rm be a vector designating the values of the jth
feature on a training set of m examples and let y = (y1, . . . , ym) ∈Rm be the
values of the target on the same m examples. The empirical squared loss of an
ERM linear predictor that uses only the jth feature would be
where the meaning of adding a scalar b to a vector v is adding b to all coordinates
of v. To solve this problem, let ¯v =
feature and let ¯y =
objective we obtain the value
Ranking the features according to the minimal loss they achieve is equivalent
to ranking them according to the absolute value of the following score (where
now a higher score yields a better feature):
merator is the empirical estimate of the covariance of the jth feature and the
target value, E[(v −E v)(y −E y)], while the denominator is the squared root of
with zero empirical risk.
Feature Selection and Generation
If Pearson’s coeﬃcient equals zero it means that the optimal linear function
predicting y. However, this does not mean that v is a bad feature, as it might
be the case that together with other features v can perfectly predict y. Indeed,
consider a simple example in which the target is generated by the function y =
x1 + 2x2. Assume also that x1 is generated from the uniform distribution over
2z, where z is also generated i.i.d. from the uniform
Therefore, for a large enough training set, the ﬁrst feature is likely to have a
Pearson’s correlation coeﬃcient that is close to zero, and hence it will most
probably not be selected. However, no function can predict the target value well
without knowing the ﬁrst feature.
There are many other score functions that can be used by a ﬁlter method.
Notable examples are estimators of the mutual information or the area under
the receiver operating characteristic (ROC) curve. All of these score functions
suﬀer from similar problems to the one illustrated previously. We refer the reader
Greedy Selection Approaches
Greedy selection is another popular approach for feature selection. Unlike ﬁlter
methods, greedy selection approaches are coupled with the underlying learning
algorithm. The simplest instance of greedy selection is forward greedy selection.
We start with an empty set of features, and then we gradually add one feature
at a time to the set of selected features. Given that our current set of selected
features is I, we go over all i /∈I, and apply the learning algorithm on the set
choose to add the feature that yields the predictor with the smallest risk (on
the training set or on a validation set). This process continues until we either
select k features, where k is a predeﬁned budget of allowed features, or achieve
an accurate enough predictor.
To illustrate the forward
greedy selection approach, we specify it to the problem of linear regression with
be the ith column of X. Given a set I ⊂[d] we denote by XI the matrix whose
The forward greedy selection method starts with I0 = ∅. At iteration t, we
look for the feature index jt, which is in
tion approach for linear regression which is called Orthogonal Matching Pursuit
(OMP). The idea is to keep an orthogonal basis of the features aggregated so
far. Let Vt be a matrix whose columns form an orthonormal basis of the columns
every j, we decompose Xj = vj + uj where vj = Vt−1V ⊤
t−1Xj is the projection
It follows that we should select the feature
The rest of the update is to set
The OMP procedure maintains an orthonormal basis of the selected features,
where in the preceding description, the orthonormalization property is obtained
orthonormal basis in a numerically stable manner.
Feature Selection and Generation
Orthogonal Matching Pursuit (OMP)
budget of features T
More Eﬃcient Greedy Selection Criteria
Let R(w) be the empirical risk of a vector w. At each round of the forward
greedy selection method, and for every possible j, we should minimize R(w)
A simpler approach is to choose jt that minimizes
the weights of the previously chosen coordinates intact and only optimize over
the new variable. Therefore, for each j we need to solve an optimization problem
over a single variable, which is a much easier task than optimizing over t.
An even simpler approach is to upper bound R(w) using a “simple” function
and then choose the feature which leads to the largest decrease in this upper
R(w + ηej) ≤R(w) + η ∂R(w)
value into the above yields
This value is minimized if the partial derivative of R(w) with respect to wj is
maximal. We can therefore choose jt to be the index of the largest coordinate of
the gradient of R(w) at w.
selection procedure with respect to the function
Backward Elimination
Another popular greedy selection approach is backward elimination. Here, we
start with the full set of features, and then we gradually remove one feature at a
time from the set of features. Given that our current set of selected features is I,
Each such application yields a diﬀerent predictor, and we choose to remove the
feature i for which the predictor obtained from I \ {i} has the smallest risk (on
the training set or on a validation set).
Naturally, there are many possible variants of the backward elimination idea.
It is also possible to combine forward and backward greedy steps.
The problem of minimizing the empirical risk subject to a budget of k features
In other words, we want w to be sparse, which implies that we only need to
measure the features corresponding to nonzero elements of w.
where k1 is a parameter. Since the ℓ1 norm is a convex function, this problem
can be solved eﬃciently as long as the loss function is convex. A related problem
is minimizing the sum of LS(w) plus an ℓ1 norm regularization term,
Feature Selection and Generation
are in some sense equivalent.
The ℓ1 regularization often induces sparse solutions. To illustrate this, let us
start with the simple optimization problem
thresholding” operator
w = sign(x) [|x| −λ]+ ,
Next, consider a one dimensional regression problem with respect to the squared
We can rewrite the problem as
For simplicity let us assume that
then the optimal solution is
w = sign(⟨x, y⟩) [|⟨x, y⟩|/m −λ]+ .
That is, the solution will be zero unless the correlation between the feature x
Unlike the ℓ1 norm, the ℓ2 norm does not induce sparse solutions.
Indeed, consider the problem above with an ℓ2 regularization, namely,
Then, the optimal solution is
This solution will be nonzero even if the correlation between x and y is very small.
In contrast, as we have shown before, when using ℓ1 regularization, w will be
nonzero only if the correlation between x and y is larger than the regularization
Adding ℓ1 regularization to a linear regression problem with the squared loss
yields the LASSO algorithm, deﬁned as
Under some assumptions on the distribution and the regularization parameter
and the references therein). Another advantage of the ℓ1 norm is that a vector
Feature Manipulation and Normalization
Feature manipulations or normalization include simple transformations that we
apply on each of our original features. Such transformations may decrease the
approximation or estimation errors of our hypothesis class or can yield a faster
algorithm. Similarly to the problem of feature selection, here again there are no
absolute “good” and “bad” transformations, but rather each transformation that
we apply should be related to the learning algorithm we are going to apply on
the resulting feature vector as well as to our prior assumptions on the problem.
To motivate normalization, consider a linear regression problem with the
The crux of the preceding example is that the two features have completely
diﬀerent scales. Feature normalization can overcome this problem. There are
many ways to perform feature normalization, and one of the simplest approaches
the preceding example, if we divide each feature by the maximal value it attains
Feature Selection and Generation
ridge regression is quite close to w⋆.
ularized loss minimization depend on the norm of the optimal vector w⋆and
the instance vector remains roughly the same; hence the normalization greatly
improves the estimation error.
Feature normalization can also improve the runtime of the learning algorithm.
tion problem. The number of iterations required by SGD to converge also depends
on the norm of w⋆and on the maximal norm of ∥x∥. Therefore, as before, using
normalization can greatly decrease the runtime of SGD.
Next, we demonstrate in the following how a simple transformation on features,
a large number, suppose that the target y is chosen uniformly at random from
bounded but with a very small probability it gets a very high value. Then, for
any w, the expected squared loss of w is
Solving for w we obtain that w⋆=
ample shows that a simple transformation can have a signiﬁcant inﬂuence on the
approximation error.
formation actually hurts performance and increases the approximation error.
This is not surprising, as we have already argued that feature transformations
For linear predictors and loss functions of the form ℓ(w, (x, y)) = φ(⟨w, x⟩, y), where φ is
ample, a prior assumption that may lead us to use the “clipping” transformation
is that features that get values larger than a predeﬁned threshold value give us no
additional useful information, and therefore we can clip them to the predeﬁned
Examples of Feature Transformations
We now list several common techniques for feature transformations. Usually, it
is helpful to combine some of these transformations (e.g., centering + scaling).
In the following, we denote by f = (f1, . . . , fm) ∈Rm the value of the feature f
over the m training examples. Also, we denote by ¯f =
mean of the feature over all examples.
This transformation makes the feature have zero mean, by setting fi ←fi −¯f.
fmax = maxi fi and fmin = mini fi. Then, we set fi ←
fmax−fmin . Similarly,
This transformation makes all features have a zero mean and unit variance.
Then, we set fi ←fi−¯
This transformation clips high or low values of the feature. For example, fi ←
Sigmoidal Transformation:
As its name indicates, this transformation applies a sigmoid function on the
feature. For example, fi ←
This transformation can be thought of as a “soft” version of clipping: It has a
small eﬀect on values close to zero and behaves similarly to clipping on values
Feature Selection and Generation
Logarithmic Transformation:
is widely used when the feature is a “counting” feature. For example, suppose
that the feature represents the number of appearances of a certain word in a
text document. Then, the diﬀerence between zero occurrences of the word and
formed on the basis of the values it obtains on the training set, independently
of other features’ values. In some situations we would like to set the parameter
of the transformation on the basis of other features as well. A notable example
is a transformation in which one applies a scaling to the features so that the
So far we have discussed feature selection and manipulations. In these cases, we
start with a predeﬁned vector space Rd, representing our features. Then, we select
a subset of features (feature selection) or transform individual features (feature
transformation). In this section we describe feature learning, in which we start
tells us that we must incorporate some prior knowledge on the data distribution
in order to build a good feature representation. In this section we present a few
feature learning approaches and demonstrate conditions on the underlying data
distribution in which these methods can be useful.
tions. For example, in the context of polynomial regression, we have mapped the
top of the constructed features. Automation of this process would be to learn
predictors on top of ψ yields a good hypothesis class for the task at hand.
{w1, . . . , wk}, where each wi is a string representing a word in the dictionary,
and given a document, (p1, . . . , pd), where each pi is a word in the document,
processing tasks that linear predictors are quite powerful when applied on this
representation. Intuitively, we can think of each word as a feature that measures
uments), a learning algorithm searches for a linear predictor that weights these
features so that a right combination of appearances of words is indicative of the
tionary, in other applications we do not have such an intuitive representation
of an instance. For example, consider the computer vision application of object
recognition. Here, the instance is an image and the goal is to recognize which
resentation of the image does not yield a good classiﬁer. What we would like
image and would output a bag of “visual words,” representing the content of the
image. For example, a “visual word” can be “there is an eye in the image.” If
we had such representation, we could have applied a linear predictor on top of
this representation to train a classiﬁer for, say, face recognition. Our question is,
words representation of an image would be helpful for predicting which object
appears in the image?
A ﬁrst naive approach for dictionary learning relies on a clustering algorithm
c(x) is the cluster to which x belongs. Then, we can think of the clusters as
“words,” and of instances as “documents,” where a document x is mapped to
cluster. Now, it is straightforward to see that applying a linear predictor on ψ(x)
is equivalent to assigning the same target value to all instances that belong to
the same cluster. Furthermore, if the clustering is based on distances from a
constant predictor on x.
ﬁnd a pair of functions such that the reconstruction error, P
is small. Of course, we can trivially set k = d and both ψ, φ to be the identity
mapping, which yields a perfect reconstruction. We therefore must restrict ψ and
φ in some way. In PCA, we constrain k < d and further restrict ψ and φ to be
ψ and φ rely on k centroids, µ1, . . . , µk, and ψ(x) returns an indicator vector
Feature Selection and Generation
indicator vector and returns the centroid representing this vector.
k to be larger than d, is that ψ maps instances into sparse vectors. In fact, in
at most s nonzero elements, where s is a small integer. In particular, let ψ and φ
be functions that depend on µ1, . . . , µk. The function ψ maps an instance vector
x to a vector ψ(x) ∈Rk, where ψ(x) should have at most s nonzero elements.
The function φ(v) is deﬁned to be Pk
small reconstruction error, and therefore we can deﬁne
vector of the centroid closest to x. For larger values of s, the optimization problem
in the preceding deﬁnition of ψ becomes computationally diﬃcult. Therefore, in
practice, we sometime use ℓ1 regularization instead of the sparsity constraint and
the ℓ1 regularization, this is still a computationally hard problem (similar to
reasonably good solutions. These algorithms are beyond the scope of this book.
Many machine learning algorithms take the feature representation of instances
feature transformations and demonstrated their usefulness. Last, we discussed
ture selection, manipulation, and learning all depend on some prior knowledge
Bibliographic Remarks
many types of ﬁlters.
also show that low ℓ1 norm can be used to bound the estimation error of our
Feature learning and dictionary learning have been extensively studied recently
tation of AdaBoost as a forward greedy selection algorithm.
• Given a set of m instances x1, . . . , xm, and a hypothesis class H of ﬁnite
VC dimension, show that there exist d and h1, . . . , hd such that for every
Feature Selection and Generation
Let D be the distribution over [m] deﬁned by
where Z is a normalization factor that ensures that D is a probability
Rademacher Complexities
for learnability. In this chapter we study the Rademacher complexity, which
measures the rate of uniform convergence. We will provide generalization bounds
based on this measure.
The Rademacher Complexity
(w.r.t. domain Z, hypothesis class H, loss function ℓ, and distribution D) if
To simplify our notation, let us denote
tween the true error of a function f and its empirical error, namely,
Now, suppose we would like to estimate the representativeness of S using the
refer to S1 as a validation set and to S2 as a training set. We can then estimate
the representativeness of S by
Personal use only. Not for distribution. Do not post.
Rademacher Complexities
pectation of the above with respect to a random choice of σ. Formally, let F ◦S
More generally, given a set of vectors, A ⊂Rm, we deﬁne
The following lemma bounds the expected value of the representativeness of
S by twice the expected Rademacher complexity.
of expectation is smaller than expectation of the supremum we obtain
Taking expectation over S on both sides we obtain
Next, we note that for each j, zj and z′
j are i.i.d. variables. Therefore, we can
replace them without aﬀecting the expectation:
Repeating this for all j we obtain that
The lemma immediately yields that, in expectation, the ERM rule ﬁnds a
hypothesis which is close to the optimal hypothesis in H.
Furthermore, for any h⋆∈H
S∼Dm [LD(ERMH(S)) −LD(h⋆)]
Rademacher Complexities
equality follows because for any ﬁxed h⋆,
The third inequality follows from the previous inequality by relying on Markov’s
following bounded diﬀerences concentration inequality.
Let X1, . . . , Xm be m independent random variables taking values in V . Then,
|f(X1, . . . , Xm) −E[f(X1, . . . , Xm)]| ≤c
On the basis of the McDiarmid inequality we can derive generalization bounds
with a better dependence on the conﬁdence parameter.
S′∼Dm R(ℓ◦H ◦S′) + c
In particular, this holds for h = ERMH(S).
In particular, this holds for h = ERMH(S).
RepD(F, S) ≤E RepD(F, S) + c
The ﬁrst inequality of the theorem follows from the deﬁnition of RepD(F, S).
For the second inequality we note that the random variable R(ℓ◦H ◦S) also
and the union bound. Finally, for the last inequality, denote hS = ERMH(S)
= LD(hS) −LS(hS) + LS(hS) −LS(h⋆) + LS(h⋆) −LD(h⋆)
≤(LD(hS) −LS(hS)) + (LS(h⋆) −LD(h⋆)) .
the theorem. For the second summand, we use the fact that h⋆does not depend
on S; hence by using Hoeﬀding’s inequality we obtain that with probaility of at
Combining this with the union bound we conclude our proof.
The preceding theorem tells us that if the quantity R(ℓ◦H◦S) is small then it
is possible to learn the class H using the ERM rule. It is important to emphasize
that the last two bounds given in the theorem depend on the speciﬁc training
set S. That is, we use S both for learning a hypothesis from H as well as for
Let us now discuss some properties of the Rademacher complexity measure.
These properties will help us in deriving some simple bounds on R(ℓ◦H ◦S) for
speciﬁc cases of interest.
The following lemma is immediate from the deﬁnition.
The following lemma tells us that the convex hull of A has the same complexity
Rademacher Complexities
Let A be a subset of Rm and let A′ = {PN
The main idea follows from the fact that for any vector v we have
and we conclude our proof.
The next lemma, due to Massart, states that the Rademacher complexity of
a ﬁnite set grows logarithmically with the size of the set.
Let A = {a1, . . . , aN} be a ﬁnite set of vectors
complexity as follows:
// Jensen’s inequality
σi eσiai = exp(ai) + exp(−ai)
λR(A′) we obtain from the equation that
The following lemma shows that composing A with a Lipschitz function does
not blow up the Rademacher complexity. The proof is due to Kakade and Tewari.
Lipschitz function, namely for all α, β ∈R we have |φi(α) −φi(β)| ≤ρ |α −β|.
for any set A and all i we have R(Ai) ≤R(A). Without loss of generality we will
where in the last inequality we used the assumption that φ is Lipschitz. Next,
we note that the absolute value on |a1 −a′
Rademacher Complexities
be omitted since both a and a′ are from the same set A and the rest of the
expression in the supremum is not aﬀected by replacing a and a′. Therefore,
Rademacher Complexity of Linear Classes
plify the derivation we ﬁrst deﬁne the following two classes:
The following lemma bounds the Rademacher complexity of H2. We allow
the xi to be vectors in any Hilbert space (even inﬁnite dimensional), and the
bound does not depend on the dimensionality of the Hilbert space. This property
becomes useful when analyzing kernel methods.
Let S = (x1, . . . , xm) be vectors in a Hilbert space. Deﬁne: H2 ◦
have ⟨w, v⟩≤∥w∥∥v∥. Therefore,
Next, using Jensen’s inequality we have that
Finally, since the variables σ1, . . . , σm are independent we have
Next we bound the Rademacher complexity of H1 ◦S.
Let S = (x1, . . . , xm) be vectors in Rn. Then,
Using Holder’s inequality we know that for any vectors w, v we have
which concludes our proof.
Generalization Bounds for SVM
In this section we use Rademacher complexity to derive generalization bounds
for generalized linear predictors with Euclidean norm constraint. We will show
Rademacher Complexities
ℓ(w, (x, y)) = φ(⟨w, x⟩, y),
absolute loss function, ℓ(w, (x, y)) = |⟨w, x⟩−y|, which can be written as in
The following theorem bounds the generalization error of all predictors in H
using their empirical error.
Suppose that D is a distribution over X × Y such that with
(x,y)∼D[y ̸= sign(⟨wS, x⟩)] ≤LD(wS).
LD(wS) ≤LS(wS) + 2BR
The bound in the preceding theorem depends on ∥w⋆∥, which is unknown.
In the following we derive a bound that depends on the norm of the output of
SVM; hence it can be calculated from the training set itself. The proof is similar
to the derivation of bounds for structure risk minimization (SRM).
(x,y)∼D[y ̸= sign(⟨wS, x⟩)] ≤4R∥wS∥
Applying the union bound and using P∞
In particular, it holds for wS, which concludes our proof.
Rademacher Complexities
Note that all the bounds we have derived do not depend on the
dimension of w. This property is utilized when learning SVM with kernels, where
the dimension of w can be extremely large.
Generalization Bounds for Predictors with Low ℓ1 Norm
In the previous section we derived generalization bounds for linear predictors
and let Z = X × Y be the examples domain. Assume that the loss function,
being ρ-Lipschitz w.r.t. its ﬁrst argument. The following theorem bounds the
generalization error of all predictors in H using their empirical error.
Suppose that D is a distribution over X × Y such that with
both bounds look similar. However, the parameters B, R have diﬀerent meanings
(which is stronger than an ℓ2 constraint) while the parameter R captures a low
sumption). Therefore, the choice of the constraint should depend on our prior
knowledge of the set of instances and on prior assumptions on good predictors.
Bibliographic Remarks
The use of Rademacher complexity for bounding the uniform convergence is
Our proof of the concentration lemma is due to Kakade and Tewari lecture
bounds on the Rademacher complexity of linear classes with respect to diﬀerent
assumptions on the norms.
In this chapter we describe another way to measure the complexity of sets, which
is called covering numbers.
Let A ⊂Rm be a set of vectors. We say that A
there exists a′ ∈A′ with ∥a −a′∥≤r. We deﬁne by N(r, A) the cardinality of
To see this, let v1, . . . , vd be an orthonormal basis of the subspace. Then, any
The following lemma is immediate from the deﬁnition.
Personal use only. Not for distribution. Do not post.
Next, we derive a contraction principle.
N(ρ r, φ ◦A) ≤N(r, A).
Hence, B′ is an (ρ r)-cover of B.
From Covering to Rademacher Complexity via Chaining
The following lemma bounds the Rademacher complexity of A based on the
covering numbers N(r, A). This technique is called Chaining and is attributed
Let ¯a be a minimizer of the objective function given in the deﬁnition
in an arbitrary way, and if a maximizer does not exist, choose a∗such that
⟨σ, a∗⟩is close enough to the supremum). Note that a∗is a function of σ. For
each k, let b(k) be the nearest neighbor of a∗in Bk (hence b(k) is also a function
of σ). Using the triangle inequality,
For each k deﬁne the set
As a corollary we obtain the following:
log(N(c2−k, A)) ≤α + βk.
Consider a set A which lies in a d dimensional subspace of Rm
Bibliographic Remarks
ing numbers as well as other complexity measures that can be used to bound the
Proof of the Fundamental Theorem
the conditions of the theorem, which will hold throughout this chapter: H is a
We shall prove the upper bound for both the realizable and agnostic cases
and shall prove the lower bound for the agnostic case. The lower bound for the
realizable case is left as an exercise.
The Upper Bound for the Agnostic Case
For the upper bound we need to prove that there exists C such that H is agnostic
PAC learnable with sample complexity
We will prove the slightly looser bound:
The tighter bound in the theorem statement requires a more involved proof, in
which a more careful analysis of the Rademacher complexity using a technique
called “chaining” should be used. This is beyond the scope of this book.
Shelah lemma tells us that if VCdim(H) = d then
Personal use only. Not for distribution. Do not post.
The Lower Bound for the Agnostic Case
Here, we prove that there exists C such that H is agnostic PAC learnable with
Choose one example that is shattered by H. That is, let c be an example such
Proof of the Fundamental Theorem of Learning Theory
and the probability of (c, −b) is
Let A be an arbitrary algorithm. Any training set sampled from Db has the
form S = (c, y1), . . . , (c, ym). Therefore, it is fully characterized by the vector
where h is the hypothesis that A outputs upon receiving the training set S =
(c, y1), . . . , (c, ym).
Note that for any hypothesis h we have
In particular, the Bayes optimal hypothesis is hb and
then there exists b such that
butions as follows. First, let C = {c1, . . . , cd} be a set of d instances which are
It is easy to verify that the Bayes optimal predictor for Db is the hypothesis
Proof of the Fundamental Theorem of Learning Theory
theorem, we have that
deﬁnition of Db, to sample S ∼Db we can ﬁrst sample (j1, . . . , jm) ∼U([d])m, set
We now proceed in two steps. First, we show that among all learning algorithms,
S is fully determined. Therefore, we can write A(j, y) instead of A(S). Let us
jr = i and let y¬I be the rest of the elements of y. We have
The sum within the parentheses is minimized when A(j, y)(ci) is the maximizer
peating the same argument for all i we conclude our proof.
Fix i. For every j, let ni(j) = {|t : jt = i|} be the number of instances in which
We have thus shown that
Since the square root function is concave, we can apply Jensen’s inequality to
obtain that the above is lower bounded by
Proof of the Fundamental Theorem of Learning Theory
In summary, we have shown that if m <
8ρ2 then for any algorithm there
exists a distribution such that
The Upper Bound for the Realizable Case
Here we prove that there exists C such that H is PAC learnable with sample
, H is learnable using the
with respect to a distribution D over X if
for a single try) and m (number of tries). Chernoﬀ’s inequality implies
(x1, . . . , x2m) let A0 = (x1, . . . , xm). Using the deﬁnition of B′ we get that
Now, let us deﬁne by HA the eﬀective number of diﬀerent hypotheses on A,
Aj = (xj1, . . . , xjm). Since the elements of A are chosen i.i.d., we have that
Proof of the Fundamental Theorem of Learning Theory
EA∼D2m[f(A, Aj)]. Since this holds for any j it also holds for the expectation of
j chosen at random from J. In particular, it holds for the function f(A, A0) =
when choosing m balls from a bag with at least α red balls, we will never choose
a red ball. This probability is at most
We therefore get that
Combining this with the two claims we obtain that
Rearranging, we obtain the requirement
A suﬃcient condition for this is that
and this concludes our proof.
Let H be a hypothesis class over X with VCdim(H) = d. Let
over a choice of m i.i.d. instances from X with labels according to c we have that
easy to verify that if some A ⊂X is shattered by H then it is also shattered by Hc
concludes our proof.
Multiclass Learnability
the main goal of this chapter is to:
• Quantify the sample complexity of such hypothesis classes.
ral to seek a generalization of the VC dimension to multiclass hypothesis classes.
and state a generalization of the fundamental theorem based on the Natarajan
dimension. Then, we demonstrate how to calculate the Natarajan dimension of
several important hypothesis classes.
Recall that the main message of the fundamental theorem of learning theory
is that a hypothesis class of binary classiﬁers is learnable (with respect to the
that this equivalence breaks down for a certain convex learning problem. The
last section of this chapter is devoted to showing that the equivalence between
learnability and uniform convergence breaks down even in multiclass problems
construct a hypothesis class which is learnable by a speciﬁc ERM learner, but
for which other ERM learners might fail and the uniform convergence property
The Natarajan Dimension
In this section we deﬁne the Natarajan dimension, which is a generalization of
the VC dimension to classes of multiclass predictors. Throughout this section,
function from X to [k].
Personal use only. Not for distribution. Do not post.
We say that a set C ⊂X
noted Ndim(H), is the maximal size of a shattered set C ⊂X.
It is not hard to see that in the case that there are exactly two classes,
Ndim(H) = VCdim(H). Therefore, the Natarajan dimension generalizes the VC
ize the fundamental theorem of statistical learning from binary classiﬁcation to
multiclass classiﬁcation.
The Multiclass Fundamental Theorem
There exist absolute
of functions from X to [k], such that the Natarajan dimension of H is d, we have
nonstraightforward manner is Sauer’s lemma. It applies only to binary classes
and therefore must be replaced. An appropriate substitute is Natarajan’s lemma:
Multiclass Learnability
|H| ≤|X|Ndim(H) · k2Ndim(H).
The proof of Natarajan’s lemma shares the same spirit of the proof of Sauer’s
Calculating the Natarajan Dimension
these calculations indicate, the Natarajan dimension is often proportional to the
number of parameters required to deﬁne a hypothesis.
gests considering multiclass hypothesis classes of the following form. Let Hbin ⊂
If there are two labels that maximize hi(x), we choose the smaller one. Also, let
What “should” be the Natarajan dimension of HOvA,k
? Intuitively, to specify a
, we need to specify k hypotheses in Hbin. Therefore, kd parameters
should suﬃce. The following lemma establishes this intuition.
If d = VCdim(Hbin) then
On the other hand, each hypothesis in HOvA,k
ses from Hbin. Therefore,
By Sauer’s lemma, | (Hbin)C | ≤|C|d. We conclude that
binary classes, Hbin (e.g., halfspaces), for which Ndim(HOvA,k
stance, they predict its label by using some rule that takes into account the
Suppose that such a method trains l binary classiﬁers from a binary class Hbin,
to the predictions of the binary classiﬁers. The hypothesis class corresponding
to this method can be deﬁned as follows. For every ¯h = (h1, . . . , hl) ∈(Hbin)l
R(¯h)(x) = r(h1(x), . . . , hl(x)).
If d = VCdim(Hbin) then
Linear Multiclass Predictors
Rd. Therefore, we would expect that the Natarajan dimension would be upper
bounded by d. Indeed:
Multiclass Learnability
functions that witness the shattering. We need to show that |C| ≤d. For every
by the binary hypothesis class of homogeneous linear separators on Rd,
Since VCdim(H) = d, it will follow that |C| = |ρ(C)| ≤d, as required.
The theorem is tight in the sense that there are mappings Ψ for which Ndim(HΨ) =
Let X = Rn and let Ψ : X ×[k] →Rnk be the class sensitive
On Good and Bad ERMs
In this section we present an example of a hypothesis class with the property
that not all ERMs for the class are equally successful. Furthermore, if we allow
an inﬁnite number of labels, we will also obtain an example of a class that is
learnable by some ERM, but other ERMs will fail to learn it. Clearly, this also
implies that the class is learnable but it does not have the uniform convergence
property. For simplicity, we consider only the realizable case.
The class we consider is deﬁned as follows. The instance space X will be any
ﬁnite or countable set. Let Pf(X) be the collection of all ﬁnite and coﬁnite
Instead of [k], the label set is Y = Pf(X) ∪{∗}, where ∗is some special label.
Finally, the hypothesis class we take is
Let A be some ERM algorithm for H. Assume that A operates on a sample
the label A, if A observes the label A, it “knows” that the learned hypothesis
is hA, and, as an ERM, must return it (note that in this case the error of the
the hypothesis it returns upon receiving a sample of the form
S = {(x1, ∗), . . . , (xm, ∗)}.
We consider two ERMs: The ﬁrst, Agood, is deﬁned by
ERM, Abad, is deﬁned by
Abad(S) = h{x1,...xm}c.
The following claim shows that the sample complexity of Abad is about |X|-times
larger than the sample complexity of Agood. This establishes a gap between
diﬀerent ERMs. If X is inﬁnite, we even obtain a learnable class that is not
learnable by every ERM.
examples, sampled according to D and labeled by
Multiclass Learnability
Let D be a distribution over X and suppose that the correct labeling
sample size be m. Clearly, the hypothesis returned by Abad will err on all the
The conclusion of the example presented is that in multiclass classiﬁcation,
the sample complexity of diﬀerent ERMs may diﬀer. Are there “good” ERMs
for every hypothesis class? The following conjecture asserts that the answer is
The realizable sample complexity of every hypothesis class
Ndim(H), but no factor of k.
Bibliographic Remarks
eralizations and sharper versions of the Natarajan lemma are studied in Haussler
family of notions of dimensions, all of which generalize the VC dimension and
may be used to estimate the sample complexity of multiclass classiﬁcation.
The calculation of the Natarajan dimension, presented here, together with
d such that Ndim(HOvA,k
X \ {x0} →[k] that can be extended to a function in H both by deﬁning
f(x0) = i and by deﬁning f(x0) = j. Show that |H| ≤|HX\{x0}|+P
class of Natarajan dimension d, the agnostic sample complexity of H is
of Natarajan dimension d, the agnostic sample complexity of H is
Hint: Deduce it from the binary fundamental theorem.
Show that Ndim(HOvA,k
last coordinate is i and the rest are zeros.
Throughout the book, we have tried to characterize the notion of learnability
gence property of a hypothesis class guarantees successful learning. Later on we
introduced the notion of stability and have shown that stable algorithms are
guaranteed to be good learners. Yet there are other properties which may be
suﬃcient for learning, and in this chapter and its sequel we will introduce two
In this chapter we study compression bounds. Roughly speaking, we shall see
set of the training set, then the error of the hypothesis on the rest of the examples
estimates its true error. In other words, an algorithm that can “compress” its
output is a good learner.
To motivate the results, let us ﬁrst consider the following learning protocol.
First, we sample a sequence of k examples denoted T. On the basis of these
examples, we construct a hypothesis denoted hT . Now we would like to estimate
the performance of hT so we sample a fresh sequence of m−k examples, denoted
V , and calculate the error of hT on V . Since V and T are independent, we
To derive this bound, all we needed was independence between T and V .
Therefore, we can redeﬁne the protocol as follows. First, we agree on a sequence
of k indices I = (i1, . . . , ik) ∈[m]k. Then, we sample a sequence of m examples
S = (z1, . . . , zm). Now, deﬁne T = SI = (zi1, . . . , zik) and deﬁne V to be the
rest of the examples in S. Note that this protocol is equivalent to the protocol
Applying a union bound over the choice of the sequence of indices we obtain
the following theorem.
Personal use only. Not for distribution. Do not post.
of size m and returns a hypothesis such that A(S) = B(zi1, . . . , zik) for some
(i1, . . . , ik) ∈[m]k. Let V = {zj : j /∈(i1, . . . , ik)} be the set of examples which
the choice of S we have
LD(A(S)) ≤LV (A(S)) +
LD(A(S)) ≤LV (A(S)) +
which concludes our proof.
As a direct corollary we obtain:
These results motivate the following deﬁnition:
(Compression Scheme) Let H be a hypothesis class of
functions from X to Y and let k be an integer. We say that H has a compression
scheme of size k if the following holds:
if we feed any training set of the form (x1, h(x1)), . . . , (xm, h(xm)) into A and
then feed (xi1, h(xi1)), . . . , (xik, h(xik)) into B, where (i1, . . . , ik) is the output
It is possible to generalize the deﬁnition for unrealizable sequences as follows.
(Compression Scheme for Unrealizable Sequences)
Let H be a hypothesis class of functions from X to Y and let k be an integer.
We say that H has a compression scheme of size k if the following holds:
if we feed any training set of the form (x1, y1), . . . , (xm, ym) into A and then
feed (xi1, yi1), . . . , (xik, yik) into B, where (i1, . . . , ik) is the output of A, then
the output of B, denoted h′, satisﬁes LS(h′) ≤LS(h).
The following lemma shows that the existence of a compression scheme for
the realizable case also implies the existence of a compression scheme for the
Let H be a hypothesis class for binary classiﬁcation, and assume
it has a compression scheme of size k in the realizable case. Then, it has a
compression scheme of size k for the unrealizable case as well.
Consider the following scheme: First, ﬁnd an ERM hypothesis and denote
it by h. Then, discard all the examples on which h errs. Now, apply the realizable
compression scheme on the examples that have not been removed. The output of
the realizable compression scheme, denoted h′, must be correct on the examples
that have not been removed. Since h errs on the removed examples it follows
that the error of h′ cannot be larger than the error of h; hence h′ is also an ERM
pression scheme, it is necessary to show that there exist A, B, and k for which
Axis Aligned Rectangles
Note that this is an uncountable inﬁnite class. We show that there is a simple
compression scheme. Consider the algorithm A that works as follows: For each
sion. Deﬁne B to be the function that returns the minimal enclosing rectangle.
A Compression Scheme:
pression scheme we propose is as follows. First, A ﬁnds the vector w which is
in the convex hull of {x1, . . . , xm} and has minimal norm. Then, it represents it
as a convex combination of d points in the sample (it will be shown later that
this is always possible). The output of A are these d points. The algorithm B
receives these d points and set w to be the point in their convex hull of minimal
Next we prove that this indeed is a compression sceme. Since the data is
linearly separable, the convex hull of {x1, . . . , xm} does not contain the origin.
Consider the point w in this convex hull closest to the origin. (This is a unique
point which is the Euclidean projection of the origin onto this convex hull.) We
Then w′ is also in the convex hull and
which leads to a contradiction.
We have thus shown that w is also an ERM. Finally, since w is in the convex
hull of the examples, we can apply Caratheodory’s theorem to obtain that w is
the minimality of w implies that w must be on a face of the polygon and this
implies it can be represented as a convex combination of d points.
It remains to show that w is also the projection onto the polygon deﬁned by the
d points. But this must be true: On one hand, the smaller polygon is a subset of
the larger one; hence the projection onto the smaller cannot be smaller in norm.
On the other hand, w itself is a valid solution. The uniqueness of projection
concludes our proof.
Separating Polynomials
Note that p(x) can be rewritten as ⟨w, ψ(x)⟩where the elements of ψ(x) are all
pression scheme for p(x) reduces to the problem of constructing a compression
scheme for halfspaces in Rd′ where d′ = O(dr).
Separation with Margin
Suppose that a training set is separated with margin γ. The Perceptron algorithm
makes no mistakes on the entire training set. Hence, we have a compression
Bibliographic Remarks
mental theorem of learning that the class has a ﬁnite VC dimension. The other
direction, namely, whether every hypothesis class of ﬁnite VC dimension has a
The Minimum Description Length (MDL) and Occam’s razor principles allow a
potentially very large hypothesis class but deﬁne a hierarchy over hypotheses and
prefer to choose hypotheses that appear higher in the hierarchy. In this chapter
distribution over the hypothesis class.
As in the MDL paradigm, we deﬁne a hierarchy over hypotheses in our class H.
Now, the hierarchy takes the form of a prior distribution over H. That is, we
and refer to P(h) as the prior score of h. Following the Bayesian reasoning
pothesis. Instead, the learning process deﬁnes a posterior probability over H,
which we denote by Q. In the context of a supervised learning problem, where
H contains functions from X to Y, one can think of Q as deﬁning a randomized
prediction rule as follows. Whenever we get a new instance x, we randomly pick
By the linearity of expectation, the generalization loss and training loss of Q can
The following theorem tells us that the diﬀerence between the generalization
loss and the empirical loss of a posterior Q is bounded by an expression that
eralization loss of Q, we should jointly minimize both the empirical loss of Q
Personal use only. Not for distribution. Do not post.
later show how in some cases this idea leads to the regularized risk minimization
Let D be an arbitrary distribution over an example domain Z.
to D, for all distributions Q over H (even such that depend on S), we have
For any function f(S), using Markov’s inequality:
We now turn to bound ES[ef(S)]. The main trick is to upper bound f(S) by
using an expression that does not depend on Q but rather depends on the prior
probability P. To do so, ﬁx some S and note that from the deﬁnition of D(Q||P)
we get that for all Q,
where the inequality follows from Jensen’s inequality and the concavity of the
log function. Therefore,
we can switch the order of expectations (because P is a prior that does not
depend on S), which yields
Hoeﬀding’s inequality tells us that
Rearranging the inequality and using Jensen’s inequality again (the function x2
is convex) we conclude that
Given a prior P, return a posterior Q that minimizes the function
This rule is similar to the regularized risk minimization principle. That is, we
“distance” between Q and P.
Bibliographic Remarks
Compare to the bounds we derived using uniform convergence.
Appendix A Technical Lemmas
necessary condition for the inequality x < a log(x) to hold is that x < 2a log(a).
ditionally and therefore the claim is trivial. From now on, assume that a > √e.
Thus, for x > a the derivative is positive and the function increases. In addition,
f(2a log(a)) = 2a log(a) −a log(2a log(a))
Let X be a random variable and x′ ∈R be a scalar and assume
we have that E[|X −x′|] is at most P∞
The proof now follows from the inequalities
Let X be a random variable and x′ ∈R be a scalar and assume
Personal use only. Not for distribution. Do not post.
log(b)). Since ti is monotonically
increasing we have that
Using the assumption in the lemma we have
Combining the preceding inequalities we conclude our proof.
Using Stirling’s approximation we further have that
which proves our inductive argument.
Appendix B Measure Concentration
Let Z1, . . . , Zm be an i.i.d. sequence of random variables and let µ be their mean.
average from the expectation when m is ﬁnite.
We start with an inequality which is called Markov’s inequality. Let Z be a
nonnegative random variable. The expectation of Z can be written as follows:
Rearranging the inequality yields Markov’s inequality:
inequality the following.
Personal use only. Not for distribution. Do not post.
Chebyshev’s Inequality
Chebyshev’s inequality:
Consider the random variable
Applying Chebyshev’s inequality, we obtain the following:
Let Z1, . . . , Zm be a sequence of i.i.d. random variables and assume
The deviation between the empirical average and the mean given previously
decreases polynomially with m. It is possible to obtain a signiﬁcantly faster
decrease. In the sections that follow we derive bounds that decrease exponentially
Measure Concentration
monotonicity of the exponent function and Markov’s inequality, we have that for
Let Z1, . . . , Zm be independent Bernoulli variables where for every
For the other direction, we apply similar calculations:
Hoeﬀding’s Inequality
Let Z1, . . . , Zm be a sequence of i.i.d.
random variables and let ¯Z =
Denote Xi = Zi −E[Zi] and ¯X =
i Xi. Using the monotonicity of
Using the independence assumption we also have
Measure Concentration
Let X be a random variable that takes values
Taking the expectation, we obtain that
the above can be rewritten as eL(h). Therefore, to conclude our proof it suﬃces
Bennet’s and Bernstein’s Inequalities
Bennet’s and Bernsein’s inequalities are similar to Chernoﬀ’s bounds, but they
hold for any sequence of independent random variables. We state the inequalities
Let Z1, . . . , Zm be i.i.d. random variables
Deﬁne random variables α1, . . . , αm s.t. αi = ℓ(h, zi) −LD(h). Note that
≤E[ℓ(h, zi)] = LD(h),
Measure Concentration
Solving for t yields
which proves the ﬁrst inequality. The second part of the lemma follows in a
Let X be a (m, p) binomial variable. That is, X = Pm
bility that a normal variable will be greater than or equal to
following lemma follows by standard tail bounds for the normal distribution.
Concentration of χ2 Variables
Let X1, . . . , Xk be k independent normally distributed random variables. That
χ2 (chi square) and the distribution of the random variable Z = X2
k (chi square with k degrees of freedom). Clearly, E[X2
E[Z] = k. The following lemma states that X2
k is concentrated around its mean.
we use Chernoﬀ’s bounding method. For the ﬁrst inequality, we ﬁrst bound
Using the well known equalities, E[X2
Now, applying Chernoﬀ’s bounding method we get that
For the second inequality, we use a known closed form expression for the
moment generating function of a χ2
k distributed random variable:
On the basis of the equation and using Chernoﬀ’s bounding method we have
Finally, the last inequality follows from the ﬁrst two inequalities and the union
Appendix C Linear Algebra
In this chapter we only deal with linear algebra over ﬁnite dimensional Euclidean
spaces. We refer to vectors as column vectors.
The Euclidean norm (a.k.a. the ℓ2 norm) is ∥u∥=
⟨u, u⟩. We also use the ℓ1
A subspace of Rd is a subset of Rd which is closed under addition and scalar
multiplication. The span of a set of vectors u1, . . . , uk is the subspace containing
all vectors of the form
A set of vectors U = {u1, . . . , uk} is independent if for every i, ui is not in the
span of the vectors in U. We say that U is a basis of V if it is both independent
and spans V. The dimension of V is the size of a basis of V (and it can be veriﬁed
that all bases of V have the same size). We say that U is an orthogonal set if for
is the dimension of its range.
The transpose of a matrix A, denoted A⊤, is the matrix whose (i, j) entry
equals the (j, i) entry of A. We say that A is symmetric if A = A⊤.
Personal use only. Not for distribution. Do not post.
Eigenvalues and Eigenvectors
rank k, then there exists an orthonormal basis of Rd, u1, . . . , ud, such that each
ui is an eigenvector of A. Furthermore, A can be written as A = Pd
be written equivalently as A = UDU ⊤, where the columns of U are the vectors
u1, . . . , ud, and D is a diagonal matrix with Di,i = λi and for i ̸= j, Di,j =
eigenvectors which correspond to the nonzero eigenvalues span the range of A,
and the eigenvectors which correspond to zero eigenvalues span the null space of
Positive deﬁnite matrices
A is positive semideﬁnite if all its eigenvalues are nonnegative.
equivalent deﬁnitions of positive semideﬁniteness of A:
• All the eigenvalues of A are nonnegative.
• There exists a matrix B such that A = BB⊤.
Singular Value Decomposition (SVD)
of A, which is called Singular Value Decomposition, or SVD for short.
We ﬁrst show that if we can ﬁnd r orthonormal singular vectors with positive
singular values, then we can decompose A = UDV ⊤, with the columns of U and
V containing the left and right singular vectors, and D being a diagonal r × r
matrix with the singular values on its diagonal.
orthonormal set of right singular vectors of A, u1, . . . , ur is an orthonormal set
of corresponding left singular vectors of A, and σ1, . . . , σr are the corresponding
singular values. Then,
It follows that if U is a matrix whose columns are the ui’s, V is a matrix whose
columns are the vi’s, and D is a diagonal matrix with Di,i = σi, then
Any right singular vector of A must be in the range of A⊤(otherwise,
the singular value will have to be zero). Therefore, v1, . . . , vr is an orthonormal
basis of the range of A. Let us complete it to an orthonormal basis of Rn by
i . It suﬃces to prove
where the last equality follows from the deﬁnition.
The next lemma relates the singular values of A to the eigenvalues of A⊤A
v, u are right and left singular vectors of A with singular value σ
iﬀv is an eigenvector of A⊤A with corresponding eigenvalue σ2 and u = σ−1Av
is an eigenvector of AA⊤with corresponding eigenvalue σ2.
sponding right singular vector. Then,
Finally, we show that if A has rank r then it has r orthonormal singular
Then, v1, . . . , vr is an orthonormal set of right singular vectors of A.
First note that since the rank of A is r, the range of A is a subspace of
sition of A⊤A, namely, A⊤A = WDW ⊤, with D being a diagonal matrix with
that these are also right singular vectors of A. The proof is by induction. For the
basis of the induction, note that any unit vector v can be written as v = Wx,
with all the ﬁrst t elements of x being zero. It follows that
UDV ⊤where D is an r × r matrix with nonzero singular values of A and the
responding eigenvector of A⊤A and the ith column of U is the corresponding
Personal use only. Not for distribution. Do not post.
minimax lower bounds for online convex games, in ‘Proceedings of the Nineteenth
Annual Conference on Computational Learning Theory’.
of axioms for clustering, in ‘Proceedings of Neural Information Processing Systems
of the potential function method in pattern recognition learning’, Automation and
Cambridge University Press.
the restricted isometry property for random matrices’, Constructive Approximation
Personal use only. Not for distribution. Do not post.
ference on Learning Theory (COLT)’.
ﬁlter trees’, Preprint, June .
plied to the Analysis of Learning Algorithms, PhD thesis, Ecole Polytechnique.
tics Department, University of California at Berkeley.
Regression Trees, Wadsworth & Brooks.
sures, in ‘NIPS Workshop: Machine Learning for Web Search’.
and experiments with perceptron algorithms, in ‘Conference on Empirical Methods
in Natural Language Processing’.
ing: deep neural networks with multitask learning, in ‘International Conference on
Machine Learning (ICML)’.
Prague Conf. Information Theory Statistical Decision Functions, Random Processes
Cambridge University Press.
ability and the erm principle, in ‘Conference on Learning Theory (COLT)’.
theoretical comparison with implications, in ‘NIPS’.
sophical Transactions of the Royal Society of London. Series A, Containing Papers
and an application to boosting, in ‘European Conference on Computational Learning
tion cone models for face recognition under variable lighting and pose’, IEEE Trans.
in ‘Proceedings of the International Conference on Machine Learning (ICML)’.
Risk bounds, margin bounds, and regularization, in ‘NIPS’.
learning algorithms, in ‘ACM Symposium on the Theory of Computing (STOC)’.
tions of halfspaces, in ‘FOCS’.
ization error, in ‘Proceedings of the 18th Conference in Uncertainty in Artiﬁcial
models for segmenting and labeling sequence data, in ‘International Conference on
Le, Q. V., Ranzato, M.-A., Monga, R., Devin, M., Corrado, G., Chen, K., Dean, J. &
in ‘International Conference on Machine Learning (ICML)’.
for scalable unsupervised learning of hierarchical representations, in ‘International
Conference on Machine Learning (ICML)’.
Unpublished manuscript.
schemes, in ‘Conference on Learning Theory (COLT)’.
Cambridge university press.
ometry, The MIT Press.
suﬃcient for generalization and necessary and suﬃcient for consistency of empirical
Networks. Cambridge University Press, Cambridge, UK .
proximation approach to stochastic programming’, SIAM Journal on Optimization
mization, Nauka Publishers, Moscow.
sity of Louvain (UCL).
The London, Edinburgh, and Dublin Philosophical Magazine and Journal of Science
‘Conference on Uncertainty in Artiﬁcial Intelligence (UAI)’.
strongly convex stochastic optimization, in ‘International Conference on Machine
combinatorial parameters, and learnability, in ‘NIPS’.
invariant feature hierarchies with applications to object recognition, in ‘Computer
lel Distributed Processing – Explorations in the Microstructure of Cognition’, MIT
senter theorem, in ‘NeuroCOLT’.
Regularization, Optimization and Beyond, MIT Press.
and vision: theory and practice, MIT Press.
PhD thesis, The Hebrew University.
stability and uniform convergence’, The Journal of Machine Learning Research
optimization, in ‘Conference on Learning Theory (COLT)’.
linear separability: New relaxations and eﬃcient boosting algorithms, in ‘Proceedings
of the Nineteenth Annual Conference on Computational Learning Theory’.
GrAdient SOlver for SVM, in ‘International Conference on Machine Learning’,
in optimization problems with sparsity constraints’, Siam Journal on Optimization
ence on Machine Learning (ICML)’.
machine learning for interdependent and structured output spaces, in ‘Proceedings
S. J. Hanson & R. P. Lippmann, eds, ‘Advances in Neural Information Processing
frequencies of events to their probabilities’, Theory of Probability and its applications
Moscow. (In Russian).
‘Algorithmic Learning Theory (ALT)’.
that maximize the margin, in ‘Proceedings of the 23rd international conference on
recognition, in ‘Proceedings of the Seventh European Symposium on Artiﬁcial Neural
on Machine Learning’.
ent ascent, in ‘International Conference on Machine Learning’.
Empirical Risk Minimization, see ERM
Personal use only. Not for distribution. Do not post.
GD, see gradient descent
improper, see representation independent
inductive bias, see bias
linear discriminant analysis, see LDA
Littlestone dimension, see Ldim
Minimum Description Length, see MDL
Normalized Discounted Cumulative Gain,
orthogonal matching pursuit, see OMP
Principal Component Analysis, see PCA
Probably Approximately Correct, see PAC
regularized loss minimization, see RLM
Singular Value Decomposition, see SVD
Stochastic Gradient Descent, see SGD
Structural Risk Minimization, see SRM
Support Vector Machines, see SVM
